{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"WisEcon","text":""},{"location":"#wisecon_1","title":"WisEcon\u200b\u662f\u200b\u4ec0\u4e48\u200b?","text":"<p>WisEcon \u200b\u662f\u200b\u4e00\u6b3e\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u91d1\u878d\u5e02\u573a\u200b\u7684\u200b\u91cf\u5316\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\uff0c\u200b\u65e8\u5728\u200b\u4e3a\u200b\u6295\u8d44\u8005\u200b\u3001\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u548c\u200b\u91d1\u878d\u200b\u5206\u6790\u5e08\u200b\u63d0\u4f9b\u200b\u5168\u9762\u200b\u7684\u200b\u6570\u636e\u5206\u6790\u200b\u548c\u200b\u51b3\u7b56\u200b\u652f\u6301\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5176\u200b\u4e3b\u8981\u200b\u7279\u70b9\u200b\u548c\u200b\u529f\u80fd\u200b\uff1a</p> <ol> <li> <p>\u200b\u6570\u636e\u200b\u652f\u6301\u200b WisEcon \u200b\u63d0\u4f9b\u200b\u591a\u79cd\u7c7b\u578b\u200b\u7684\u200b\u91d1\u878d\u200b\u6570\u636e\u200b\uff0c\u200b\u5305\u62ec\u200b</p> <ul> <li>\u200b\u80a1\u7968\u200b\u6570\u636e\u200b\uff1a\u200b\u5b9e\u65f6\u200b\u548c\u200b\u5386\u53f2\u200b\u80a1\u7968\u4ef7\u683c\u200b\u3001\u200b\u4ea4\u6613\u91cf\u200b\u3001\u200b\u8d22\u52a1\u62a5\u8868\u200b\u7b49\u200b\u3002</li> <li>\u200b\u57fa\u91d1\u200b\u6570\u636e\u200b\uff1a\u200b\u5404\u7c7b\u200b\u57fa\u91d1\u200b\u7684\u200b\u51c0\u503c\u200b\u3001\u200b\u6536\u76ca\u7387\u200b\u3001\u200b\u98ce\u9669\u200b\u6307\u6807\u200b\u7b49\u200b\u3002</li> <li>\u200b\u671f\u8d27\u200b\u6570\u636e\u200b\uff1a\u200b\u671f\u8d27\u200b\u5408\u7ea6\u200b\u7684\u200b\u4ef7\u683c\u200b\u3001\u200b\u6210\u4ea4\u91cf\u200b\u3001\u200b\u6301\u4ed3\u91cf\u200b\u7b49\u200b\u3002</li> <li>\u200b\u5b8f\u89c2\u7ecf\u6d4e\u200b\u6570\u636e\u200b\uff1a\u200b\u5305\u62ec\u200bGDP\u3001\u200b\u901a\u8d27\u81a8\u80c0\u7387\u200b\u3001\u200b\u5931\u4e1a\u7387\u200b\u7b49\u200b\u5173\u952e\u200b\u7ecf\u6d4e\u6307\u6807\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u5927\u200b\u6a21\u578b\u200b\u652f\u6301\u200b WisEcon \u200b\u96c6\u6210\u200b\u4e86\u200b ZLAI-Agent \u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u79cd\u200b\u5f3a\u5927\u200b\u7684\u200b\u4eba\u5de5\u667a\u80fd\u200b\u9a71\u52a8\u200b\u7684\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\u3002 </p> <ul> <li>\u200b\u901a\u8fc7\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u548c\u200b\u81ea\u7136\u8bed\u8a00\u200b\u5904\u7406\u200b\uff0cZLAI-Agent \u200b\u53ef\u4ee5\u200b\u6709\u6548\u200b\u5730\u200b\u5206\u6790\u200b\u6d77\u91cf\u200b\u6570\u636e\u200b\uff0c\u200b\u53d1\u6398\u200b\u6f5c\u5728\u200b\u7684\u200b\u6295\u8d44\u200b\u673a\u4f1a\u200b\uff0c\u200b\u5e76\u200b\u63d0\u4f9b\u200b\u667a\u80fd\u5316\u200b\u7684\u200b\u5efa\u8bae\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u529f\u80fd\u200b\u7279\u70b9\u200b</p> <ul> <li>\u200b\u6570\u636e\u200b\u53ef\u89c6\u5316\u200b\uff1a\u200b\u76f4\u89c2\u200b\u7684\u200b\u56fe\u8868\u200b\u548c\u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u5feb\u901f\u200b\u7406\u89e3\u200b\u6570\u636e\u200b\u8d8b\u52bf\u200b\u548c\u200b\u6a21\u5f0f\u200b\u3002 </li> <li>\u200b\u7b56\u7565\u200b\u56de\u6d4b\u200b\uff1a\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u5386\u53f2\u200b\u6570\u636e\u6d4b\u8bd5\u200b\u81ea\u5df1\u200b\u7684\u200b\u4ea4\u6613\u200b\u7b56\u7565\u200b\uff0c\u200b\u4ee5\u200b\u8bc4\u4f30\u200b\u5176\u200b\u6709\u6548\u6027\u200b\u3002 </li> <li>\u200b\u98ce\u9669\u7ba1\u7406\u200b\uff1a\u200b\u63d0\u4f9b\u200b\u591a\u79cd\u200b\u98ce\u9669\u200b\u8bc4\u4f30\u200b\u5de5\u5177\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u8bc6\u522b\u200b\u548c\u200b\u7ba1\u7406\u200b\u6295\u8d44\u200b\u98ce\u9669\u200b\u3002 </li> <li>\u200b\u5b9e\u65f6\u200b\u76d1\u63a7\u200b\uff1a\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u8b66\u62a5\u200b\uff0c\u200b\u5b9e\u65f6\u200b\u76d1\u63a7\u200b\u5e02\u573a\u200b\u53d8\u5316\u200b\uff0c\u200b\u53ca\u65f6\u200b\u4f5c\u51fa\u200b\u51b3\u7b56\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u5e94\u7528\u200b\u573a\u666f\u200b</p> <ul> <li>\u200b\u4e2a\u4eba\u200b\u6295\u8d44\u8005\u200b\uff1a\u200b\u5e2e\u52a9\u200b\u4e2a\u4eba\u200b\u6295\u8d44\u8005\u200b\u5236\u5b9a\u200b\u6295\u8d44\u200b\u7b56\u7565\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u6295\u8d44\u200b\u56de\u62a5\u200b\u3002</li> <li>\u200b\u673a\u6784\u200b\u6295\u8d44\u8005\u200b\uff1a\u200b\u4e3a\u200b\u673a\u6784\u200b\u63d0\u4f9b\u200b\u6df1\u5165\u200b\u7684\u200b\u5e02\u573a\u200b\u5206\u6790\u200b\u548c\u200b\u9884\u6d4b\u200b\uff0c\u200b\u652f\u6301\u200b\u51b3\u7b56\u200b\u8fc7\u7a0b\u200b\u3002</li> <li>\u200b\u5b66\u672f\u7814\u7a76\u200b\uff1a\u200b\u4e3a\u200b\u91d1\u878d\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u63d0\u4f9b\u200b\u4e30\u5bcc\u200b\u7684\u200b\u6570\u636e\u200b\u548c\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\uff0c\u200b\u652f\u6301\u200b\u5b66\u672f\u7814\u7a76\u200b\u3002</li> </ul> </li> </ol>"},{"location":"#wisecon_2","title":"WisEcon\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b?","text":"<pre><code>pip install wisecon -U\n</code></pre>"},{"location":"api/macro/","title":"\u5b8f\u89c2\u7ecf\u6d4e\u200b(Editing)","text":""},{"location":"api/macro/#wisecon.macro.asset_invest.AssetInvestMapping","title":"AssetInvestMapping","text":""},{"location":"api/macro/#wisecon.macro.asset_invest.AssetInvest","title":"AssetInvest","text":"<pre><code>AssetInvest(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\asset_invest.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = AssetInvestMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u57ce\u9547\u200b\u56fa\u5b9a\u8d44\u4ea7\u200b\u6295\u8d44\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.boom_index.BoomIndexMapping","title":"BoomIndexMapping","text":""},{"location":"api/macro/#wisecon.macro.boom_index.BoomIndex","title":"BoomIndex","text":"<pre><code>BoomIndex(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\boom_index.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = BoomIndexMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e2d\u56fd\u200b \u200b\u4f01\u4e1a\u200b\u666f\u6c14\u200b\u53ca\u200b\u4f01\u4e1a\u5bb6\u200b\u4fe1\u5fc3\u200b\u6307\u6570\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.cpi.CPIMapping","title":"CPIMapping","text":""},{"location":"api/macro/#wisecon.macro.cpi.CPI","title":"CPI","text":"<pre><code>CPI(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\cpi.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = CPIMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5c45\u6c11\u6d88\u8d39\u200b\u4ef7\u683c\u6307\u6570\u200b(CPI\uff0c\u200b\u4e0a\u5e74\u200b\u540c\u6708\u200b=100)\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.currency_supply.CurrencySupplyMapping","title":"CurrencySupplyMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u8d27\u5e01\u200b\u4f9b\u5e94\u91cf\u200b</p>"},{"location":"api/macro/#wisecon.macro.currency_supply.CurrencySupply","title":"CurrencySupply","text":"<pre><code>CurrencySupply(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e2d\u56fd\u200b\u8d27\u5e01\u200b\u4f9b\u5e94\u91cf\u200b</p> Notes <pre><code>from wisecon.macro import *\ndata = CurrencySupply(size=20).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>Optional[int]</code> <p>\u200b\u6700\u5927\u200b\u6570\u636e\u91cf\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\macro\\currency_supply.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.macro import *\n        data = CurrencySupply(size=20).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        size: \u200b\u6700\u5927\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.size = size\n    self.mapping = CurrencySupplyMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b\u8d27\u5e01\u200b\u4f9b\u5e94\u91cf\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.customs.CustomsMapping","title":"CustomsMapping","text":""},{"location":"api/macro/#wisecon.macro.customs.Customs","title":"Customs","text":"<pre><code>Customs(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\customs.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = CustomsMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u6d77\u5173\u200b\u8fdb\u51fa\u53e3\u200b\u589e\u51cf\u200b\u60c5\u51b5\u200b\u4e00\u89c8\u8868\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.deposit_rate.DepositRateMapping","title":"DepositRateMapping","text":""},{"location":"api/macro/#wisecon.macro.deposit_rate.DepositRate","title":"DepositRate","text":"<pre><code>DepositRate(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\deposit_rate.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = DepositRateMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5229\u7387\u200b\u8c03\u6574\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.deposit_reserve.DepositReserveMapping","title":"DepositReserveMapping","text":""},{"location":"api/macro/#wisecon.macro.deposit_reserve.DepositReserve","title":"DepositReserve","text":"<pre><code>DepositReserve(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\deposit_reserve.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = DepositReserveMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5b58\u6b3e\u200b\u51c6\u5907\u91d1\u7387\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.faith_index.FaithIndexMapping","title":"FaithIndexMapping","text":""},{"location":"api/macro/#wisecon.macro.faith_index.FaithIndex","title":"FaithIndex","text":"<pre><code>FaithIndex(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\faith_index.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = FaithIndexMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u6d88\u8d39\u8005\u200b\u4fe1\u5fc3\u200b\u6307\u6570\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.fdi.FDIMapping","title":"FDIMapping","text":""},{"location":"api/macro/#wisecon.macro.fdi.FDI","title":"FDI","text":"<pre><code>FDI(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u4e2d\u56fd\u200b \u200b\u5916\u5546\u200b\u76f4\u63a5\u200b\u6295\u8d44\u200b\u6570\u636e\u200b(FDI)</p> Source code in <code>wisecon\\macro\\fdi.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = FDIMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5916\u5546\u200b\u76f4\u63a5\u200b\u6295\u8d44\u200b\u6570\u636e\u200b(FDI)\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.forex_deposit.ForexDepositMapping","title":"ForexDepositMapping","text":""},{"location":"api/macro/#wisecon.macro.forex_deposit.ForexDeposit","title":"ForexDeposit","text":"<pre><code>ForexDeposit(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\forex_deposit.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = ForexDepositMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u672c\u200b\u5916\u5e01\u5b58\u6b3e\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.forex_loan.ForexLoanMapping","title":"ForexLoanMapping","text":""},{"location":"api/macro/#wisecon.macro.forex_loan.ForexLoan","title":"ForexLoan","text":"<pre><code>ForexLoan(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\forex_loan.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = ForexLoanMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5916\u6c47\u200b\u8d37\u6b3e\u200b\u6570\u636e\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.gdp.GDPMapping","title":"GDPMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b GDP</p>"},{"location":"api/macro/#wisecon.macro.gdp.GDP","title":"GDP","text":"<pre><code>GDP(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b GDP\uff08\u200b\u4e2d\u56fd\u200b\uff09</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>Optional[int]</code> <p>\u200b\u6700\u5927\u200b\u6570\u636e\u91cf\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from wisecon.macro import GDP\n&gt;&gt;&gt; data = GDP(size=20).load()\n&gt;&gt;&gt; data.to_frame(chinese_column=True)\n</code></pre> Source code in <code>wisecon\\macro\\gdp.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Args:\n        size: \u200b\u6700\u5927\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n\n    Examples:\n        &gt;&gt;&gt; from wisecon.macro import GDP\n        &gt;&gt;&gt; data = GDP(size=20).load()\n        &gt;&gt;&gt; data.to_frame(chinese_column=True)\n    \"\"\"\n    self.size = size\n    self.mapping = GDPMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u56fd\u5185\u200b\u751f\u4ea7\u603b\u503c\u200b(GDP)\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.gold_currency.GoldCurrencyMapping","title":"GoldCurrencyMapping","text":""},{"location":"api/macro/#wisecon.macro.gold_currency.GoldCurrency","title":"GoldCurrency","text":"<pre><code>GoldCurrency(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\gold_currency.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = GoldCurrencyMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5916\u6c47\u200b\u548c\u200b\u9ec4\u91d1\u200b\u50a8\u5907\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.goodes_index.GoodsIndexMapping","title":"GoodsIndexMapping","text":""},{"location":"api/macro/#wisecon.macro.goodes_index.GoodsIndex","title":"GoodsIndex","text":"<pre><code>GoodsIndex(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\goodes_index.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = GoodsIndexMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u4f01\u4e1a\u200b\u5546\u54c1\u200b\u4ef7\u683c\u6307\u6570\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.gov_income.GovIncomeMapping","title":"GovIncomeMapping","text":""},{"location":"api/macro/#wisecon.macro.gov_income.GovIncome","title":"GovIncome","text":"<pre><code>GovIncome(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\gov_income.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = GovIncomeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u8d22\u653f\u6536\u5165\u200b\uff08\u200b\u6bcf\u5e74\u200b2\u200b\u6708\u200b\u516c\u5e03\u200b\u5f53\u5e74\u200b1-2\u200b\u6708\u200b\u7d2f\u8ba1\u200b\u503c\u200b\uff09\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.hose_index.HoseIndexOldMapping","title":"HoseIndexOldMapping","text":""},{"location":"api/macro/#wisecon.macro.hose_index.HoseIndexOld","title":"HoseIndexOld","text":"<pre><code>HoseIndexOld(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\hose_index.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = HoseIndexOldMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u623f\u4ef7\u200b\u6307\u6570\u200b(08\u201410\u200b\u5e74\u200b)\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.hose_index.HoseIndexNewMapping","title":"HoseIndexNewMapping","text":""},{"location":"api/macro/#wisecon.macro.hose_index.HoseIndexNew","title":"HoseIndexNew","text":"<pre><code>HoseIndexNew(\n    cities: Optional[List[str]] = [\"\u200b\u5317\u4eac\u200b\", \"\u200b\u4e0a\u6d77\u200b\"],\n    report_date: Optional[str] = None,\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>:param query_config: :param cities: \u200b\u57ce\u5e02\u200b :param size: \u200b\u6570\u636e\u91cf\u200b :param report_date: \u200b\u65e5\u671f\u200b :param verbose: :param logger: :param kwargs:</p> Source code in <code>wisecon\\macro\\hose_index.py</code> <pre><code>def __init__(\n        self,\n        cities: Optional[List[str]] = [\"\u200b\u5317\u4eac\u200b\", \"\u200b\u4e0a\u6d77\u200b\"],\n        report_date: Optional[str] = None,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n\n    :param query_config:\n    :param cities: \u200b\u57ce\u5e02\u200b\n    :param size: \u200b\u6570\u636e\u91cf\u200b\n    :param report_date: \u200b\u65e5\u671f\u200b\n    :param verbose:\n    :param logger:\n    :param kwargs:\n    \"\"\"\n    self.cities = cities\n    self.report_date = report_date\n    self.size = size\n    self.mapping = HoseIndexNewMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u65b0\u200b\u623f\u4ef7\u200b\u6307\u6570\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.imp_intrestraten.ImpInterestMapping","title":"ImpInterestMapping","text":""},{"location":"api/macro/#wisecon.macro.imp_intrestraten.ImpInterest","title":"ImpInterest","text":"<pre><code>ImpInterest(\n    size: Optional[int] = 20,\n    market: Literal[\n        \"\u200b\u4e0a\u6d77\u200b\", \"\u200b\u4e2d\u56fd\u200b\", \"\u200b\u4f26\u6566\u200b\", \"\u200b\u6b27\u6d32\u200b\", \"\u200b\u9999\u6e2f\u200b\", \"\u200b\u65b0\u52a0\u5761\u200b\"\n    ] = \"\u200b\u4e0a\u6d77\u200b\",\n    currency_code: Literal[\n        \"CNY\", \"HKD\", \"USD\", \"GBP\", \"JPY\", \"EUR\", \"SGD\"\n    ] = \"CNY\",\n    indicator: Literal[\n        \"1d\", \"1w\", \"2w\", \"1m\", \"3m\", \"6m\", \"9m\", \"1y\"\n    ] = \"1d\",\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>:param size: :param currency_code: \u200b\u5e01\u79cd\u200b     [\"CNY\", \"HKD\", \"USD\", \"GBP\", \"JPY\", \"EUR\", \"SGD\"] :param market: \u200b\u5e02\u573a\u200b     {\"\u200b\u4e0a\u6d77\u200b\": \"001\", \"\u200b\u4e2d\u56fd\u200b\": \"002\", \"\u200b\u4f26\u6566\u200b\": \"003\", \"\u200b\u6b27\u6d32\u200b\": \"004\", \"\u200b\u9999\u6e2f\u200b\": \"005\", \"\u200b\u65b0\u52a0\u5761\u200b\": \"006\"} :param indicator: \u200b\u6307\u6807\u200b\u5468\u671f\u200b     {         \"1d\": \"001\",         \"1w\": \"101\", \"2w\": \"102\",         \"1m\": \"201\", \"2m\": \"202\", \"3m\": \"203\", \"4m\": \"204\", \"5m\": \"205\",         \"6m\": \"206\", \"7m\": \"207\", \"8m\": \"208\", \"9m\": \"209\", \"10m\": \"210\", \"11m\": \"211\",         \"1y\": \"301\",     } :param query_config: :param verbose: :param logger: :param kwargs:</p> Source code in <code>wisecon\\macro\\imp_intrestraten.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        market: Literal[\"\u200b\u4e0a\u6d77\u200b\", \"\u200b\u4e2d\u56fd\u200b\", \"\u200b\u4f26\u6566\u200b\", \"\u200b\u6b27\u6d32\u200b\", \"\u200b\u9999\u6e2f\u200b\", \"\u200b\u65b0\u52a0\u5761\u200b\"] = \"\u200b\u4e0a\u6d77\u200b\",\n        currency_code: Literal[\"CNY\", \"HKD\", \"USD\", \"GBP\", \"JPY\", \"EUR\", \"SGD\"] = \"CNY\",\n        indicator: Literal[\"1d\", \"1w\", \"2w\", \"1m\", \"3m\", \"6m\", \"9m\", \"1y\"] = \"1d\",\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    :param size:\n    :param currency_code: \u200b\u5e01\u79cd\u200b\n        [\"CNY\", \"HKD\", \"USD\", \"GBP\", \"JPY\", \"EUR\", \"SGD\"]\n    :param market: \u200b\u5e02\u573a\u200b\n        {\"\u200b\u4e0a\u6d77\u200b\": \"001\", \"\u200b\u4e2d\u56fd\u200b\": \"002\", \"\u200b\u4f26\u6566\u200b\": \"003\", \"\u200b\u6b27\u6d32\u200b\": \"004\", \"\u200b\u9999\u6e2f\u200b\": \"005\", \"\u200b\u65b0\u52a0\u5761\u200b\": \"006\"}\n    :param indicator: \u200b\u6307\u6807\u200b\u5468\u671f\u200b\n        {\n            \"1d\": \"001\",\n            \"1w\": \"101\", \"2w\": \"102\",\n            \"1m\": \"201\", \"2m\": \"202\", \"3m\": \"203\", \"4m\": \"204\", \"5m\": \"205\",\n            \"6m\": \"206\", \"7m\": \"207\", \"8m\": \"208\", \"9m\": \"209\", \"10m\": \"210\", \"11m\": \"211\",\n            \"1y\": \"301\",\n        }\n    :param query_config:\n    :param verbose:\n    :param logger:\n    :param kwargs:\n    \"\"\"\n    self.size = size\n    self.currency_code = currency_code\n    self.market = market\n    self.indicator = indicator\n    self.mapping = ImpInterestMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=description)\n</code></pre>"},{"location":"api/macro/#wisecon.macro.indus_grow.IndusGrowMapping","title":"IndusGrowMapping","text":""},{"location":"api/macro/#wisecon.macro.indus_grow.IndusGrow","title":"IndusGrow","text":"<pre><code>IndusGrow(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\indus_grow.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = IndusGrowMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5de5\u4e1a\u200b\u589e\u52a0\u503c\u200b\u589e\u957f\u200b \uff08\u200b\u6bcf\u5e74\u200b2\u200b\u6708\u200b\u516c\u5e03\u200b\u5f53\u5e74\u200b1-2\u200b\u6708\u200b\u7d2f\u8ba1\u200b\u503c\u200b\uff09\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.lpr.LPRMapping","title":"LPRMapping","text":""},{"location":"api/macro/#wisecon.macro.lpr.LPR","title":"LPR","text":"<pre><code>LPR(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\lpr.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = LPRMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b LPR\u200b\u54c1\u79cd\u200b\u8be6\u7ec6\u200b\u6570\u636e\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.new_loan.NewLoanQueryConfig","title":"NewLoanQueryConfig","text":""},{"location":"api/macro/#wisecon.macro.new_loan.NewLoan","title":"NewLoan","text":"<pre><code>NewLoan(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\new_loan.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = NewLoanQueryConfig()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u65b0\u589e\u200b\u4fe1\u8d37\u200b\u6570\u636e\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.oil_price.OilPriceMapping","title":"OilPriceMapping","text":""},{"location":"api/macro/#wisecon.macro.oil_price.OilPrice","title":"OilPrice","text":"<pre><code>OilPrice(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\oil_price.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = OilPriceMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u6c7d\u67f4\u6cb9\u200b\u5386\u53f2\u200b\u8c03\u4ef7\u200b\u4fe1\u606f\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.pmi.PMIMapping","title":"PMIMapping","text":""},{"location":"api/macro/#wisecon.macro.pmi.PMI","title":"PMI","text":"<pre><code>PMI(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u91c7\u8d2d\u200b\u7ecf\u7406\u4eba\u200b\u6307\u6570\u200b(PMI)</p> Source code in <code>wisecon\\macro\\pmi.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.verbose = verbose\n    self.mapping = PMIMapping()\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u91c7\u8d2d\u200b\u7ecf\u7406\u4eba\u200b\u6307\u6570\u200b(PMI)\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.ppi.PPIMapping","title":"PPIMapping","text":""},{"location":"api/macro/#wisecon.macro.ppi.PPI","title":"PPI","text":"<pre><code>PPI(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u4e2d\u56fd\u200b \u200b\u5de5\u4e1a\u54c1\u200b\u51fa\u5382\u4ef7\u683c\u200b\u6307\u6570\u200b(PPI)</p> Source code in <code>wisecon\\macro\\ppi.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = PPIMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5de5\u4e1a\u54c1\u200b\u51fa\u5382\u4ef7\u683c\u200b\u6307\u6570\u200b(PPI)\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.stock_open.StockOpenMapping","title":"StockOpenMapping","text":""},{"location":"api/macro/#wisecon.macro.stock_open.StockOpen","title":"StockOpen","text":"<pre><code>StockOpen(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\stock_open.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = StockOpenMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u4e2d\u56fd\u200b \u200b\u80a1\u7968\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b\u8be6\u7ec6\u200b\u6570\u636e\u200b\",\n    )\n</code></pre>"},{"location":"api/macro/#wisecon.macro.stock_statistics.StockStatisticsMapping","title":"StockStatisticsMapping","text":""},{"location":"api/macro/#wisecon.macro.stock_statistics.StockStatistics","title":"StockStatistics","text":"<pre><code>StockStatistics(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\stock_statistics.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = StockStatisticsMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5168\u56fd\u200b\u80a1\u7968\u4ea4\u6613\u200b\u7edf\u8ba1\u8868\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.tax.TaxMapping","title":"TaxMapping","text":""},{"location":"api/macro/#wisecon.macro.tax.Tax","title":"Tax","text":"<pre><code>Tax(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\tax.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = TaxMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u5168\u56fd\u200b\u7a0e\u6536\u6536\u5165\u200b\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.total_retail.TotalRetailMapping","title":"TotalRetailMapping","text":""},{"location":"api/macro/#wisecon.macro.total_retail.TotalRetail","title":"TotalRetail","text":"<pre><code>TotalRetail(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\total_retail.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = TotalRetailMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u793e\u4f1a\u200b\u6d88\u8d39\u54c1\u200b\u96f6\u552e\u603b\u989d\u200b \uff08\u200b\u6bcf\u5e74\u200b2\u200b\u6708\u200b\u516c\u5e03\u200b\u5f53\u5e74\u200b1-2\u200b\u6708\u200b\u7d2f\u8ba1\u200b\u503c\u200b\uff09\")\n</code></pre>"},{"location":"api/macro/#wisecon.macro.transfer_fund.TransferFundMapping","title":"TransferFundMapping","text":""},{"location":"api/macro/#wisecon.macro.transfer_fund.TransferFund","title":"TransferFund","text":"<pre><code>TransferFund(\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> Source code in <code>wisecon\\macro\\transfer_fund.py</code> <pre><code>def __init__(\n        self,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    self.size = size\n    self.mapping = TransferFundMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2d\u56fd\u200b \u200b\u4ea4\u6613\u200b\u7ed3\u7b97\u200b\u8d44\u91d1\u200b(\u200b\u94f6\u8bc1\u200b\u8f6c\u8d26\u200b) \u200b\u636e\u200b\u6295\u4fdd\u200b\u57fa\u91d1\u200b\u516c\u53f8\u200b2017\u200b\u5e74\u200b7\u200b\u6708\u200b31\u200b\u65e5\u200b\u516c\u544a\u200b\uff0c\u200b\u8be5\u200b\u6570\u636e\u200b\u5df2\u200b\u505c\u6b62\u200b\u66f4\u65b0\u200b\u3002\")\n</code></pre>"},{"location":"api/fund/value/","title":"\u516c\u52df\u200b\u57fa\u91d1\u200b(Editing)","text":""},{"location":"api/fund/value/#wisecon.fund.fund_base.FundBaseMapping","title":"FundBaseMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u57fa\u91d1\u200b\u57fa\u672c\u200b\u4fe1\u606f\u200b</p>"},{"location":"api/fund/value/#wisecon.fund.fund_base.FundBase","title":"FundBase","text":"<pre><code>FundBase(\n    fund_code: str,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u57fa\u91d1\u200b\u57fa\u672c\u200b\u4fe1\u606f\u200b</p> Notes <pre><code>from wisecon.fund.fund_value import FundValue\n\ndata = FundValue(fund_code=\"000001\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fund_code</code> <code>str</code> <p>\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b</p> required <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\fund\\fund_base.py</code> <pre><code>def __init__(\n        self,\n        fund_code: str,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.fund.fund_value import FundValue\n\n        data = FundValue(fund_code=\"000001\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        fund_code: \u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.fund_code = fund_code\n    self.mapping = FundBaseMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"text\", description=\"\u200b\u57fa\u91d1\u200b\u57fa\u672c\u200b\u4fe1\u606f\u200b\",)\n</code></pre>"},{"location":"api/fund/value/#wisecon.fund.fund_list.FundListMapping","title":"FundListMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5168\u90e8\u200b\u57fa\u91d1\u200b\u5217\u8868\u200b</p>"},{"location":"api/fund/value/#wisecon.fund.fund_list.FundList","title":"FundList","text":"<pre><code>FundList(\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5168\u90e8\u200b\u57fa\u91d1\u200b\u5217\u8868\u200b</p> Notes <pre><code>from wisecon.fund import *\n\ndata = FundList().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\fund\\fund_list.py</code> <pre><code>def __init__(\n        self,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.fund import *\n\n        data = FundList().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = FundListMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"text\",\n        description=\"\u200b\u57fa\u91d1\u200b\u5217\u8868\u200b\",\n    )\n</code></pre>"},{"location":"api/fund/value/#wisecon.fund.fund_value.FundValueMapping","title":"FundValueMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u51c0\u503c\u200b</p>"},{"location":"api/fund/value/#wisecon.fund.fund_value.FundValue","title":"FundValue","text":"<pre><code>FundValue(\n    fund_code: str,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u51c0\u503c\u200b</p> Notes <pre><code>from wisecon.fund.fund_value import FundValue\n\ndata = FundValue(fund_code=\"000001\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fund_code</code> <code>str</code> <p>\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b</p> required <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\fund\\fund_value.py</code> <pre><code>def __init__(\n        self,\n        fund_code: str,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.fund.fund_value import FundValue\n\n        data = FundValue(fund_code=\"000001\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        fund_code: \u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.fund_code = fund_code\n    self.mapping = FundValueMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n\n    self.request_set(\n        response_type=\"text\",\n        description=\"\u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u51c0\u503c\u200b\",\n    )\n</code></pre>"},{"location":"api/fund/value/#wisecon.fund.fund_hist.FundHistMapping","title":"FundHistMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u57fa\u91d1\u200b\u5386\u53f2\u200b\u51c0\u503c\u200b</p>"},{"location":"api/fund/value/#wisecon.fund.fund_hist.FundHist","title":"FundHist","text":"<pre><code>FundHist(\n    fund_code: str,\n    start_date: Optional[str] = \"\",\n    end_date: Optional[str] = \"\",\n    limit: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u57fa\u91d1\u200b\u5386\u53f2\u200b\u51c0\u503c\u200b</p> Notes <pre><code>from wisecon.fund import FundHist\n\ndata = FundHist(fund_code=\"000001\", start_date=\"2020-01-01\", end_date=\"2024-01-01\", limit=10).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fund_code</code> <code>str</code> <p>\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b</p> required <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>''</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>''</code> <code>limit</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\fund\\fund_hist.py</code> <pre><code>def __init__(\n        self,\n        fund_code: str,\n        start_date: Optional[str] = \"\",\n        end_date: Optional[str] = \"\",\n        limit: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.fund import FundHist\n\n        data = FundHist(fund_code=\"000001\", start_date=\"2020-01-01\", end_date=\"2024-01-01\", limit=10).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        fund_code: \u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        limit: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.fund_code = fund_code\n    self.start_date = start_date\n    self.end_date = end_date\n    self.limit = limit\n    self.mapping = FundHistMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"text\", description=\"\u200b\u57fa\u91d1\u200b\u5386\u53f2\u200b\u51c0\u503c\u200b\", other_headers=other_headers)\n</code></pre>"},{"location":"api/other/car_sales/","title":"\u6c7d\u8f66\u200b\u9500\u552e\u200b\u6570\u636e","text":""},{"location":"api/other/car_sales/#wisecon.car.car_brand.CarBrandListMapping","title":"CarBrandListMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u6c7d\u8f66\u54c1\u724c\u200b\u5217\u8868\u200b</p>"},{"location":"api/other/car_sales/#wisecon.car.car_brand.CarBrandList","title":"CarBrandList","text":"<pre><code>CarBrandList(\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u6c7d\u8f66\u54c1\u724c\u200b\u5217\u8868\u200b</p> Notes <pre><code>data = CarBrandList().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\car\\car_brand.py</code> <pre><code>def __init__(\n        self,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        data = CarBrandList().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = CarBrandListMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u6c7d\u8f66\u54c1\u724c\u200b\u5217\u8868\u200b\")\n</code></pre>"},{"location":"api/other/car_sales/#wisecon.car.car_history_sales.CarHistorySalesMapping","title":"CarHistorySalesMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u6c7d\u8f66\u200b\u5386\u53f2\u200b\u9500\u91cf\u200b</p>"},{"location":"api/other/car_sales/#wisecon.car.car_history_sales.CarHistorySales","title":"CarHistorySales","text":"<pre><code>CarHistorySales(\n    data_type: Literal[\"\u200b\u6c7d\u8f66\u9500\u91cf\u200b\"] = \"\u200b\u6c7d\u8f66\u9500\u91cf\u200b\",\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u6c7d\u8f66\u200b\u5386\u53f2\u200b\u9500\u91cf\u200b</p> Notes <pre><code>data = CarHistorySales(data_type=\"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\",).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['\u200b\u6c7d\u8f66\u9500\u91cf\u200b']</code> <p>\u200b\u67e5\u8be2\u200b\u7c7b\u578b\u200b</p> <code>'\u200b\u6c7d\u8f66\u9500\u91cf\u200b'</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\car\\car_history_sales.py</code> <pre><code>def __init__(\n        self,\n        data_type: Literal[\"\u200b\u6c7d\u8f66\u9500\u91cf\u200b\"] = \"\u200b\u6c7d\u8f66\u9500\u91cf\u200b\",\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        data = CarHistorySales(data_type=\"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\",).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        data_type: \u200b\u67e5\u8be2\u200b\u7c7b\u578b\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.data_type = data_type\n    self.mapping = CarHistorySalesMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u6c7d\u8f66\u200b\u5386\u53f2\u200b\u9500\u91cf\u200b\", response_type=\"html\")\n    self.data_mark = self.params_data_mark()\n    self.params_multi_pages()\n</code></pre>"},{"location":"api/other/car_sales/#wisecon.car.current_sales.CurrentCarSalesMapping","title":"CurrentCarSalesMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u6c7d\u8f66\u200b\u5f53\u524d\u200b\u9500\u91cf\u200b\u6392\u884c\u699c\u200b</p>"},{"location":"api/other/car_sales/#wisecon.car.current_sales.CurrentCarSales","title":"CurrentCarSales","text":"<pre><code>CurrentCarSales(\n    data_type: Literal[\n        \"\u200b\u9500\u91cf\u200b\",\n        \"\u200b\u54c1\u724c\u200b\u9500\u91cf\u200b\",\n        \"\u200b\u5382\u5546\u200b\u9500\u91cf\u200b\",\n        \"\u200b\u8f66\u578b\u200b\u7ea7\u522b\u200b\",\n        \"\u200b\u8f66\u8eab\u200b\u7c7b\u522b\u200b\",\n        \"\u200b\u8f66\u578b\u200b\u9500\u91cf\u200b\",\n        \"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\",\n    ] = \"\u200b\u9500\u91cf\u200b\",\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u6c7d\u8f66\u200b\u5f53\u524d\u200b\u9500\u91cf\u200b\u6392\u884c\u699c\u200b</p> Notes <pre><code>data = CurrentCarSales(data_type=\"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\",).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['\u200b\u9500\u91cf\u200b', '\u200b\u54c1\u724c\u200b\u9500\u91cf\u200b', '\u200b\u5382\u5546\u200b\u9500\u91cf\u200b', '\u200b\u8f66\u578b\u200b\u7ea7\u522b\u200b', '\u200b\u8f66\u8eab\u200b\u7c7b\u522b\u200b', '\u200b\u8f66\u578b\u200b\u9500\u91cf\u200b', '\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b']</code> <p>\u200b\u67e5\u8be2\u200b\u7c7b\u578b\u200b</p> <code>'\u200b\u9500\u91cf\u200b'</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, %Y-%m</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, %Y-%m</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\car\\current_sales.py</code> <pre><code>def __init__(\n        self,\n        data_type: Literal[\"\u200b\u9500\u91cf\u200b\", \"\u200b\u54c1\u724c\u200b\u9500\u91cf\u200b\", \"\u200b\u5382\u5546\u200b\u9500\u91cf\u200b\", \"\u200b\u8f66\u578b\u200b\u7ea7\u522b\u200b\", \"\u200b\u8f66\u8eab\u200b\u7c7b\u522b\u200b\", \"\u200b\u8f66\u578b\u200b\u9500\u91cf\u200b\", \"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\"] = \"\u200b\u9500\u91cf\u200b\",\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        data = CurrentCarSales(data_type=\"\u200b\u7535\u52a8\u8f66\u200b\u9500\u91cf\u200b\",).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        data_type: \u200b\u67e5\u8be2\u200b\u7c7b\u578b\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, %Y-%m\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, %Y-%m\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.data_type = data_type\n    self.start_date = start_date\n    self.end_date = end_date\n    self.mapping = CurrentCarSalesMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u6c7d\u8f66\u200b\u5f53\u524d\u200b\u9500\u91cf\u200b\u6392\u884c\u699c\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date], _format=\"%Y-%m\")\n</code></pre>"},{"location":"api/other/movie/","title":"\u7535\u5f71\u7968\u623f\u200b\u6570\u636e","text":""},{"location":"api/other/movie/#wisecon.movie.movie.MovieMapping","title":"MovieMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5f53\u524d\u200b\u5b9e\u65f6\u200b\u7535\u5f71\u7968\u623f\u200b</p>"},{"location":"api/other/movie/#wisecon.movie.movie.Movie","title":"Movie","text":"<pre><code>Movie(\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u5b9e\u65f6\u200b\u7535\u5f71\u7968\u623f\u200b</p> Notes <pre><code>from wisecon.movie import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u5b9e\u65f6\u200b\u7535\u5f71\u7968\u623f\u200b\ndata = Movie().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\movie\\movie.py</code> <pre><code>def __init__(\n        self,\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False],\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.movie import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u5b9e\u65f6\u200b\u7535\u5f71\u7968\u623f\u200b\n        data = Movie().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = MovieMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u7535\u5f71\u7968\u623f\u200b\",\n    )\n</code></pre>"},{"location":"api/other/tv/","title":"\u7535\u89c6\u200b\u6536\u89c6\u7387","text":""},{"location":"api/other/tv/#wisecon.movie.tv.TVMapping","title":"TVMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b</p>"},{"location":"api/other/tv/#wisecon.movie.tv.TV","title":"TV","text":"<pre><code>TV(\n    source: Annotated[\n        Literal[\"\u200b\u592e\u89c6\u200b\", \"\u200b\u536b\u89c6\u200b\"], \"\", True\n    ] = \"\u200b\u592e\u89c6\u200b\",\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b</p> Notes <pre><code>from wisecon.movie import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u592e\u89c6\u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\ndata = TV(source=\"\u200b\u592e\u89c6\u200b\").load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200b \u200b\u536b\u89c6\u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\ndata = TV(source=\"\u200b\u536b\u89c6\u200b\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Annotated[Literal['\u200b\u592e\u89c6\u200b', '\u200b\u536b\u89c6\u200b'], '', True]</code> <p>\u200b\u592e\u89c6\u200b or \u200b\u536b\u89c6\u200b</p> <code>'\u200b\u592e\u89c6\u200b'</code> <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\movie\\tv.py</code> <pre><code>def __init__(\n        self,\n        source: Annotated[Literal[\"\u200b\u592e\u89c6\u200b\", \"\u200b\u536b\u89c6\u200b\"], \"\", True] = \"\u200b\u592e\u89c6\u200b\",\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False],\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.movie import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u592e\u89c6\u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\n        data = TV(source=\"\u200b\u592e\u89c6\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u536b\u89c6\u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\n        data = TV(source=\"\u200b\u536b\u89c6\u200b\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        source: \u200b\u592e\u89c6\u200b or \u200b\u536b\u89c6\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.source = source\n    self.mapping = TVMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(\n        response_type=\"json\",\n        description=\"\u200b\u5b9e\u65f6\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\",\n    )\n</code></pre>"},{"location":"api/other/tv/#wisecon.movie.tv.TV.types","title":"types","text":"<pre><code>types()\n</code></pre> Source code in <code>wisecon\\movie\\tv.py</code> <pre><code>def types(self):\n    \"\"\"\"\"\"\n    mapping = {\"\u200b\u592e\u89c6\u200b\": 0, \"\u200b\u536b\u89c6\u200b\": 1}\n    return mapping[self.source]\n</code></pre>"},{"location":"api/stock/analyst_rank/","title":"\u91d1\u878d\u200b\u7814\u7a76\u5458\u200b\u6307\u6570","text":""},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_index.AnalystIndexMapping","title":"AnalystIndexMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b</p>"},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_index.AnalystIndex","title":"AnalystIndex","text":"<pre><code>AnalystIndex(\n    analyst_code: Optional[str] = None,\n    size: Optional[int] = 100,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b</p> Notes <pre><code>from wisecon.stock.analyst import *\n\ndata = AnalystIndex(analyst_code=\"11000280036\").load()\nprint(data.to_markdown(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>analyst_code</code> <code>Optional[str]</code> <p>\u200b\u5206\u6790\u5e08\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>100</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\analyst\\analyst_index.py</code> <pre><code>def __init__(\n        self,\n        analyst_code: Optional[str] = None,\n        size: Optional[int] = 100,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.analyst import *\n\n        data = AnalystIndex(analyst_code=\"11000280036\").load()\n        print(data.to_markdown(chinese_column=True))\n        ```\n\n    Args:\n        analyst_code: \u200b\u5206\u6790\u5e08\u200b\u4ee3\u7801\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.analyst_code = analyst_code\n    self.size = size\n    self.mapping = AnalystIndexMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_stock.ResearcherStockMapping","title":"ResearcherStockMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5206\u6790\u5e08\u200b\u6301\u80a1\u200b</p>"},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_stock.ResearcherStock","title":"ResearcherStock","text":"<pre><code>ResearcherStock(\n    analyst_code: Optional[str] = None,\n    current: Optional[bool] = True,\n    size: Optional[int] = 100,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5206\u6790\u5e08\u200b\u6301\u80a1\u200b</p> Notes <pre><code>from wisecon.stock.analyst import *\n\n# \u200b\u67e5\u8be2\u200b\u5f53\u524d\u200b\u6570\u636e\u200b\ndata = ResearcherStock(analyst_code=\"11000280036\", current=True).load()\nprint(data.to_markdown(chinese_column=True))\n\n# \u200b\u67e5\u8be2\u200b\u5386\u53f2\u6570\u636e\u200b\ndata = ResearcherStock(analyst_code=\"11000280036\", current=False).load()\nprint(data.to_markdown(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>analyst_code</code> <code>Optional[str]</code> <p>\u200b\u5206\u6790\u5e08\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>current</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5f53\u524d\u200b\u6301\u80a1\u200b</p> <code>True</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>100</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\analyst\\analyst_stock.py</code> <pre><code>def __init__(\n        self,\n        analyst_code: Optional[str] = None,\n        current: Optional[bool] = True,\n        size: Optional[int] = 100,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.analyst import *\n\n        # \u200b\u67e5\u8be2\u200b\u5f53\u524d\u200b\u6570\u636e\u200b\n        data = ResearcherStock(analyst_code=\"11000280036\", current=True).load()\n        print(data.to_markdown(chinese_column=True))\n\n        # \u200b\u67e5\u8be2\u200b\u5386\u53f2\u6570\u636e\u200b\n        data = ResearcherStock(analyst_code=\"11000280036\", current=False).load()\n        print(data.to_markdown(chinese_column=True))\n        ```\n\n    Args:\n        analyst_code: \u200b\u5206\u6790\u5e08\u200b\u4ee3\u7801\u200b\n        current: \u200b\u662f\u5426\u200b\u5f53\u524d\u200b\u6301\u80a1\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.analyst_code = analyst_code\n    self.current = current\n    self.size = size\n    self.mapping = ResearcherStockMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5206\u6790\u5e08\u200b\u6301\u80a1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_year_rank.AnalystYearRankMapping","title":"AnalystYearRankMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b-\u200b\u5e74\u5ea6\u200b\u6392\u884c\u699c\u200b</p>"},{"location":"api/stock/analyst_rank/#wisecon.stock.analyst.analyst_year_rank.AnalystYearRank","title":"AnalystYearRank","text":"<pre><code>AnalystYearRank(\n    year: Optional[str] = None,\n    top_n: Optional[int] = None,\n    industry_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b-\u200b\u5e74\u5ea6\u200b\u6392\u884c\u699c\u200b</p> Notes <pre><code>from wisecon.stock.analyst import *\nfrom wisecon.stock.plate_mapping import *\n\n# \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b 2024 \u200b\u5e74\u5ea6\u200b\u6392\u884c\u699c\u200b\ndata = AnalystYearRank(year=\"2024\").load()\nprint(data.to_markdown(chinese_column=True))\n\n# \u200b\u6307\u5b9a\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\ndata = AnalystYearRank(year=\"2024\", industry_code=\"480000\").load()\nprint(data.to_markdown(chinese_column=True))\n\n# \u200b\u67e5\u8be2\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\ndata = IndustryCode().load()\nprint(data.to_markdown(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>Optional[str]</code> <p>\u200b\u5e74\u4efd\u200b</p> <code>None</code> <code>top_n</code> <code>Optional[int]</code> <p>\u200b\u6392\u540d\u200b</p> <code>None</code> <code>industry_code</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\analyst\\analyst_year_rank.py</code> <pre><code>def __init__(\n        self,\n        year: Optional[str] = None,\n        top_n: Optional[int] = None,\n        industry_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.analyst import *\n        from wisecon.stock.plate_mapping import *\n\n        # \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b 2024 \u200b\u5e74\u5ea6\u200b\u6392\u884c\u699c\u200b\n        data = AnalystYearRank(year=\"2024\").load()\n        print(data.to_markdown(chinese_column=True))\n\n        # \u200b\u6307\u5b9a\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\n        data = AnalystYearRank(year=\"2024\", industry_code=\"480000\").load()\n        print(data.to_markdown(chinese_column=True))\n\n        # \u200b\u67e5\u8be2\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\n        data = IndustryCode().load()\n        print(data.to_markdown(chinese_column=True))\n        ```\n\n    Args:\n        year: \u200b\u5e74\u4efd\u200b\n        top_n: \u200b\u6392\u540d\u200b\n        industry_code: \u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.year = year\n    self.top_n = top_n\n    self.industry_code = industry_code\n    self.size = size\n    self.mapping = AnalystYearRankMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5206\u6790\u5e08\u200b\u6307\u6570\u200b-\u200b\u5e74\u5ea6\u200b\u6392\u884c\u699c\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/capital_flow/","title":"\u8d44\u91d1\u6d41\u200b\u5206\u6790","text":""},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.minutes.CapitalFlowMinutesMapping","title":"CapitalFlowMinutesMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u5206\u949f\u200b\u7ea7\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.minutes.CapitalFlowMinutes","title":"CapitalFlowMinutes","text":"<pre><code>CapitalFlowMinutes(\n    market: Optional[TypeMarket] = None,\n    plate_code: Optional[str] = None,\n    security_code: Optional[str] = None,\n    size: Optional[int] = 0,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u5206\u949f\u200b\u7ea7\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b</p> <ol> <li>\u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u603b\u4f53\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b <code>\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b</code> \u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u6307\u5b9a\u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u4e0d\u540c\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u4e0b\u200b\u7684\u200b\u4e3b\u529b\u200b\u6d41\u5165\u200b\u6d41\u51fa\u200b\u6392\u540d\u200b</li> </ol> Notes <pre><code>\u200b\u6307\u6807\u200b\u5b9a\u4e49\u200b\n\u3000\u3000- \u200b\u8d85\u5927\u200b\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b50\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b100\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u5927\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b10\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b20\u200b\u4e07\u5143\u200b\u4e14\u200b\u5c0f\u4e8e\u200b50\u200b\u4e07\u80a1\u200b\u548c\u200b100\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u4e2d\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b2\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b4\u200b\u4e07\u5143\u200b\u4e14\u200b\u5c0f\u4e8e\u200b10\u200b\u4e07\u80a1\u200b\u548c\u200b20\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u5c0f\u5355\u200b\uff1a\u200b\u5c0f\u4e8e\u200b2\u200b\u4e07\u80a1\u200b\u548c\u200b4\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n</code></pre> Notes <pre><code>from wisecon.stock.capital_flow import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowMinutes(market=\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.1 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u6982\u5ff5\u200b)\ndata = CapitalFlowMinutes(plate_code=\"BK1044\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.2 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u5730\u533a\u200b)\ndata = CapitalFlowMinutes(plate_code=\"BK0158\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.3 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u884c\u4e1a\u200b)\ndata = CapitalFlowMinutes(plate_code=\"BK1044\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowMinutes(security_code=\"300750\", size=10).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[TypeMarket]</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u200bB\", \"\u200b\u6df1\u200bB\"]</code></p> <code>None</code> <code>plate_code</code> <code>Optional[str]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u5730\u533a\u200b\u677f\u5757\u200b\u3001\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b</p> <code>None</code> <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>0</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\capital_flow\\minutes.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[TypeMarket] = None,\n        plate_code: Optional[str] = None,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 0,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.capital_flow import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowMinutes(market=\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.1 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u6982\u5ff5\u200b)\n        data = CapitalFlowMinutes(plate_code=\"BK1044\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.2 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u5730\u533a\u200b)\n        data = CapitalFlowMinutes(plate_code=\"BK0158\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.3 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u884c\u4e1a\u200b)\n        data = CapitalFlowMinutes(plate_code=\"BK1044\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5206\u949f\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowMinutes(security_code=\"300750\", size=10).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u200bB\", \"\u200b\u6df1\u200bB\"]`\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u5730\u533a\u200b\u677f\u5757\u200b\u3001\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.plate_code = plate_code\n    self.security_code = security_code\n    self.size = size\n    self.mapping = CapitalFlowMinutesMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u5206\u949f\u200b\u7ea7\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\", )\n</code></pre>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.current.CapitalFlowCurrentMapping","title":"CapitalFlowCurrentMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5f53\u524d\u200b\u80a1\u7968\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.current.CapitalFlowCurrent","title":"CapitalFlowCurrent","text":"<pre><code>CapitalFlowCurrent(\n    market: Annotated[\n        Optional[TypeMarket], \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b, False\n    ] = None,\n    plate_code: Annotated[\n        Optional[Union[str, List[str]]], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    security_code: Annotated[\n        Optional[Union[str, List[str]]], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    size: Annotated[Optional[int], \u200b\u6570\u636e\u91cf\u200b\u5927\u5c0f\u200b, False] = 10,\n    verbose: Annotated[\n        Optional[bool], \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b, False\n    ] = False,\n    logger: Annotated[\n        Optional[Callable], \u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b, False\n    ] = None,\n    **kwargs: Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u80a1\u7968\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\u7edf\u8ba1\u200b\uff0c\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u540c\u6b65\u200b\u67e5\u8be2\u200b10\u200b\u6761\u200b\uff0c\u200b\u8d85\u8fc7\u200b10\u200b\u6761\u8bf7\u200b\u4f7f\u7528\u200b <code>StockFlow</code> \u200b\u65b9\u6cd5\u200b\u3002</p> <ol> <li>\u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u5177\u4f53\u200b\u80a1\u7968\u200b\u7684\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> </ol> <p>\u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u80a1\u7968\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\u7edf\u8ba1\u200b\uff0c\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u540c\u6b65\u200b\u67e5\u8be2\u200b10\u200b\u6761\u200b\uff0c\u200b\u8d85\u8fc7\u200b10\u200b\u6761\u8bf7\u200b\u4f7f\u7528\u200b <code>StockFlow</code> \u200b\u65b9\u6cd5\u200b\u3002</p> <ol> <li>\u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u5177\u4f53\u200b\u80a1\u7968\u200b\u7684\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> </ol> Notes <pre><code>from wisecon.stock.capital_flow import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowCurrent(security_code=\"300750\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowCurrent(plate_code=\"BK0477\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowCurrent(market=\"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", size=10).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Annotated[Optional[TypeMarket], \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b, False]</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b <code>[\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", \"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u5e02\u200bB\u200b\u80a1\u200b\", \"\u200b\u6df1\u5e02\u200bB\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>plate_code</code> <code>Annotated[Optional[Union[str, List[str]]], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b</p> <code>None</code> <code>security_code</code> <code>Annotated[Optional[Union[str, List[str]]], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Annotated[Optional[int], \u200b\u6570\u636e\u91cf\u200b\u5927\u5c0f\u200b, False]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>10</code> <code>verbose</code> <code>Annotated[Optional[bool], \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b, False]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], \u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b, False]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\capital_flow\\current.py</code> <pre><code>def __init__(\n        self,\n        market: Annotated[Optional[TypeMarket], \"\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b\", False] = None,\n        plate_code: Annotated[Optional[Union[str, List[str]]], \"\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b\", False] = None,\n        security_code: Annotated[Optional[Union[str, List[str]]], \"\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\", False] = None,\n        size: Annotated[Optional[int], \"\u200b\u6570\u636e\u91cf\u200b\u5927\u5c0f\u200b\", False] = 10,\n        verbose: Annotated[Optional[bool], \"\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\", False] = False,\n        logger: Annotated[Optional[Callable], \"\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\", False] = None,\n        **kwargs: Annotated[Any, \"\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\", False],\n):\n    \"\"\"\n    \u200b\u67e5\u8be2\u200b \u200b\u5f53\u524d\u200b\u80a1\u7968\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\u7edf\u8ba1\u200b\uff0c\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u540c\u6b65\u200b\u67e5\u8be2\u200b10\u200b\u6761\u200b\uff0c\u200b\u8d85\u8fc7\u200b10\u200b\u6761\u8bf7\u200b\u4f7f\u7528\u200b `StockFlow` \u200b\u65b9\u6cd5\u200b\u3002\n\n    1. \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b\n    2. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b\n    3. \u200b\u67e5\u8be2\u200b\u5177\u4f53\u200b\u80a1\u7968\u200b\u7684\u200b\u5f53\u524d\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b\n\n    Notes:\n        ```python\n        from wisecon.stock.capital_flow import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowCurrent(security_code=\"300750\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowCurrent(plate_code=\"BK0477\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5f53\u524d\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowCurrent(market=\"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", size=10).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b `[\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", \"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u5e02\u200bB\u200b\u80a1\u200b\", \"\u200b\u6df1\u5e02\u200bB\u200b\u80a1\u200b\"]`\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.plate_code = plate_code\n    self.security_code = security_code\n    self.size = size\n    self.mapping = CapitalFlowCurrentMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5f53\u524d\u200b\u80a1\u7968\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\u7edf\u8ba1\u200b\", )\n    self.validate_max_security_codes(security_code=security_code)\n</code></pre>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.history.CapitalFlowHistoryMapping","title":"CapitalFlowHistoryMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u5386\u53f2\u6570\u636e\u200b(\u200b\u5927\u76d8\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b/\u200b\u677f\u5757\u200b\u5386\u53f2\u6570\u636e\u200b)</p>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.history.CapitalFlowHistory","title":"CapitalFlowHistory","text":"<pre><code>CapitalFlowHistory(\n    market: Optional[TypeMarket] = None,\n    plate_code: Optional[str] = None,\n    security_code: Optional[str] = None,\n    size: Optional[int] = 0,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u5386\u53f2\u6570\u636e\u200b(\u200b\u5927\u76d8\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b/\u200b\u677f\u5757\u200b\u5386\u53f2\u6570\u636e\u200b)</p> <ol> <li>\u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\u5e02\u573a\u200b\u5386\u53f2\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u5386\u53f2\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u5177\u4f53\u200b\u80a1\u7968\u200b\u7684\u200b\u5386\u53f2\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b\u6570\u636e\u200b</li> </ol> Notes <pre><code>from wisecon.stock.capital_flow import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowHistory(market=\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.1 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u6982\u5ff5\u200b)\ndata = CapitalFlowHistory(plate_code=\"BK1044\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.2 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u5730\u533a\u200b)\ndata = CapitalFlowHistory(plate_code=\"BK0158\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 2.3 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u884c\u4e1a\u200b)\ndata = CapitalFlowHistory(plate_code=\"BK1044\", size=10).load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\ndata = CapitalFlowHistory(security_code=\"300750\", size=10).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[TypeMarket]</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u200bB\", \"\u200b\u6df1\u200bB\"]</code></p> <code>None</code> <code>plate_code</code> <code>Optional[str]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u5730\u533a\u200b\u677f\u5757\u200b\u3001\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b</p> <code>None</code> <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>0</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\capital_flow\\history.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[TypeMarket] = None,\n        plate_code: Optional[str] = None,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 0,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.capital_flow import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowHistory(market=\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.1 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u6982\u5ff5\u200b)\n        data = CapitalFlowHistory(plate_code=\"BK1044\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.2 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u5730\u533a\u200b)\n        data = CapitalFlowHistory(plate_code=\"BK0158\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 2.3 \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b(\u200b\u884c\u4e1a\u200b)\n        data = CapitalFlowHistory(plate_code=\"BK1044\", size=10).load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b\u8d44\u91d1\u200b\u5386\u53f2\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\n        data = CapitalFlowHistory(security_code=\"300750\", size=10).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u200bB\", \"\u200b\u6df1\u200bB\"]`\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u5730\u533a\u200b\u677f\u5757\u200b\u3001\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.plate_code = plate_code\n    self.security_code = security_code\n    self.size = size\n    self.mapping = CapitalFlowHistoryMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u5386\u53f2\u6570\u636e\u200b(\u200b\u5927\u76d8\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b/\u200b\u677f\u5757\u200b\u5386\u53f2\u6570\u636e\u200b)\", )\n</code></pre>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.plate.PlateFlowMapping","title":"PlateFlowMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/capital_flow/#wisecon.stock.capital_flow.plate.PlateFlow","title":"PlateFlow","text":"<pre><code>PlateFlow(\n    market: Optional[TypeMarket] = None,\n    plate_type: Optional[\n        Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]\n    ] = None,\n    plate_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    sort_by: Optional[str] = None,\n    ascending: Optional[bool] = False,\n    days: Optional[Literal[1, 3, 5, 10]] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b</p> <ol> <li>\u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u603b\u4f53\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\uff1b\u200b\u8fd4\u56de\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\u5f53\u524d\u200b<code>1/3/5/10</code>\u200b\u5929\u200b\u7684\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b <code>\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b</code> \u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\uff1b\u200b\u8fd4\u56de\u200b\u5168\u90e8\u200b\u677f\u5757\u200b\u4e0b\u200b\u80a1\u7968\u200b\u5f53\u524d\u200b<code>1/3/5/10</code>\u200b\u5929\u200b\u7684\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u6307\u5b9a\u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\uff1b\u200b\u8fd4\u56de\u200b\u5177\u4f53\u200b\u677f\u5757\u200b\u4e0b\u200b\u80a1\u7968\u200b\u5f53\u524d\u200b<code>1/3/5/10</code>\u200b\u5929\u200b\u7684\u200b\u8d44\u91d1\u200b\u52a8\u5411\u200b</li> <li>\u200b\u67e5\u8be2\u200b\u4e0d\u540c\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\u4e0b\u200b\u7684\u200b\u4e3b\u529b\u200b\u6d41\u5165\u200b\u6d41\u51fa\u200b\u6392\u540d\u200b</li> </ol> Notes <pre><code>\u200b\u6307\u6807\u200b\u5b9a\u4e49\u200b\n\u3000\u3000- \u200b\u8d85\u5927\u200b\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b50\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b100\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u5927\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b10\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b20\u200b\u4e07\u5143\u200b\u4e14\u200b\u5c0f\u4e8e\u200b50\u200b\u4e07\u80a1\u200b\u548c\u200b100\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u4e2d\u5355\u200b\uff1a\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b2\u200b\u4e07\u80a1\u200b\u6216\u8005\u200b4\u200b\u4e07\u5143\u200b\u4e14\u200b\u5c0f\u4e8e\u200b10\u200b\u4e07\u80a1\u200b\u548c\u200b20\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u5c0f\u5355\u200b\uff1a\u200b\u5c0f\u4e8e\u200b2\u200b\u4e07\u80a1\u200b\u548c\u200b4\u200b\u4e07\u5143\u200b\u7684\u200b\u6210\u4ea4\u200b\u5355\u200b;\n\u3000\u3000- \u200b\u6d41\u5165\u200b\uff1a\u200b\u4e70\u5165\u200b\u6210\u4ea4\u989d\u200b;\n\u3000\u3000- \u200b\u6d41\u51fa\u200b\uff1a\u200b\u5356\u51fa\u200b\u6210\u4ea4\u989d\u200b;\n\u3000\u3000- \u200b\u4e3b\u529b\u200b\u6d41\u5165\u200b\uff1a\u200b\u8d85\u5927\u200b\u5355\u200b\u52a0\u5927\u200b\u5355\u200b\u4e70\u5165\u200b\u6210\u4ea4\u989d\u200b\u4e4b\u200b\u548c\u200b;\n\u3000\u3000- \u200b\u4e3b\u529b\u200b\u6d41\u51fa\u200b\uff1a\u200b\u8d85\u5927\u200b\u5355\u200b\u52a0\u5927\u200b\u5355\u200b\u5356\u51fa\u200b\u6210\u4ea4\u989d\u200b\u4e4b\u200b\u548c\u200b;\n\u3000\u3000- \u200b\u51c0\u989d\u200b\uff1a\u200b\u6d41\u5165\u200b-\u200b\u6d41\u51fa\u200b;\n\u3000\u3000- \u200b\u51c0\u6bd4\u200b\uff1a(\u200b\u6d41\u5165\u200b-\u200b\u6d41\u51fa\u200b)/\u200b\u603b\u200b\u6210\u4ea4\u989d\u200b;\n\u3000\u3000- 5\u200b\u65e5\u200b\u6392\u540d\u200b\uff1a5\u200b\u65e5\u200b\u4e3b\u529b\u200b\u51c0\u200b\u5360\u200b\u6bd4\u200b\u6392\u540d\u200b\uff08\u200b\u6307\u200b\u5927\u76d8\u200b\u8fde\u7eed\u200b\u4ea4\u6613\u200b\u7684\u200b5\u200b\u65e5\u200b);\n\u3000\u3000- 5\u200b\u65e5\u200b\u6da8\u8dcc\u200b\uff1a\u200b\u6700\u8fd1\u200b5\u200b\u65e5\u200b\u6da8\u8dcc\u5e45\u200b\uff08\u200b\u6307\u200b\u5927\u76d8\u200b\u8fde\u7eed\u200b\u4ea4\u6613\u200b\u7684\u200b5\u200b\u65e5\u200b);\n\u3000\u3000- 10\u200b\u65e5\u200b\u6392\u540d\u200b\uff1a10\u200b\u65e5\u200b\u4e3b\u529b\u200b\u51c0\u200b\u5360\u200b\u6bd4\u200b\u6392\u540d\u200b\uff08\u200b\u6307\u200b\u5927\u76d8\u200b\u8fde\u7eed\u200b\u4ea4\u6613\u200b\u7684\u200b10\u200b\u65e5\u200b);\n\u3000\u3000- 10\u200b\u65e5\u200b\u6da8\u8dcc\u200b\uff1a\u200b\u6700\u8fd1\u200b10\u200b\u65e5\u200b\u6da8\u8dcc\u5e45\u200b\uff08\u200b\u6307\u200b\u5927\u76d8\u200b\u8fde\u7eed\u200b\u4ea4\u6613\u200b\u7684\u200b10\u200b\u65e5\u200b);\n</code></pre> Notes <pre><code>from wisecon.stock.capital_flow import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u603b\u4f53\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\ndata = PlateFlow(market=\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b `\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b` \u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\ndata = PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u6307\u5b9a\u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\n# 3.1 \u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\ndata = PlateFlow(plate_code=\"BK1027\", days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 3.1 \u200b\u5730\u533a\u200b\u677f\u5757\u200b\ndata = PlateFlow(plate_code=\"BK0158\", days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 3.1 \u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\ndata = PlateFlow(plate_code=\"BK1044\", days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 4. \u200b\u4e3b\u529b\u200b\u6392\u540d\u200b\ndata = PlateFlow(market=\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", sort_by=\"f184\").load()\ndata.to_frame(chinese_column=True)\n\n# 4.1 \u200b\u4e3b\u529b\u200b\u6d41\u5165\u200b\u6392\u540d\u200b\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1, sort_by=\"f62\")\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=3, sort_by=\"f267\")\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=5, sort_by=\"f164\")\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=10, sort_by=\"f174\")\n\n# 4.2 \u200b\u4e3b\u529b\u200b\u6d41\u51fa\u200b\u6392\u540d\u200b\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1, sort_by=\"f62\", ascending=True)\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=3, sort_by=\"f267\", ascending=True)\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=5, sort_by=\"f164\", ascending=True)\nPlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=10, sort_by=\"f174\", ascending=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[TypeMarket]</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b <code>[\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", \"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u5e02\u200bB\u200b\u80a1\u200b\", \"\u200b\u6df1\u5e02\u200bB\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>plate_type</code> <code>Optional[Literal['\u200b\u884c\u4e1a\u200b', '\u200b\u6982\u5ff5\u200b', '\u200b\u5730\u533a\u200b']]</code> <p>\u200b\u677f\u5757\u200b\u7c7b\u578b\u200b, <code>[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]</code></p> <code>None</code> <code>plate_code</code> <code>Optional[str]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\u7b49\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>days</code> <code>Optional[Literal[1, 3, 5, 10]]</code> <p>\u200b\u7edf\u8ba1\u200b\u5929\u6570\u200b <code>1, 3, 5, 10</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>50</code> <code>sort_by</code> <code>Optional[str]</code> <p>\u200b\u6392\u5e8f\u200b\u5b57\u6bb5\u540d\u200b\u79f0\u200b, \u200b\u53ef\u200b\u901a\u8fc7\u200b <code>PlateFlowMapping</code> \u200b\u67e5\u8be2\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\capital_flow\\plate.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[TypeMarket] = None,\n        plate_type: Optional[Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]] = None,\n        plate_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        sort_by: Optional[str] = None,\n        ascending: Optional[bool] = False,\n        days: Optional[Literal[1, 3, 5, 10]] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.capital_flow import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u5e02\u573a\u200b\u603b\u4f53\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\n        data = PlateFlow(market=\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b `\u200b\u884c\u4e1a\u200b\u3001\u200b\u5730\u533a\u200b\u3001\u200b\u6982\u5ff5\u200b` \u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\n        data = PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u6307\u5b9a\u200b\u677f\u5757\u200b\u8d44\u91d1\u200b\u6d41\u91cf\u200b\n        # 3.1 \u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\n        data = PlateFlow(plate_code=\"BK1027\", days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 3.1 \u200b\u5730\u533a\u200b\u677f\u5757\u200b\n        data = PlateFlow(plate_code=\"BK0158\", days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 3.1 \u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\n        data = PlateFlow(plate_code=\"BK1044\", days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 4. \u200b\u4e3b\u529b\u200b\u6392\u540d\u200b\n        data = PlateFlow(market=\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", sort_by=\"f184\").load()\n        data.to_frame(chinese_column=True)\n\n        # 4.1 \u200b\u4e3b\u529b\u200b\u6d41\u5165\u200b\u6392\u540d\u200b\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1, sort_by=\"f62\")\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=3, sort_by=\"f267\")\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=5, sort_by=\"f164\")\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=10, sort_by=\"f174\")\n\n        # 4.2 \u200b\u4e3b\u529b\u200b\u6d41\u51fa\u200b\u6392\u540d\u200b\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=1, sort_by=\"f62\", ascending=True)\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=3, sort_by=\"f267\", ascending=True)\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=5, sort_by=\"f164\", ascending=True)\n        PlateFlow(plate_type=\"\u200b\u884c\u4e1a\u200b\", days=10, sort_by=\"f174\", ascending=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b `[\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", \"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6caa\u5e02\u200bB\u200b\u80a1\u200b\", \"\u200b\u6df1\u5e02\u200bB\u200b\u80a1\u200b\"]`\n        plate_type: \u200b\u677f\u5757\u200b\u7c7b\u578b\u200b, `[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]`\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, \u200b\u652f\u6301\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\u7b49\u200b\u4ee3\u7801\u200b\n        days: \u200b\u7edf\u8ba1\u200b\u5929\u6570\u200b `1, 3, 5, 10`\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        sort_by: \u200b\u6392\u5e8f\u200b\u5b57\u6bb5\u540d\u200b\u79f0\u200b, \u200b\u53ef\u200b\u901a\u8fc7\u200b `PlateFlowMapping` \u200b\u67e5\u8be2\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.plate_type = plate_type\n    self.plate_code = plate_code\n    self.size = size\n    self.sort_by = sort_by\n    self.ascending = ascending\n    self.days = days\n    self.mapping = PlateFlowMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5e02\u573a\u200b\u3001\u200b\u677f\u5757\u200b\uff08\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\uff09\u200b\u8d44\u91d1\u200b\u6d41\u5411\u200b\u6570\u636e\u200b\", )\n</code></pre>"},{"location":"api/stock/constituent_stock/","title":"\u6210\u5206\u80a1\u200b\u4e0e\u200b\u5e02\u573a\u884c\u60c5","text":""},{"location":"api/stock/constituent_stock/#wisecon.stock.index.index.IndexStockMapping","title":"IndexStockMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u6307\u6570\u200b\u6210\u5206\u80a1\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/constituent_stock/#wisecon.stock.index.index.IndexStock","title":"IndexStock","text":"<pre><code>IndexStock(\n    index_name: Optional[\n        Literal[\"\u200b\u6caa\u200b\u6df1\u200b300\", \"\u200b\u4e0a\u8bc1\u200b50\", \"\u200b\u4e2d\u8bc1\u200b500\", \"\u200b\u79d1\u521b\u200b50\"]\n    ] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u6307\u6570\u200b\u6210\u5206\u80a1\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.index import *\n\ndata = IndexStock(index_name=\"\u200b\u6caa\u200b\u6df1\u200b300\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>index_name</code> <code>Optional[Literal['\u200b\u6caa\u200b\u6df1\u200b300', '\u200b\u4e0a\u8bc1\u200b50', '\u200b\u4e2d\u8bc1\u200b500', '\u200b\u79d1\u521b\u200b50']]</code> <p>\u200b\u6307\u6570\u200b\u540d\u79f0\u200b<code>[\"\u200b\u6caa\u200b\u6df1\u200b300\", \"\u200b\u4e0a\u8bc1\u200b50\", \"\u200b\u4e2d\u8bc1\u200b500\", \"\u200b\u79d1\u521b\u200b50\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\index\\index.py</code> <pre><code>def __init__(\n        self,\n        index_name: Optional[Literal[\"\u200b\u6caa\u200b\u6df1\u200b300\", \"\u200b\u4e0a\u8bc1\u200b50\", \"\u200b\u4e2d\u8bc1\u200b500\", \"\u200b\u79d1\u521b\u200b50\"]] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.index import *\n\n        data = IndexStock(index_name=\"\u200b\u6caa\u200b\u6df1\u200b300\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        index_name: \u200b\u6307\u6570\u200b\u540d\u79f0\u200b`[\"\u200b\u6caa\u200b\u6df1\u200b300\", \"\u200b\u4e0a\u8bc1\u200b50\", \"\u200b\u4e2d\u8bc1\u200b500\", \"\u200b\u79d1\u521b\u200b50\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.index_name = index_name\n    self.size = size\n    self.mapping = IndexStockMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u6307\u6570\u200b\u6210\u5206\u80a1\u200b\u6570\u636e\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/constituent_stock/#wisecon.stock.market.market.CurrentMarketMapping","title":"CurrentMarketMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b <code>ETF/LOF/Stock</code>\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b</p>"},{"location":"api/stock/constituent_stock/#wisecon.stock.market.market.CurrentMarket","title":"CurrentMarket","text":"<pre><code>CurrentMarket(\n    market: TypeMarket = \"ETF\",\n    sort_by: Optional[str] = \"f3\",\n    page_size: Optional[int] = 20,\n    page_number: Optional[int] = 1,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b <code>ETF/LOF/Stock</code>\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b</p> Notes <pre><code>from wisecon.stock.market import *\n\n# \u200b\u67e5\u8be2\u200bETF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"ETF\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200bLOF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"LOF\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>TypeMarket</code> <p>\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b: <code>[     \"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",     \"\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\",     \"\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\",     \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u521b\u4e1a\u677f\u200b\",     \"\u200b\u5317\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u65b0\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6caa\u200b\u80a1\u901a\u200b\", \"\u200b\u6df1\u80a1\u901a\u200b\", \"B\u200b\u80a1\u200b\",     \"\u200b\u4e0a\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\", \"\u200b\u6df1\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\",     \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SH)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SZ)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u79d1\u521b\u200b)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u521b\u4e1a\u200b)\", \"\u200b\u4e24\u7f51\u200b\u53ca\u200b\u9000\u5e02\u200b\",     \"ETF\", \"LOF\", \"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\", ]</code></p> <code>'ETF'</code> <code>sort_by</code> <code>Optional[str]</code> <p>\u200b\u6392\u5e8f\u200b\u5b57\u200b\u6bb5\u200b</p> <code>'f3'</code> <code>page_size</code> <code>Optional[int]</code> <p>\u200b\u6bcf\u9875\u200b\u6570\u636e\u91cf\u200b</p> <code>20</code> <code>page_number</code> <code>Optional[int]</code> <p>\u200b\u9875\u7801\u200b</p> <code>1</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\market\\market.py</code> <pre><code>def __init__(\n        self,\n        market: TypeMarket = \"ETF\",\n        sort_by: Optional[str] = \"f3\",\n        page_size: Optional[int] = 20,\n        page_number: Optional[int] = 1,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.market import *\n\n        # \u200b\u67e5\u8be2\u200bETF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"ETF\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200bLOF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"LOF\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b: ```\n            [\n                \"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u521b\u4e1a\u677f\u200b\",\n                \"\u200b\u5317\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u65b0\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6caa\u200b\u80a1\u901a\u200b\", \"\u200b\u6df1\u80a1\u901a\u200b\", \"B\u200b\u80a1\u200b\",\n                \"\u200b\u4e0a\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\", \"\u200b\u6df1\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\",\n                \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SH)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SZ)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u79d1\u521b\u200b)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u521b\u4e1a\u200b)\", \"\u200b\u4e24\u7f51\u200b\u53ca\u200b\u9000\u5e02\u200b\",\n                \"ETF\", \"LOF\", \"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",\n            ]```\n        sort_by: \u200b\u6392\u5e8f\u200b\u5b57\u200b\u6bb5\u200b\n        page_size: \u200b\u6bcf\u9875\u200b\u6570\u636e\u91cf\u200b\n        page_number: \u200b\u9875\u7801\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.sort_by = sort_by\n    self.page_size = page_size\n    self.page_number = page_number\n    self.mapping = CurrentMarketMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"`ETF/LOF/Stock`\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b\")\n</code></pre>"},{"location":"api/stock/etf/","title":"ETF\u200b\u884c\u60c5","text":""},{"location":"api/stock/etf/#wisecon.stock.market.market.CurrentMarketMapping","title":"CurrentMarketMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b <code>ETF/LOF/Stock</code>\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b</p>"},{"location":"api/stock/etf/#wisecon.stock.market.market.CurrentMarket","title":"CurrentMarket","text":"<pre><code>CurrentMarket(\n    market: TypeMarket = \"ETF\",\n    sort_by: Optional[str] = \"f3\",\n    page_size: Optional[int] = 20,\n    page_number: Optional[int] = 1,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b <code>ETF/LOF/Stock</code>\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b</p> Notes <pre><code>from wisecon.stock.market import *\n\n# \u200b\u67e5\u8be2\u200bETF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"ETF\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200bLOF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"LOF\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",).load()\ndata.to_frame(chinese_column=True)\n\n# \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\ndata = CurrentMarket(market=\"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>TypeMarket</code> <p>\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b: <code>[     \"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",     \"\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\",     \"\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\",     \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u521b\u4e1a\u677f\u200b\",     \"\u200b\u5317\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u65b0\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6caa\u200b\u80a1\u901a\u200b\", \"\u200b\u6df1\u80a1\u901a\u200b\", \"B\u200b\u80a1\u200b\",     \"\u200b\u4e0a\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\", \"\u200b\u6df1\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\",     \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SH)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SZ)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u79d1\u521b\u200b)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u521b\u4e1a\u200b)\", \"\u200b\u4e24\u7f51\u200b\u53ca\u200b\u9000\u5e02\u200b\",     \"ETF\", \"LOF\", \"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\", ]</code></p> <code>'ETF'</code> <code>sort_by</code> <code>Optional[str]</code> <p>\u200b\u6392\u5e8f\u200b\u5b57\u200b\u6bb5\u200b</p> <code>'f3'</code> <code>page_size</code> <code>Optional[int]</code> <p>\u200b\u6bcf\u9875\u200b\u6570\u636e\u91cf\u200b</p> <code>20</code> <code>page_number</code> <code>Optional[int]</code> <p>\u200b\u9875\u7801\u200b</p> <code>1</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\market\\market.py</code> <pre><code>def __init__(\n        self,\n        market: TypeMarket = \"ETF\",\n        sort_by: Optional[str] = \"f3\",\n        page_size: Optional[int] = 20,\n        page_number: Optional[int] = 1,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.market import *\n\n        # \u200b\u67e5\u8be2\u200bETF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"ETF\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200bLOF\u200b\u5e02\u573a\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"LOF\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",).load()\n        data.to_frame(chinese_column=True)\n\n        # \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\u5f53\u524d\u200b\u884c\u60c5\u200b\n        data = CurrentMarket(market=\"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b: ```\n            [\n                \"\u200b\u6caa\u200b\u6df1\u4eac\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u4e0a\u8bc1\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u6df1\u8bc1\u200bA\u200b\u80a1\u200b\",\n                \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6ce8\u518c\u200b\u5236\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u6838\u51c6\u5236\u200b\u521b\u4e1a\u677f\u200b\",\n                \"\u200b\u5317\u8bc1\u200bA\u200b\u80a1\u200b\", \"\u200b\u65b0\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6caa\u200b\u80a1\u901a\u200b\", \"\u200b\u6df1\u80a1\u901a\u200b\", \"B\u200b\u80a1\u200b\",\n                \"\u200b\u4e0a\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\", \"\u200b\u6df1\u8bc1\u200bAB\u200b\u80a1\u200b\u6bd4\u4ef7\u200b\",\n                \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SH)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(SZ)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u79d1\u521b\u200b)\", \"\u200b\u98ce\u9669\u200b\u8b66\u793a\u200b\u677f\u200b(\u200b\u521b\u4e1a\u200b)\", \"\u200b\u4e24\u7f51\u200b\u53ca\u200b\u9000\u5e02\u200b\",\n                \"ETF\", \"LOF\", \"\u200b\u5c01\u95ed\u200b\u57fa\u91d1\u200b\",\n            ]```\n        sort_by: \u200b\u6392\u5e8f\u200b\u5b57\u200b\u6bb5\u200b\n        page_size: \u200b\u6bcf\u9875\u200b\u6570\u636e\u91cf\u200b\n        page_number: \u200b\u9875\u7801\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.sort_by = sort_by\n    self.page_size = page_size\n    self.page_number = page_number\n    self.mapping = CurrentMarketMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"`ETF/LOF/Stock`\u200b\u5f53\u524d\u200b\u5e02\u573a\u884c\u60c5\u200b\")\n</code></pre>"},{"location":"api/stock/etf/#wisecon.stock.etf.history_gold.ETFGoldHistoryMapping","title":"ETFGoldHistoryMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u767d\u94f6\u200b/\u200b\u9ec4\u91d1\u200bETF\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b</p>"},{"location":"api/stock/etf/#wisecon.stock.etf.history_gold.ETFGoldHistory","title":"ETFGoldHistory","text":"<pre><code>ETFGoldHistory(\n    market: Annotated[\n        Literal[\"ETF\u200b\u767d\u94f6\u200b\", \"ETF\u200b\u9ec4\u91d1\u200b\"],\n        \"\u200b\u53ea\u80fd\u200b\u6307\u5b9a\u200b['ETF\u200b\u767d\u94f6\u200b', 'ETF\u200b\u9ec4\u91d1\u200b']\u200b\u4e24\u4e2a\u200b\u5e02\u573a\u200b\",\n        False,\n    ] = \"ETF\u200b\u9ec4\u91d1\u200b\",\n    start_date: Annotated[Optional[str], \"\", False] = None,\n    end_date: Annotated[Optional[str], \"\", False] = None,\n    date: Annotated[Optional[str], \"\", False] = None,\n    size: Annotated[Optional[int], \"\", False] = 100,\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u767d\u94f6\u200b/\u200b\u9ec4\u91d1\u200bETF\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b</p> Notes <pre><code>from wisecon.stock.etf import *\n\n# 1. \u200b\u67e5\u8be2\u200b ETF\u200b\u767d\u94f6\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b\ndata = ETFGoldHistory(market=\"ETF\u200b\u767d\u94f6\u200b\").load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b ETF\u200b\u9ec4\u91d1\u200b\u67d0\u65f6\u70b9\u200b\ndata = ETFGoldHistory(market=\"ETF\u200b\u9ec4\u91d1\u200b\", date=\"2024-10-25\").load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b ETF\u200b\u9ec4\u91d1\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b\uff0c\u200b\u5e76\u200b\u6307\u5b9a\u200b\u67e5\u8be2\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\ndata = ETFGoldHistory(market=\"ETF\u200b\u9ec4\u91d1\u200b\", start_date=\"2024-10-25\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Annotated[Literal['ETF\u200b\u767d\u94f6\u200b', 'ETF\u200b\u9ec4\u91d1\u200b'], \"\u200b\u53ea\u80fd\u200b\u6307\u5b9a\u200b['ETF\u200b\u767d\u94f6\u200b', 'ETF\u200b\u9ec4\u91d1\u200b']\u200b\u4e24\u4e2a\u200b\u5e02\u573a\u200b\", False]</code> <p>\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b</p> <code>'ETF\u200b\u9ec4\u91d1\u200b'</code> <code>start_date</code> <code>Annotated[Optional[str], '', False]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Annotated[Optional[str], '', False]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Annotated[Optional[str], '', False]</code> <p>\u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Annotated[Optional[int], '', False]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>100</code> <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\etf\\history_gold.py</code> <pre><code>def __init__(\n        self,\n        market: Annotated[Literal[\"ETF\u200b\u767d\u94f6\u200b\", \"ETF\u200b\u9ec4\u91d1\u200b\"], \"\u200b\u53ea\u80fd\u200b\u6307\u5b9a\u200b['ETF\u200b\u767d\u94f6\u200b', 'ETF\u200b\u9ec4\u91d1\u200b']\u200b\u4e24\u4e2a\u200b\u5e02\u573a\u200b\", False] = \"ETF\u200b\u9ec4\u91d1\u200b\",\n        start_date: Annotated[Optional[str], \"\", False] = None,\n        end_date: Annotated[Optional[str], \"\", False] = None,\n        date: Annotated[Optional[str], \"\", False] = None,\n        size: Annotated[Optional[int], \"\", False] = 100,\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False]\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.etf import *\n\n        # 1. \u200b\u67e5\u8be2\u200b ETF\u200b\u767d\u94f6\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b\n        data = ETFGoldHistory(market=\"ETF\u200b\u767d\u94f6\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b ETF\u200b\u9ec4\u91d1\u200b\u67d0\u65f6\u70b9\u200b\n        data = ETFGoldHistory(market=\"ETF\u200b\u9ec4\u91d1\u200b\", date=\"2024-10-25\").load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b ETF\u200b\u9ec4\u91d1\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b\uff0c\u200b\u5e76\u200b\u6307\u5b9a\u200b\u67e5\u8be2\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        data = ETFGoldHistory(market=\"ETF\u200b\u9ec4\u91d1\u200b\", start_date=\"2024-10-25\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = ETFGoldHistoryMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u767d\u94f6\u200b/\u200b\u9ec4\u91d1\u200bETF\u200b\u5386\u53f2\u200b\u884c\u60c5\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date, date])\n</code></pre>"},{"location":"api/stock/financial/","title":"\u4e0a\u5e02\u516c\u53f8\u200b\u8d22\u52a1\u62a5\u8868","text":""},{"location":"api/stock/financial/#wisecon.stock.financial.balance.StockBalanceMapping","title":"StockBalanceMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u8d44\u4ea7\u8d1f\u503a\u200b\u62a5\u8868\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.balance.StockBalance","title":"StockBalance","text":"<pre><code>StockBalance(\n    security_code: Annotated[\n        Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    market: Annotated[\n        Optional[TypeMarket],\n        '\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: [\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]',\n        False,\n    ] = None,\n    industry_name: Annotated[\n        Optional[str], \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b, False\n    ] = None,\n    size: Annotated[Optional[int], \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b, False] = 50,\n    start_date: Annotated[\n        Optional[str], \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, False\n    ] = None,\n    end_date: Annotated[Optional[str], \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, False] = None,\n    date: Annotated[\n        Optional[str], \"\u200b\u65e5\u671f\u200b: \u200b\u4e00\u822c\u200b\u662f\u200b\u5b63\u5ea6\u672b\u200b\u65e5\u671f\u200b\", False\n    ] = None,\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u8d44\u4ea7\u8d1f\u503a\u200b\u62a5\u8868\u200b</p> Notes <pre><code>from wisecon.stock.financial import StockBalance\n\n# \u200b\u67e5\u8be2\u200b\u7b2c\u4e09\u5b63\u5ea6\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u8d44\u4ea7\u200b\u8d1f\u503a\u8868\u200b\u6570\u636e\u200b\ndata = StockBalance(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Annotated[Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>market</code> <code>Annotated[Optional[TypeMarket], '\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: [\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]', False]</code> <p>\u200b\u5e02\u573a\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>industry_name</code> <code>Annotated[Optional[str], \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b, False]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Annotated[Optional[int], \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b, False]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Annotated[Optional[str], \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, False]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Annotated[Optional[str], \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, False]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Annotated[Optional[str], '\u200b\u65e5\u671f\u200b: \u200b\u4e00\u822c\u200b\u662f\u200b\u5b63\u5ea6\u672b\u200b\u65e5\u671f\u200b', False]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\balance.py</code> <pre><code>def __init__(\n        self,\n        security_code: Annotated[Optional[str], \"\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\", False] = None,\n        market: Annotated[Optional[TypeMarket], '\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: [\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]', False] = None,\n        industry_name: Annotated[Optional[str], \"\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\", False] = None,\n        size: Annotated[Optional[int], \"\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\", False] = 50,\n        start_date: Annotated[Optional[str], \"\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\", False] = None,\n        end_date: Annotated[Optional[str], \"\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\", False] = None,\n        date: Annotated[Optional[str], \"\u200b\u65e5\u671f\u200b: \u200b\u4e00\u822c\u200b\u662f\u200b\u5b63\u5ea6\u672b\u200b\u65e5\u671f\u200b\", False] = None,\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False]\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import StockBalance\n\n        # \u200b\u67e5\u8be2\u200b\u7b2c\u4e09\u5b63\u5ea6\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u8d44\u4ea7\u200b\u8d1f\u503a\u8868\u200b\u6570\u636e\u200b\n        data = StockBalance(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        market: \u200b\u5e02\u573a\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]`\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.market = market\n    self.industry_name = industry_name\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = StockBalanceMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u8d44\u4ea7\u8d1f\u503a\u200b\u62a5\u8868\u200b\")\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.cash.StockCashFlowMapping","title":"StockCashFlowMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u73b0\u91d1\u6d41\u91cf\u200b\u62a5\u8868\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.cash.StockCashFlow","title":"StockCashFlow","text":"<pre><code>StockCashFlow(\n    security_code: Optional[str] = None,\n    market: Optional[TypeMarket] = None,\n    industry_name: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u73b0\u91d1\u6d41\u91cf\u200b\u62a5\u8868\u200b</p> Notes <pre><code>from wisecon.stock.financial import StockCashFlow\n\ndata = StockCashFlow(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>market</code> <code>Optional[TypeMarket]</code> <p>\u200b\u5e02\u573a\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>industry_name</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\cash.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        market: Optional[TypeMarket] = None,\n        industry_name: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import StockCashFlow\n\n        data = StockCashFlow(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        market: \u200b\u5e02\u573a\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]`\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.market = market\n    self.industry_name = industry_name\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = StockCashFlowMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u73b0\u91d1\u6d41\u91cf\u200b\u62a5\u8868\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.dividend.StockDividendMapping","title":"StockDividendMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5206\u7ea2\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.dividend.StockDividend","title":"StockDividend","text":"<pre><code>StockDividend(\n    security_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5206\u7ea2\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.financial import StockDividend\n\ndata = StockDividend(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\dividend.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import StockDividend\n\n        data = StockDividend(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = StockDividendMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5206\u7ea2\u200b\u6570\u636e\u200b\")\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.income.StockIncomeMapping","title":"StockIncomeMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5229\u6da6\u200b\u62a5\u8868\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.income.StockIncome","title":"StockIncome","text":"<pre><code>StockIncome(\n    security_code: Optional[str] = None,\n    market: Optional[TypeMarket] = None,\n    industry_name: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5229\u6da6\u200b\u62a5\u8868\u200b</p> Notes <pre><code>from wisecon.stock.financial import StockIncome\n\ndata = StockIncome(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>market</code> <code>Optional[TypeMarket]</code> <p>\u200b\u5e02\u573a\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>industry_name</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\income.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        market: Optional[TypeMarket] = None,\n        industry_name: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import StockIncome\n\n        data = StockIncome(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        market: \u200b\u5e02\u573a\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]`\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.market = market\n    self.industry_name = industry_name\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = StockIncomeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5229\u6da6\u200b\u62a5\u8868\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn.EarnMapping","title":"EarnMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn.Earn","title":"Earn","text":"<pre><code>Earn(\n    security_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    industry_name: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b</p> Notes <pre><code>from wisecon.stock.financial import Earn\n\ndata = Earn(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>industry_name</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\earn.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        industry_name: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import Earn\n\n        data = Earn(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.industry_name = industry_name\n    self.mapping = EarnMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn_fast.EarnFastMapping","title":"EarnFastMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn_fast.EarnFast","title":"EarnFast","text":"<pre><code>EarnFast(\n    security_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    industry_name: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b</p> Notes <pre><code>from wisecon.stock.financial import EarnFast\n\ndata = EarnFast(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>industry_name</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\earn_fast.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        industry_name: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import EarnFast\n\n        data = EarnFast(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.industry_name = industry_name\n    self.mapping = EarnFastMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u62a5\u8868\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn_forecast.EarnForcastMapping","title":"EarnForcastMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u9884\u544a\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.earn_forecast.EarnForcast","title":"EarnForcast","text":"<pre><code>EarnForcast(\n    security_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    forcast_state: Optional[\n        Literal[\"reduction\", \"increase\"]\n    ] = None,\n    predict_finance: Optional[\n        Literal[\n            \"\u200b\u5f52\u6bcd\u200b\u51c0\u5229\u6da6\u200b\",\n            \"\u200b\u6263\u975e\u200b\u51c0\u5229\u6da6\u200b\",\n            \"\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\",\n            \"\u200b\u8425\u4e1a\u200b\u603b\u6536\u5165\u200b\",\n        ]\n    ] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u9884\u544a\u200b</p> Notes <pre><code>from wisecon.stock.financial import EarnForcast\n\ndata = EarnForcast(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>forcast_state</code> <code>Optional[Literal['reduction', 'increase']]</code> <p>\u200b\u9884\u6d4b\u200b\u72b6\u6001\u200b <code>[\"reduction\", \"increase\"]</code></p> <code>None</code> <code>predict_finance</code> <code>Optional[Literal['\u200b\u5f52\u6bcd\u200b\u51c0\u5229\u6da6\u200b', '\u200b\u6263\u975e\u200b\u51c0\u5229\u6da6\u200b', '\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b', '\u200b\u8425\u4e1a\u200b\u603b\u6536\u5165\u200b']]</code> <p>\u200b\u9884\u6d4b\u200b\u6307\u6807\u200b <code>[\"\u200b\u5f52\u6bcd\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6263\u975e\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\", \"\u200b\u8425\u4e1a\u200b\u603b\u6536\u5165\u200b\"]</code></p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\earn_forecast.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        forcast_state: Optional[Literal[\"reduction\", \"increase\"]] = None,\n        predict_finance: Optional[Literal[\"\u200b\u5f52\u6bcd\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6263\u975e\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\", \"\u200b\u8425\u4e1a\u200b\u603b\u6536\u5165\u200b\"]] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import EarnForcast\n\n        data = EarnForcast(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        forcast_state: \u200b\u9884\u6d4b\u200b\u72b6\u6001\u200b `[\"reduction\", \"increase\"]`\n        predict_finance: \u200b\u9884\u6d4b\u200b\u6307\u6807\u200b `[\"\u200b\u5f52\u6bcd\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6263\u975e\u200b\u51c0\u5229\u6da6\u200b\", \"\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\", \"\u200b\u8425\u4e1a\u200b\u603b\u6536\u5165\u200b\"]`\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.forcast_state = forcast_state\n    self.predict_finance = predict_finance\n    self.mapping = EarnForcastMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u200b\u516c\u53f8\u4e1a\u7ee9\u200b\u9884\u544a\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/financial/#wisecon.stock.financial.scheduled.ScheduledDisclosureMapping","title":"ScheduledDisclosureMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u9884\u7ea6\u200b\u62ab\u9732\u200b\u65f6\u95f4\u200b</p>"},{"location":"api/stock/financial/#wisecon.stock.financial.scheduled.ScheduledDisclosure","title":"ScheduledDisclosure","text":"<pre><code>ScheduledDisclosure(\n    security_code: Optional[str] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    industry_name: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u9884\u7ea6\u200b\u62ab\u9732\u200b\u65f6\u95f4\u200b</p> Notes <pre><code>from wisecon.stock.financial import ScheduledDisclosure\n\ndata = ScheduledDisclosure(date=\"2024-09-30\", size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>industry_name</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\financial\\scheduled.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        industry_name: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.financial import ScheduledDisclosure\n\n        data = ScheduledDisclosure(date=\"2024-09-30\", size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        industry_name: \u200b\u884c\u4e1a\u200b\u540d\u79f0\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u200b\u6570\u636e\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.industry_name = industry_name\n    self.mapping = ScheduledDisclosureMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u9884\u7ea6\u200b\u62ab\u9732\u200b\u65f6\u95f4\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/","title":"\u80a1\u4e1c\u200b\u5206\u6790","text":""},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder.FreeHolderMapping","title":"FreeHolderMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder.FreeHolder","title":"FreeHolder","text":"<pre><code>FreeHolder(\n    holder_name: Optional[str] = None,\n    security_code: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = FreeHolder(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\free_holder.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        security_code: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = FreeHolder(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.security_code = security_code\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = FreeHolderMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_change.FreeHolderChangeMapping","title":"FreeHolderChangeMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_change.FreeHolderChange","title":"FreeHolderChange","text":"<pre><code>FreeHolderChange(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = FreeHolderChange(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\free_holder_change.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = FreeHolderChange(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = FreeHolderChangeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_stock.FreeHolderStockMapping","title":"FreeHolderStockMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_stock.FreeHolderStock","title":"FreeHolderStock","text":"<pre><code>FreeHolderStock(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = FreeHolderStock(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\free_holder_stock.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = FreeHolderStock(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = FreeHolderStockMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u6301\u80a1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_stock_analysis.FreeHolderStockAnalysisMapping","title":"FreeHolderStockAnalysisMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_stock_analysis.FreeHolderStockAnalysis","title":"FreeHolderStockAnalysis","text":"<pre><code>FreeHolderStockAnalysis(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = FreeHolderStockAnalysis(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u53d8\u52a8\u200b\u65b9\u5411\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\free_holder_stock_analysis.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = FreeHolderStockAnalysis(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u53d8\u52a8\u200b\u65b9\u5411\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = FreeHolderStockAnalysisMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_coop.FreeHolderCoopMapping","title":"FreeHolderCoopMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.free_holder_coop.FreeHolderCoop","title":"FreeHolderCoop","text":"<pre><code>FreeHolderCoop(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = FreeHolderCoop(size=20).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\free_holder_coop.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = FreeHolderCoop(size=20).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.size = size\n    self.mapping = FreeHolderCoopMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u6d41\u901a\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder.HolderMapping","title":"HolderMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder.Holder","title":"Holder","text":"<pre><code>Holder(\n    holder_name: Optional[str] = None,\n    security_code: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = Holder(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\holder.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        security_code: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = Holder(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.security_code = security_code\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = HolderMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u660e\u7ec6\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_change.HolderChangeMapping","title":"HolderChangeMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_change.HolderChange","title":"HolderChange","text":"<pre><code>HolderChange(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = HolderChange(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\holder_change.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = HolderChange(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = HolderChangeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u7edf\u8ba1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_stock.HolderStockMapping","title":"HolderStockMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_stock.HolderStock","title":"HolderStock","text":"<pre><code>HolderStock(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = HolderStock(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\holder_stock.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = HolderStock(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = HolderStockMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_stock_analysis.HolderStockAnalysisMapping","title":"HolderStockAnalysisMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_stock_analysis.HolderStockAnalysis","title":"HolderStockAnalysis","text":"<pre><code>HolderStockAnalysis(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    holder_change: Optional[\n        Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]\n    ] = None,\n    size: Optional[int] = 50,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = HolderStockAnalysis(size=20, start_date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>holder_change</code> <code>Optional[Literal['\u200b\u65b0\u8fdb\u200b', '\u200b\u589e\u52a0\u200b', '\u200b\u4e0d\u53d8\u200b', '\u200b\u51cf\u5c11\u200b']]</code> <p>\u200b\u53d8\u52a8\u200b\u65b9\u5411\u200b <code>[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\holder_stock_analysis.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        holder_change: Optional[Literal[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]] = None,\n        size: Optional[int] = 50,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = HolderStockAnalysis(size=20, start_date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        holder_change: \u200b\u53d8\u52a8\u200b\u65b9\u5411\u200b `[\"\u200b\u65b0\u8fdb\u200b\", \"\u200b\u589e\u52a0\u200b\", \"\u200b\u4e0d\u53d8\u200b\", \"\u200b\u51cf\u5c11\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.holder_change = holder_change\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = HolderStockAnalysisMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u6301\u80a1\u200b\u7edf\u8ba1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_coop.HolderCoopMapping","title":"HolderCoopMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b</p>"},{"location":"api/stock/holder/#wisecon.stock.holder.holder_coop.HolderCoop","title":"HolderCoop","text":"<pre><code>HolderCoop(\n    holder_name: Optional[str] = None,\n    holder_type: Optional[\n        Literal[\n            \"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b</p> Notes <pre><code>from wisecon.stock.holder import *\n\ndata = HolderCoop(size=20).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_name</code> <code>Optional[str]</code> <p>\u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b</p> <code>None</code> <code>holder_type</code> <code>Optional[Literal['\u200b\u4e2a\u4eba\u200b', '\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b <code>[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\holder\\holder_coop.py</code> <pre><code>def __init__(\n        self,\n        holder_name: Optional[str] = None,\n        holder_type: Optional[Literal[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.holder import *\n\n        data = HolderCoop(size=20).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_name: \u200b\u80a1\u4e1c\u200b\u540d\u79f0\u200b\n        holder_type: \u200b\u80a1\u4e1c\u200b\u7c7b\u578b\u200b `[\"\u200b\u4e2a\u4eba\u200b\", \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fe1\u6258\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_name = holder_name\n    self.holder_type = holder_type\n    self.size = size\n    self.mapping = HolderCoopMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(response_type=\"json\", description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u5341\u5927\u200b\u80a1\u4e1c\u200b\u80a1\u4e1c\u200b\u534f\u540c\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/kline/","title":"KLine","text":""},{"location":"api/stock/kline/#wisecon.stock.kline.kline.KLineMapping","title":"KLineMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u80a1\u7968\u200b-KLine</p>"},{"location":"api/stock/kline/#wisecon.stock.kline.kline.KLine","title":"KLine","text":"<pre><code>KLine(\n    market_code: Annotated[\n        Optional[str], \u200b\u5e02\u573a\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    security_code: Annotated[\n        Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    plate_code: Annotated[\n        Optional[str], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    end_date: Annotated[\n        Optional[str], \u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b, False\n    ] = \"20500101\",\n    size: Annotated[Optional[int], \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b, False] = 120,\n    period: Annotated[\n        Literal[\n            \"1m\",\n            \"5m\",\n            \"15m\",\n            \"30m\",\n            \"60m\",\n            \"1D\",\n            \"1W\",\n            \"1M\",\n        ],\n        \"\",\n        False,\n    ] = \"5m\",\n    adjust: Annotated[\n        Literal[\"\u200b\u524d\u200b\u590d\u6743\u200b\", \"\u200b\u540e\u200b\u8d4b\u6743\u200b\", \"\u200b\u4e0d\u200b\u8d4b\u6743\u200b\"], \"\", False\n    ] = \"\u200b\u524d\u200b\u590d\u6743\u200b\",\n    verbose: Annotated[\n        Optional[bool], \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b, False\n    ] = False,\n    logger: Annotated[\n        Optional[Callable], \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b, False\n    ] = None,\n    **kwargs: Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u80a1\u7968\u200b-KLine</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u975e\u200b\u4ea4\u6613\u65e5\u200b\u65f6\u200b\uff0c1\u200b\u5206\u949f\u200b\u7ebf\u200b<code>1m</code>\u200b\u65e0\u200b\u6570\u636e\u200b\u3002</p> Notes <pre><code>from wisecon.stock.kline import *\n\n# 0. \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b300 K\u200b\u7ebf\u200b\u6570\u636e\u200b\ndata = KLine(market_code=\"000300\", period=\"1D\", size=5).load()\ndata.to_frame(chinese_column=True)\n\n# 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\ndata = KLine(security_code=\"300069\", period=\"1D\", size=5).load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\ndata = KLine(plate_code=\"BK0887\", period=\"1D\", size=5).load()\nprint(data.to_markdown(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market_code</code> <code>Annotated[Optional[str], \u200b\u5e02\u573a\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u5e02\u573a\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>security_code</code> <code>Annotated[Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>plate_code</code> <code>Annotated[Optional[str], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>end_date</code> <code>Annotated[Optional[str], \u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b, False]</code> <p>\u200b\u622a\u6b62\u200b\u65e5\u671f\u200b</p> <code>'20500101'</code> <code>size</code> <code>Annotated[Optional[int], \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b, False]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>120</code> <code>period</code> <code>Annotated[Literal['1m', '5m', '15m', '30m', '60m', '1D', '1W', '1M'], '', False]</code> <p>K\u200b\u7ebf\u200b\u5468\u671f\u200b<code>[\"1m\", \"5m\", \"15m\", \"30m\", \"60m\", \"1D\", \"1W\", \"1M\"]</code></p> <code>'5m'</code> <code>adjust</code> <code>Annotated[Literal['\u200b\u524d\u200b\u590d\u6743\u200b', '\u200b\u540e\u200b\u8d4b\u6743\u200b', '\u200b\u4e0d\u200b\u8d4b\u6743\u200b'], '', False]</code> <p>\u200b\u590d\u6743\u200b\u7c7b\u578b\u200b<code>[\"\u200b\u524d\u200b\u590d\u6743\u200b\", \"\u200b\u540e\u200b\u8d4b\u6743\u200b\", \"\u200b\u4e0d\u200b\u8d4b\u6743\u200b\"]</code></p> <code>'\u200b\u524d\u200b\u590d\u6743\u200b'</code> <code>verbose</code> <code>Annotated[Optional[bool], \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b, False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b, False]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\kline\\kline.py</code> <pre><code>def __init__(\n        self,\n        market_code: Annotated[Optional[str], \"\u200b\u5e02\u573a\u200b\u4ee3\u7801\u200b\", False] = None,\n        security_code: Annotated[Optional[str], \"\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\", False] = None,\n        plate_code: Annotated[Optional[str], \"\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b\", False] = None,\n        end_date: Annotated[Optional[str], \"\u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b\", False] = \"20500101\",\n        size: Annotated[Optional[int], \"\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b\", False] = 120,\n        period: Annotated[Literal[\"1m\", \"5m\", \"15m\", \"30m\", \"60m\", \"1D\", \"1W\", \"1M\"], \"\", False] = \"5m\",\n        adjust: Annotated[Literal[\"\u200b\u524d\u200b\u590d\u6743\u200b\", \"\u200b\u540e\u200b\u8d4b\u6743\u200b\", \"\u200b\u4e0d\u200b\u8d4b\u6743\u200b\"], \"\", False] = \"\u200b\u524d\u200b\u590d\u6743\u200b\",\n        verbose: Annotated[Optional[bool], \"\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\", False] = False,\n        logger: Annotated[Optional[Callable], \"\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\", False] = None,\n        **kwargs: Annotated[Any, \"\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\", False]\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.kline import *\n\n        # 0. \u200b\u67e5\u8be2\u200b\u6caa\u200b\u6df1\u200b300 K\u200b\u7ebf\u200b\u6570\u636e\u200b\n        data = KLine(market_code=\"000300\", period=\"1D\", size=5).load()\n        data.to_frame(chinese_column=True)\n\n        # 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\n        data = KLine(security_code=\"300069\", period=\"1D\", size=5).load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\n        data = KLine(plate_code=\"BK0887\", period=\"1D\", size=5).load()\n        print(data.to_markdown(chinese_column=True))\n        ```\n\n    Args:\n        market_code: \u200b\u5e02\u573a\u200b\u4ee3\u7801\u200b\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b\n        end_date: \u200b\u622a\u6b62\u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        period: K\u200b\u7ebf\u200b\u5468\u671f\u200b`[\"1m\", \"5m\", \"15m\", \"30m\", \"60m\", \"1D\", \"1W\", \"1M\"]`\n        adjust: \u200b\u590d\u6743\u200b\u7c7b\u578b\u200b`[\"\u200b\u524d\u200b\u590d\u6743\u200b\", \"\u200b\u540e\u200b\u8d4b\u6743\u200b\", \"\u200b\u4e0d\u200b\u8d4b\u6743\u200b\"]`\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market_code = market_code\n    self.security_code = security_code\n    self.plate_code = plate_code\n    self.end_date = end_date\n    self.size = size\n    self.period = period\n    self.adjust = adjust\n    self.mapping = KLineMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u80a1\u7968\u200b-KLine\")\n    self.validate_date_format(date=end_date, _format=\"%Y%m%d\")\n</code></pre>"},{"location":"api/stock/kline/#wisecon.stock.kline.kline_min.KlineMinMapping","title":"KlineMinMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u80a1\u7968\u200b-KlineMin</p>"},{"location":"api/stock/kline/#wisecon.stock.kline.kline_min.KlineMin","title":"KlineMin","text":"<pre><code>KlineMin(\n    security_code: Annotated[\n        Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    plate_code: Annotated[\n        Optional[str], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False\n    ] = None,\n    n_days: Annotated[Optional[int], \u200b\u6570\u636e\u200b\u65f6\u9650\u200b, False] = 1,\n    verbose: Annotated[\n        Optional[bool], \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b, False\n    ] = False,\n    logger: Annotated[\n        Optional[Callable], \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b, False\n    ] = None,\n    **kwargs: Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u80a1\u7968\u200b-KlineMin\uff0c\u200b\u53ef\u4ee5\u200b\u83b7\u53d6\u200b\u6700\u5927\u200b\u8fd1\u200b5\u200b\u5929\u200b\u7684\u200b\u5206\u949f\u200b\u7ea7\u200bK\u200b\u7ebf\u200b\u6570\u636e\u200b</p> <p>\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b1\u200b\u5206\u949f\u200b\u7ea7\u200b\u7684\u200bK\u200b\u7ebf\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.kline import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\ndata = KlineMin(security_code=\"300069\", n_days=1).load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\ndata = KlineMin(plate_code=\"BK0887\", n_days=1).load()\nprint(data.to_markdown(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Annotated[Optional[str], \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>plate_code</code> <code>Annotated[Optional[str], \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b, False]</code> <p>\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>n_days</code> <code>Annotated[Optional[int], \u200b\u6570\u636e\u200b\u65f6\u9650\u200b, False]</code> <p>\u200b\u67e5\u8be2\u200b\u5929\u6570\u200b</p> <code>1</code> <code>verbose</code> <code>Annotated[Optional[bool], \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b, False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b, False]</code> <p>\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b, False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\kline\\kline_min.py</code> <pre><code>def __init__(\n        self,\n        security_code: Annotated[Optional[str], \"\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\", False] = None,\n        plate_code: Annotated[Optional[str], \"\u200b\u677f\u5757\u200b\u4ee3\u7801\u200b\", False] = None,\n        n_days: Annotated[Optional[int], \"\u200b\u6570\u636e\u200b\u65f6\u9650\u200b\", False] = 1,\n        verbose: Annotated[Optional[bool], \"\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\", False] = False,\n        logger: Annotated[Optional[Callable], \"\u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\", False] = None,\n        **kwargs: Annotated[Any, \"\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\", False]\n):\n    \"\"\"\n    \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b1\u200b\u5206\u949f\u200b\u7ea7\u200b\u7684\u200bK\u200b\u7ebf\u200b\u6570\u636e\u200b\n\n    Notes:\n        ```python\n        from wisecon.stock.kline import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\n        data = KlineMin(security_code=\"300069\", n_days=1).load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u677f\u5757\u200b\u7684\u200b K\u200b\u7ebf\u200b\u6570\u636e\u200b\n        data = KlineMin(plate_code=\"BK0887\", n_days=1).load()\n        print(data.to_markdown(chinese_column=True))\n        ```\n\n    Args:\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        plate_code: \u200b\u677f\u5757\u200b\u4ee3\u7801\u200b\n        n_days: \u200b\u67e5\u8be2\u200b\u5929\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u5bf9\u8c61\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.plate_code = plate_code\n    self.n_days = n_days\n    self.mapping = KlineMinMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u80a1\u7968\u200b-KlineMin\")\n    self.validate_n_days()\n</code></pre>"},{"location":"api/stock/kline/#wisecon.stock.kline.kline_min.KlineMin.validate_n_days","title":"validate_n_days","text":"<pre><code>validate_n_days()\n</code></pre> Source code in <code>wisecon\\stock\\kline\\kline_min.py</code> <pre><code>def validate_n_days(self):\n    \"\"\"\"\"\"\n    if self.n_days &gt; 5:\n        raise ValueError(\"n_days should be less than or equal to 5\")\n</code></pre>"},{"location":"api/stock/main_holder/","title":"\u4e3b\u529b\u200b\u6301\u4ed3","text":""},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.fund_holder.FundHolderListMapping","title":"FundHolderListMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u57fa\u91d1\u200b\u6301\u4ed3\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.fund_holder.FundHolderList","title":"FundHolderList","text":"<pre><code>FundHolderList(\n    holder_code: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4f9d\u636e\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u57fa\u91d1\u200b\u6301\u4ed3\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.main_holder import *\n\ndata = FundHolderList(holder_code=\"516060\", date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder_code</code> <code>Optional[str]</code> <p><code>\u200b\u6301\u6709\u200b\u7ec4\u7ec7\u200b\u4ee3\u7801\u200b/\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b</code></p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u62a5\u544a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\main_holder\\fund_holder.py</code> <pre><code>def __init__(\n        self,\n        holder_code: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.main_holder import *\n\n        data = FundHolderList(holder_code=\"516060\", date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder_code: `\u200b\u6301\u6709\u200b\u7ec4\u7ec7\u200b\u4ee3\u7801\u200b/\u200b\u57fa\u91d1\u200b\u4ee3\u7801\u200b`\n        date: \u200b\u62a5\u544a\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder_code = holder_code\n    self.date = date\n    self.size = size\n    self.mapping = FundHolderListMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u57fa\u91d1\u200b\u6301\u4ed3\u200b\u6570\u636e\u200b\",)\n    self.conditions = []\n    self.validate_holder_code(code=holder_code)\n    self.validate_date_is_end_if_quarter(date=date)\n</code></pre>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.main_holder.MainHolderMapping","title":"MainHolderMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u673a\u6784\u200b\u6301\u80a1\u200b\u4e00\u89c8\u8868\u200b</p>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.main_holder.MainHolder","title":"MainHolder","text":"<pre><code>MainHolder(\n    holder: Optional[\n        Literal[\n            \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fdd\u9669\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    status: Optional[\n        Literal[\"\u200b\u5168\u90e8\u200b\", \"\u200b\u589e\u6301\u200b\", \"\u200b\u51cf\u6301\u200b\"]\n    ] = \"\u200b\u5168\u90e8\u200b\",\n    date: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u673a\u6784\u200b\u6301\u80a1\u200b\u4e00\u89c8\u8868\u200b</p> Notes <pre><code>from wisecon.stock.main_holder import *\n\ndata = MainHolder(holder=\"\u200b\u57fa\u91d1\u200b\", date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>holder</code> <code>Optional[Literal['\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fdd\u9669\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u673a\u6784\u200b\u7c7b\u578b\u200b</p> <code>None</code> <code>status</code> <code>Optional[Literal['\u200b\u5168\u90e8\u200b', '\u200b\u589e\u6301\u200b', '\u200b\u51cf\u6301\u200b']]</code> <p>\u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u60c5\u51b5\u200b</p> <code>'\u200b\u5168\u90e8\u200b'</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\main_holder\\main_holder.py</code> <pre><code>def __init__(\n        self,\n        holder: Optional[Literal[\"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fdd\u9669\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        status: Optional[Literal[\"\u200b\u5168\u90e8\u200b\", \"\u200b\u589e\u6301\u200b\", \"\u200b\u51cf\u6301\u200b\"]] = \"\u200b\u5168\u90e8\u200b\",\n        date: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.main_holder import *\n\n        data = MainHolder(holder=\"\u200b\u57fa\u91d1\u200b\", date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        holder: \u200b\u673a\u6784\u200b\u7c7b\u578b\u200b\n        status: \u200b\u6301\u80a1\u200b\u53d8\u52a8\u200b\u60c5\u51b5\u200b\n        date: \u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.holder = holder\n    self.status = status\n    self.date = date\n    self.size = size\n    self.mapping = MainHolderMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u673a\u6784\u200b\u6301\u80a1\u200b\u4e00\u89c8\u8868\u200b\",)\n    self.validate_date_is_end_if_quarter(date=date)\n</code></pre>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_holder.StockHolderMapping","title":"StockHolderMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u80a1\u7968\u200b\u7684\u200b\u673a\u6784\u200b\u6301\u6709\u8005\u200b\u6e05\u5355\u200b</p>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_holder.StockHolder","title":"StockHolder","text":"<pre><code>StockHolder(\n    security_code: Optional[str] = None,\n    holder: Optional[\n        Literal[\n            \"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fdd\u9669\u200b\", \"\u200b\u4fe1\u6258\u200b\"\n        ]\n    ] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u80a1\u7968\u200b\u7684\u200b\u673a\u6784\u200b\u6301\u6709\u8005\u200b\u6e05\u5355\u200b</p> Notes <pre><code>from wisecon.stock.main_holder import *\n\ndata = StockHolder(security_code=\"603350\", holder=\"\u200b\u57fa\u91d1\u200b\", date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>holder</code> <code>Optional[Literal['\u200b\u57fa\u91d1\u200b', 'QFII', '\u200b\u793e\u4fdd\u200b', '\u200b\u5238\u5546\u200b', '\u200b\u4fdd\u9669\u200b', '\u200b\u4fe1\u6258\u200b']]</code> <p>\u200b\u673a\u6784\u200b\u7c7b\u578b\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\main_holder\\stock_holder.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        holder: Optional[Literal[\"\u200b\u57fa\u91d1\u200b\", \"QFII\", \"\u200b\u793e\u4fdd\u200b\", \"\u200b\u5238\u5546\u200b\", \"\u200b\u4fdd\u9669\u200b\", \"\u200b\u4fe1\u6258\u200b\"]] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.main_holder import *\n\n        data = StockHolder(security_code=\"603350\", holder=\"\u200b\u57fa\u91d1\u200b\", date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        holder: \u200b\u673a\u6784\u200b\u7c7b\u578b\u200b\n        date: \u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.holder = holder\n    self.date = date\n    self.size = size\n    self.mapping = StockHolderMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u80a1\u7968\u200b\u7684\u200b\u673a\u6784\u200b\u6301\u6709\u8005\u200b\u6e05\u5355\u200b\",)\n    self.validate_security_code(code=security_code)\n    self.validate_date_is_end_if_quarter(date=date)\n</code></pre>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_holder_collect.StockHolderCollectMapping","title":"StockHolderCollectMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6c47\u603b\u200b\u4fe1\u606f\u200b</p>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_holder_collect.StockHolderCollect","title":"StockHolderCollect","text":"<pre><code>StockHolderCollect(\n    security_code: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 8,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6c47\u603b\u200b\u4fe1\u606f\u200b</p> Notes <pre><code>from wisecon.stock.main_holder import *\n\ndata = StockHolderCollect(security_code=\"002475\", date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u62a5\u544a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>8</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\main_holder\\stock_holder_collect.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 8,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.main_holder import *\n\n        data = StockHolderCollect(security_code=\"002475\", date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        date: \u200b\u62a5\u544a\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.date = date\n    self.size = size\n    self.mapping = StockHolderCollectMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6c47\u603b\u200b\u4fe1\u606f\u200b\",)\n    self.conditions = []\n    self.validate_security_code(security_code)\n    self.validate_date_is_end_if_quarter(date=date)\n</code></pre>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_fund_holder_history.StockFundHolderHistoryMapping","title":"StockFundHolderHistoryMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6301\u4ed3\u200b\u5386\u53f2\u200b</p>"},{"location":"api/stock/main_holder/#wisecon.stock.main_holder.stock_fund_holder_history.StockFundHolderHistory","title":"StockFundHolderHistory","text":"<pre><code>StockFundHolderHistory(\n    security_code: Optional[str] = None,\n    start_date: Optional[str] = \"2015-09-30\",\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6301\u4ed3\u200b\u5386\u53f2\u200b</p> Notes <pre><code>from wisecon.stock.main_holder import *\n\ndata = StockFundHolderHistory(security_code=\"002475\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u80a1\u7968\u4ee3\u7801\u200b</p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u62a5\u544a\u200b\u65e5\u671f\u200b</p> <code>'2015-09-30'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\main_holder\\stock_fund_holder_history.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        start_date: Optional[str] = '2015-09-30',\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.main_holder import *\n\n        data = StockFundHolderHistory(security_code=\"002475\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u80a1\u7968\u4ee3\u7801\u200b\n        start_date: \u200b\u62a5\u544a\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.start_date = start_date\n    self.size = size\n    self.mapping = StockFundHolderHistoryMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4f9d\u636e\u200b\u80a1\u7968\u4ee3\u7801\u200b\u67e5\u8be2\u200b\u80a1\u7968\u200b\u57fa\u91d1\u200b\u673a\u6784\u200b\u5bf9\u200b\u8be5\u200b\u80a1\u7968\u200b\u7684\u200b\u6301\u4ed3\u200b\u5386\u53f2\u200b\",)\n    self.conditions = []\n    self.validate_security_code(code=security_code)\n    self.validate_date_is_end_if_quarter(date=start_date)\n</code></pre>"},{"location":"api/stock/margin/","title":"\u878d\u8d44\u200b\u878d\u5238","text":""},{"location":"api/stock/margin/#wisecon.stock.margin.summary.MarginTradingSummaryMapping","title":"MarginTradingSummaryMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b</p>"},{"location":"api/stock/margin/#wisecon.stock.margin.summary.MarginTradingSummary","title":"MarginTradingSummary","text":"<pre><code>MarginTradingSummary(\n    market: Literal[\n        \"\u200b\u5168\u90e8\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u4eac\u200b\u5e02\u200b\"\n    ] = \"\u200b\u5168\u90e8\u200b\",\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 100,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.margin import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b\ndata = MarginTradingSummary(market=\"\u200b\u5168\u90e8\u200b\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Literal['\u200b\u5168\u90e8\u200b', '\u200b\u6caa\u5e02\u200b', '\u200b\u6df1\u5e02\u200b', '\u200b\u4eac\u200b\u5e02\u200b']</code> <p>\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b</p> <code>'\u200b\u5168\u90e8\u200b'</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>100</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\margin\\summary.py</code> <pre><code>def __init__(\n        self,\n        market: Literal[\"\u200b\u5168\u90e8\u200b\", \"\u200b\u6caa\u5e02\u200b\", \"\u200b\u6df1\u5e02\u200b\", \"\u200b\u4eac\u200b\u5e02\u200b\"] = \"\u200b\u5168\u90e8\u200b\",\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 100,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.margin import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b\n        data = MarginTradingSummary(market=\"\u200b\u5168\u90e8\u200b\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.size = size\n    self.mapping = MarginTradingSummaryMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/margin/#wisecon.stock.margin.account.MarginTradingAccountMapping","title":"MarginTradingAccountMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u4e24\u878d\u200b\u8d26\u6237\u200b\u4fe1\u606f\u200b</p>"},{"location":"api/stock/margin/#wisecon.stock.margin.account.MarginTradingAccount","title":"MarginTradingAccount","text":"<pre><code>MarginTradingAccount(\n    cycle: Literal[\"day\", \"month\"] = \"day\",\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 100,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u4e24\u878d\u200b\u8d26\u6237\u200b\u4fe1\u606f\u200b</p> Notes <pre><code>from wisecon.stock.margin import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u4e24\u878d\u200b\u8d26\u6237\u200b\u4fe1\u606f\u200b\ndata = MarginTradingAccount(market=\"\u200b\u5168\u90e8\u200b\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cycle</code> <code>Literal['day', 'month']</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b</p> <code>'day'</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>100</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\margin\\account.py</code> <pre><code>def __init__(\n        self,\n        cycle: Literal[\"day\", \"month\"] = \"day\",\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 100,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.margin import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u4e24\u878d\u200b\u8d26\u6237\u200b\u4fe1\u606f\u200b\n        data = MarginTradingAccount(market=\"\u200b\u5168\u90e8\u200b\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.cycle = cycle\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.size = size\n    self.mapping = MarginTradingAccountMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u4e24\u878d\u200b\u8d26\u6237\u200b\u4fe1\u606f\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[date, start_date, end_date])\n</code></pre>"},{"location":"api/stock/margin/#wisecon.stock.margin.plate.MarginTradingPlateMapping","title":"MarginTradingPlateMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u677f\u5757\u200b\u878d\u8d44\u200b\u878d\u5238\u200b</p>"},{"location":"api/stock/margin/#wisecon.stock.margin.plate.MarginTradingPlate","title":"MarginTradingPlate","text":"<pre><code>MarginTradingPlate(\n    plate_name: Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u57df\u200b\"] = \"\u200b\u884c\u4e1a\u200b\",\n    cycle: Literal[1, 3, 5, 10] = 1,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u677f\u5757\u200b\u878d\u8d44\u200b\u878d\u5238\u200b</p> Notes <pre><code>from wisecon.stock.margin import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u677f\u5757\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\ndata = MarginTradingPlate(plate_name=\"\u200b\u884c\u4e1a\u200b\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plate_name</code> <code>Literal['\u200b\u884c\u4e1a\u200b', '\u200b\u6982\u5ff5\u200b', '\u200b\u5730\u57df\u200b']</code> <p>\u200b\u677f\u5757\u200b\u7c7b\u578b\u200b: <code>[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u57df\u200b\"]</code></p> <code>'\u200b\u884c\u4e1a\u200b'</code> <code>cycle</code> <code>Literal[1, 3, 5, 10]</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b</p> <code>1</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\margin\\plate.py</code> <pre><code>def __init__(\n        self,\n        plate_name: Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u57df\u200b\"] = \"\u200b\u884c\u4e1a\u200b\",\n        cycle: Literal[1, 3, 5, 10] = 1,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.margin import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u677f\u5757\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\n        data = MarginTradingPlate(plate_name=\"\u200b\u884c\u4e1a\u200b\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        plate_name: \u200b\u677f\u5757\u200b\u7c7b\u578b\u200b: `[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u57df\u200b\"]`\n        cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.plate_name = plate_name\n    self.cycle = cycle\n    self.size = size\n    self.mapping = MarginTradingPlateMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u8d26\u6237\u200b\u7edf\u8ba1\u200b-\u200b\u677f\u5757\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/margin/#wisecon.stock.margin.stock.MarginTradingStockMapping","title":"MarginTradingStockMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u660e\u7ec6\u200b-\u200b\u4e2a\u80a1\u200b\u878d\u8d44\u200b\u878d\u5238\u200b</p>"},{"location":"api/stock/margin/#wisecon.stock.margin.stock.MarginTradingStock","title":"MarginTradingStock","text":"<pre><code>MarginTradingStock(\n    market: Literal[\n        \"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\",\n        \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\",\n        \"\u200b\u79d1\u521b\u677f\u200b\",\n        \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\",\n        \"\u200b\u521b\u4e1a\u677f\u200b\",\n        \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\",\n    ] = None,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    cycle: Literal[1, 3, 5, 10] = 1,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u660e\u7ec6\u200b-\u200b\u4e2a\u80a1\u200b\u878d\u8d44\u200b\u878d\u5238\u200b</p> Notes <pre><code>from wisecon.stock.margin import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u660e\u7ec6\u200b-\u200b\u4e2a\u80a1\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\ndata = MarginTradingStock(date=\"2024-10-30\", cycle=1).load()\ndata.to_frame(chinese_column=True)\n\ndata = MarginTradingStock(market=\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", date=\"2024-10-30\", cycle=1).load()\ndata.to_frame(chinese_column=True)\n\ndata = MarginTradingStock(market=\"\u200b\u79d1\u521b\u677f\u200b\", date=\"2024-10-30\", cycle=1).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Literal['\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b', '\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b', '\u200b\u79d1\u521b\u677f\u200b', '\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b', '\u200b\u521b\u4e1a\u677f\u200b', '\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b']</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: <code>[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]</code></p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>cycle</code> <code>Literal[1, 3, 5, 10]</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b</p> <code>1</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\margin\\stock.py</code> <pre><code>def __init__(\n        self,\n        market: Literal[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"] = None,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        cycle: Literal[1, 3, 5, 10] = 1,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.margin import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u660e\u7ec6\u200b-\u200b\u4e2a\u80a1\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\n        data = MarginTradingStock(date=\"2024-10-30\", cycle=1).load()\n        data.to_frame(chinese_column=True)\n\n        data = MarginTradingStock(market=\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", date=\"2024-10-30\", cycle=1).load()\n        data.to_frame(chinese_column=True)\n\n        data = MarginTradingStock(market=\"\u200b\u79d1\u521b\u677f\u200b\", date=\"2024-10-30\", cycle=1).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b: `[\"\u200b\u6caa\u200b\u6df1\u200bA\u200b\u80a1\u200b\", \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]`\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u65e5\u671f\u200b\n        cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.cycle = cycle\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.size = size\n    self.mapping = MarginTradingStockMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u660e\u7ec6\u200b-\u200b\u4e2a\u80a1\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[date, start_date, end_date])\n</code></pre>"},{"location":"api/stock/margin/#wisecon.stock.margin.daily.MarginTradingDailyMapping","title":"MarginTradingDailyMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b</p>"},{"location":"api/stock/margin/#wisecon.stock.margin.daily.MarginTradingDaily","title":"MarginTradingDaily","text":"<pre><code>MarginTradingDaily(\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b</p> Notes <pre><code>from wisecon.stock.margin import *\n\n# \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b\ndata = MarginTradingDaily().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\margin\\daily.py</code> <pre><code>def __init__(\n        self,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.margin import *\n\n        # \u200b\u67e5\u8be2\u200b \u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b-\u200b\u5e02\u573a\u200b\u5408\u8ba1\u200b\n        data = MarginTradingDaily().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = MarginTradingDailyMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u878d\u8d44\u200b\u878d\u5238\u200b\u4ea4\u6613\u200b\u603b\u91cf\u200b\")\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/market/","title":"\u5e02\u573a\u200b\u5168\u8c8c","text":""},{"location":"api/stock/market/#wisecon.stock.market.summary.LastDayMarketSummaryMapping","title":"LastDayMarketSummaryMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5e02\u573a\u200b\u603b\u8c8c\u200b</p>"},{"location":"api/stock/market/#wisecon.stock.market.summary.LastDayMarketSummary","title":"LastDayMarketSummary","text":"<pre><code>LastDayMarketSummary(\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u67e5\u8be2\u200b\u6628\u65e5\u200b\u5e02\u573a\u200b\uff08\u200b\u6df1\u5e02\u200b\u3001\u200b\u6caa\u5e02\u200b\u3001\u200b\u521b\u4e1a\u677f\u200b\uff09\u200b\u603b\u4f53\u200b\u4ea4\u6613\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.market import *\n\n# \u200b\u5e02\u573a\u200b\u603b\u8c8c\u200b\uff1a\u200b\u67e5\u8be2\u200b\u6628\u65e5\u200b\u5e02\u573a\u200b\uff08\u200b\u6df1\u5e02\u200b\u3001\u200b\u6caa\u5e02\u200b\u3001\u200b\u521b\u4e1a\u677f\u200b\uff09\u200b\u603b\u4f53\u200b\u4ea4\u6613\u200b\u6570\u636e\u200b\ndata = LastDayMarketSummary().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\market\\summary.py</code> <pre><code>def __init__(\n        self,\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False],\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.market import *\n\n        # \u200b\u5e02\u573a\u200b\u603b\u8c8c\u200b\uff1a\u200b\u67e5\u8be2\u200b\u6628\u65e5\u200b\u5e02\u573a\u200b\uff08\u200b\u6df1\u5e02\u200b\u3001\u200b\u6caa\u5e02\u200b\u3001\u200b\u521b\u4e1a\u677f\u200b\uff09\u200b\u603b\u4f53\u200b\u4ea4\u6613\u200b\u6570\u636e\u200b\n        data = LastDayMarketSummary().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = LastDayMarketSummaryMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5e02\u573a\u200b\u603b\u8c8c\u200b\")\n</code></pre>"},{"location":"api/stock/new_ipo/","title":"\u65b0\u200b\u4e0a\u5e02","text":""},{"location":"api/stock/new_ipo/#wisecon.stock.new_ipo.new_ipo.NewIPOListMapping","title":"NewIPOListMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u65b0\u80a1\u7533\u8d2d\u200b\u4e0e\u200b\u4e2d\u200b\u7b7e\u200b\u67e5\u8be2\u200b</p>"},{"location":"api/stock/new_ipo/#wisecon.stock.new_ipo.new_ipo.NewIPOList","title":"NewIPOList","text":"<pre><code>NewIPOList(\n    market: Optional[\n        Literal[\n            \"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\",\n            \"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\",\n            \"\u200b\u79d1\u521b\u677f\u200b\",\n            \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\",\n            \"\u200b\u521b\u4e1a\u677f\u200b\",\n            \"\u200b\u5317\u4ea4\u6240\u200b\",\n            \"\u200b\u53ef\u8f6c\u503a\u200b\",\n            \"REITs\",\n        ]\n    ] = \"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\",\n    size: Optional[int] = 50,\n    start_date: Optional[str] = \"2010-01-01\",\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u65b0\u80a1\u7533\u8d2d\u200b\u4e0e\u200b\u4e2d\u200b\u7b7e\u200b\u67e5\u8be2\u200b</p> Notes <pre><code>from wisecon.stock.new_ipo import *\n\ndata = NewIPOList(market=\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u79d1\u521b\u677f\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u521b\u4e1a\u677f\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u5317\u4ea4\u6240\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"\u200b\u53ef\u8f6c\u503a\u200b\").load()\ndata.to_frame(chinese_column=True)\n\ndata = NewIPOList(market=\"REITs\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[Literal['\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b', '\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b', '\u200b\u79d1\u521b\u677f\u200b', '\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b', '\u200b\u521b\u4e1a\u677f\u200b', '\u200b\u5317\u4ea4\u6240\u200b', '\u200b\u53ef\u8f6c\u503a\u200b', 'REITs']]</code> <p>\u200b\u80a1\u7968\u5e02\u573a\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\uff0c [\"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u5317\u4ea4\u6240\u200b\", \"\u200b\u53ef\u8f6c\u503a\u200b\", \"REITs\"]</p> <code>'\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>50</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>'2010-01-01'</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\new_ipo\\new_ipo.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[Literal[\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\", \"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u5317\u4ea4\u6240\u200b\", \"\u200b\u53ef\u8f6c\u503a\u200b\", \"REITs\"]] = \"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\",\n        size: Optional[int] = 50,\n        start_date: Optional[str] = \"2010-01-01\",\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.new_ipo import *\n\n        data = NewIPOList(market=\"\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u79d1\u521b\u677f\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u521b\u4e1a\u677f\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u5317\u4ea4\u6240\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"\u200b\u53ef\u8f6c\u503a\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        data = NewIPOList(market=\"REITs\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u80a1\u7968\u5e02\u573a\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\uff0c [\"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u5317\u4ea4\u6240\u200b\", \"\u200b\u53ef\u8f6c\u503a\u200b\", \"REITs\"]\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        date: \u200b\u6307\u5b9a\u200b\u65e5\u671f\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.size = size\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.mapping = NewIPOListMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u65b0\u80a1\u7533\u8d2d\u200b\u4e0e\u200b\u4e2d\u200b\u7b7e\u200b\u67e5\u8be2\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date, date])\n</code></pre>"},{"location":"api/stock/plate_mapping/","title":"\u884c\u4e1a\u200b/\u200b\u5730\u533a\u200b/\u200b\u6982\u5ff5\u200b\u7f16\u7801","text":""},{"location":"api/stock/plate_mapping/#wisecon.stock.plate_mapping.plate.PlateCodeMapping","title":"PlateCodeMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\u7f16\u7801\u6570\u636e\u200b</p>"},{"location":"api/stock/plate_mapping/#wisecon.stock.plate_mapping.plate.PlateCode","title":"PlateCode","text":"<pre><code>PlateCode(\n    plate_type: Optional[\n        Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]\n    ] = None,\n    size: Optional[int] = 500,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\u7f16\u7801\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.capital_flow import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\ndata = PlateCode(plate_type=\"\u200b\u6982\u5ff5\u200b\").load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u5730\u533a\u200b\u677f\u5757\u200b\ndata = PlateCode(plate_type=\"\u200b\u5730\u533a\u200b\").load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\ndata = PlateCode(plate_type=\"\u200b\u884c\u4e1a\u200b\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plate_type</code> <code>Optional[Literal['\u200b\u884c\u4e1a\u200b', '\u200b\u6982\u5ff5\u200b', '\u200b\u5730\u533a\u200b']]</code> <p>\u200b\u677f\u5757\u200b\u7c7b\u578b\u200b, <code>[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]</code></p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b</p> <code>500</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\plate_mapping\\plate.py</code> <pre><code>def __init__(\n        self,\n        plate_type: Optional[Literal[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]] = None,\n        size: Optional[int] = 500,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.capital_flow import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u6982\u5ff5\u200b\u677f\u5757\u200b\n        data = PlateCode(plate_type=\"\u200b\u6982\u5ff5\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u5730\u533a\u200b\u677f\u5757\u200b\n        data = PlateCode(plate_type=\"\u200b\u5730\u533a\u200b\").load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b\n        data = PlateCode(plate_type=\"\u200b\u884c\u4e1a\u200b\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        plate_type: \u200b\u677f\u5757\u200b\u7c7b\u578b\u200b, `[\"\u200b\u884c\u4e1a\u200b\", \"\u200b\u6982\u5ff5\u200b\", \"\u200b\u5730\u533a\u200b\"]`\n        size: \u200b\u8fd4\u56de\u200b\u6570\u636e\u91cf\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.plate_type = plate_type\n    self.size = size\n    self.mapping = PlateCodeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u884c\u4e1a\u200b\u3001\u200b\u6982\u5ff5\u200b\u3001\u200b\u5730\u533a\u200b\u7f16\u7801\u6570\u636e\u200b\", )\n</code></pre>"},{"location":"api/stock/plate_mapping/#wisecon.stock.plate_mapping.industry.IndustryCodeMapping","title":"IndustryCodeMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u884c\u4e1a\u200b\u7f16\u7801\u6570\u636e\u200b</p>"},{"location":"api/stock/plate_mapping/#wisecon.stock.plate_mapping.industry.IndustryCode","title":"IndustryCode","text":"<pre><code>IndustryCode(\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u884c\u4e1a\u200b\u7f16\u7801\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.plate_mapping import *\n\n# 1. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\ndata = IndustryCode().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\plate_mapping\\industry.py</code> <pre><code>def __init__(\n        self,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.plate_mapping import *\n\n        # 1. \u200b\u67e5\u8be2\u200b\u6709\u200b\u54ea\u4e9b\u200b\u884c\u4e1a\u200b\u7f16\u7801\u200b\n        data = IndustryCode().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.mapping = IndustryCodeMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u884c\u4e1a\u200b\u7f16\u7801\u6570\u636e\u200b\", )\n</code></pre>"},{"location":"api/stock/ranking/","title":"\u80a1\u7968\u200b\u6392\u884c","text":""},{"location":"api/stock/ranking/#wisecon.stock.ranking.stock_rank_detail.StockRankDetailMapping","title":"StockRankDetailMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e2a\u80a1\u200b\u4e0a\u699c\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.stock_rank_detail.StockRankDetail","title":"StockRankDetail","text":"<pre><code>StockRankDetail(\n    market: Optional[\n        Literal[\n            \"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\",\n            \"\u200b\u79d1\u521b\u677f\u200b\",\n            \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\",\n            \"\u200b\u521b\u4e1a\u677f\u200b\",\n            \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\",\n        ]\n    ] = None,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e2a\u80a1\u200b\u4e0a\u699c\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = StockRankDetail().load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[Literal['\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b', '\u200b\u79d1\u521b\u677f\u200b', '\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b', '\u200b\u521b\u4e1a\u677f\u200b', '\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b']]</code> <p>\u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b, \u200b\u53ef\u9009\u503c\u200b: \u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u79d1\u521b\u677f\u200b, \u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u521b\u4e1a\u677f\u200b, \u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\stock_rank_detail.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[Literal[\"\u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\", \"\u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b\"]] = None,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = StockRankDetail().load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u7c7b\u578b\u200b, \u200b\u53ef\u9009\u503c\u200b: \u200b\u6caa\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u79d1\u521b\u677f\u200b, \u200b\u6df1\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u521b\u4e1a\u677f\u200b, \u200b\u4eac\u200b\u5e02\u200bA\u200b\u80a1\u200b, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        date: \u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.size = size\n    self.mapping = StockRankDetailMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u9f99\u864e\u699c\u200b\u8be6\u60c5\u200b\",)\n    self.conditions = []\n    self.validate_date_format(date=[date, start_date, end_date])\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.stock_rank_statistic.StockRankStatisticMapping","title":"StockRankStatisticMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e2a\u80a1\u200b\u4e0a\u699c\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.stock_rank_statistic.StockRankStatistic","title":"StockRankStatistic","text":"<pre><code>StockRankStatistic(\n    statistics_cycle: Literal[\n        \"1m\", \"3m\", \"6m\", \"12m\"\n    ] = \"1m\",\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e2a\u80a1\u200b\u4e0a\u699c\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = StockRankStatistic(statistics_cycle=\"1m\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>statistics_cycle</code> <code>Literal['1m', '3m', '6m', '12m']</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m</p> <code>'1m'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\stock_rank_statistic.py</code> <pre><code>def __init__(\n        self,\n        statistics_cycle: Literal[\"1m\", \"3m\", \"6m\", \"12m\"] = \"1m\",\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = StockRankStatistic(statistics_cycle=\"1m\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        statistics_cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.statistics_cycle = statistics_cycle\n    self.size = size\n    self.mapping = StockRankStatisticMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2a\u80a1\u200b\u4e0a\u699c\u200b\u7edf\u8ba1\u200b\",)\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.institution_seat.InstitutionSeatMapping","title":"InstitutionSeatMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u673a\u6784\u200b\u5e2d\u4f4d\u200b\u8ffd\u8e2a\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.institution_seat.InstitutionSeat","title":"InstitutionSeat","text":"<pre><code>InstitutionSeat(\n    statistics_cycle: Literal[\n        \"1m\", \"3m\", \"6m\", \"12m\"\n    ] = \"1m\",\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u673a\u6784\u200b\u5e2d\u4f4d\u200b\u8ffd\u8e2a\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = InstitutionSeat(statistics_cycle=\"1m\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>statistics_cycle</code> <code>Literal['1m', '3m', '6m', '12m']</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m</p> <code>'1m'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\institution_seat.py</code> <pre><code>def __init__(\n        self,\n        statistics_cycle: Literal[\"1m\", \"3m\", \"6m\", \"12m\"] = \"1m\",\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = InstitutionSeat(statistics_cycle=\"1m\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        statistics_cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.statistics_cycle = statistics_cycle\n    self.size = size\n    self.mapping = InstitutionSeatMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u673a\u6784\u200b\u5e2d\u4f4d\u200b\u8ffd\u8e2a\u200b\",)\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.institution_trade.InstitutionTradeRankMapping","title":"InstitutionTradeRankMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u673a\u6784\u200b\u4e70\u5356\u200b\u6bcf\u65e5\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.institution_trade.InstitutionTradeRank","title":"InstitutionTradeRank","text":"<pre><code>InstitutionTradeRank(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u673a\u6784\u200b\u4e70\u5356\u200b\u6bcf\u65e5\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = InstitutionTradeRank(start_date=\"2024-10-23\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\institution_trade.py</code> <pre><code>def __init__(\n        self,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = InstitutionTradeRank(start_date=\"2024-10-23\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.start_date = start_date\n    self.end_date = end_date\n    self.size = size\n    self.mapping = InstitutionTradeRankMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u673a\u6784\u200b\u4e70\u5356\u200b\u6bcf\u65e5\u200b\u7edf\u8ba1\u200b\",)\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date], _format=\"%Y-%m-%d\")\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_active.DepartmentActiveMapping","title":"DepartmentActiveMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u6bcf\u65e5\u200b\u6d3b\u8dc3\u200b\u8425\u4e1a\u90e8\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_active.DepartmentActive","title":"DepartmentActive","text":"<pre><code>DepartmentActive(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    date: Optional[str] = None,\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u6bcf\u65e5\u200b\u6d3b\u8dc3\u200b\u8425\u4e1a\u90e8\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = DepartmentActive(date=\"2024-10-28\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\department_active.py</code> <pre><code>def __init__(\n        self,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        date: Optional[str] = None,\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = DepartmentActive(date=\"2024-10-28\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        date: \u200b\u65e5\u671f\u200b, \u200b\u683c\u5f0f\u200b: yyyy-MM-dd, \u200b\u9ed8\u8ba4\u503c\u200b: None\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.start_date = start_date\n    self.end_date = end_date\n    self.date = date\n    self.size = size\n    self.mapping = DepartmentActiveMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u6bcf\u65e5\u200b\u6d3b\u8dc3\u200b\u8425\u4e1a\u90e8\u200b\",)\n    self.conditions = []\n    self.validate_date_format(date=[date, start_date, end_date])\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_rank.DepartmentRankMapping","title":"DepartmentRankMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u8425\u4e1a\u90e8\u200b\u6392\u884c\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_rank.DepartmentRank","title":"DepartmentRank","text":"<pre><code>DepartmentRank(\n    statistics_cycle: Literal[\n        \"1m\", \"3m\", \"6m\", \"12m\"\n    ] = \"1m\",\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u8425\u4e1a\u90e8\u200b\u6392\u884c\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = DepartmentRank(statistics_cycle=\"1m\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>statistics_cycle</code> <code>Literal['1m', '3m', '6m', '12m']</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m</p> <code>'1m'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\department_rank.py</code> <pre><code>def __init__(\n        self,\n        statistics_cycle: Literal[\"1m\", \"3m\", \"6m\", \"12m\"] = \"1m\",\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = DepartmentRank(statistics_cycle=\"1m\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        statistics_cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.statistics_cycle = statistics_cycle\n    self.size = size\n    self.mapping = DepartmentRankMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u8425\u4e1a\u90e8\u200b\u6392\u884c\u200b\",)\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_statistic.DepartmentStatisticMapping","title":"DepartmentStatisticMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u8425\u4e1a\u90e8\u200b\u7edf\u8ba1\u200b</p>"},{"location":"api/stock/ranking/#wisecon.stock.ranking.department_statistic.DepartmentStatistic","title":"DepartmentStatistic","text":"<pre><code>DepartmentStatistic(\n    statistics_cycle: Literal[\n        \"1m\", \"3m\", \"6m\", \"12m\"\n    ] = \"1m\",\n    size: Optional[int] = 20,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u8425\u4e1a\u90e8\u200b\u7edf\u8ba1\u200b</p> Notes <pre><code>from wisecon.stock.ranking import *\n\ndata = DepartmentStatistic(statistics_cycle=\"1m\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>statistics_cycle</code> <code>Literal['1m', '3m', '6m', '12m']</code> <p>\u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m</p> <code>'1m'</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u6570\u636e\u200b\u6761\u6570\u200b</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\ranking\\department_statistic.py</code> <pre><code>def __init__(\n        self,\n        statistics_cycle: Literal[\"1m\", \"3m\", \"6m\", \"12m\"] = \"1m\",\n        size: Optional[int] = 20,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        from wisecon.stock.ranking import *\n\n        data = DepartmentStatistic(statistics_cycle=\"1m\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        statistics_cycle: \u200b\u7edf\u8ba1\u200b\u5468\u671f\u200b, \u200b\u53ef\u9009\u503c\u200b: 1m, 3m, 6m, 12m, \u200b\u9ed8\u8ba4\u503c\u200b: 1m\n        size: \u200b\u6570\u636e\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.statistics_cycle = statistics_cycle\n    self.size = size\n    self.mapping = DepartmentStatisticMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u8425\u4e1a\u90e8\u200b\u7edf\u8ba1\u200b\",)\n    self.conditions = []\n</code></pre>"},{"location":"api/stock/tick/","title":"Tick","text":""},{"location":"api/stock/tick/#wisecon.stock.tick.tick.TickMapping","title":"TickMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u80a1\u7968\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b</p>"},{"location":"api/stock/tick/#wisecon.stock.tick.tick.Tick","title":"Tick","text":"<pre><code>Tick(\n    code: Annotated[Optional[str], \"\", False] = None,\n    verbose: Annotated[Optional[bool], \"\", False] = False,\n    logger: Annotated[Optional[Callable], \"\", False] = None,\n    **kwargs: Annotated[Any, \"\", False]\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u80a1\u7968\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b</p> <p>\u200b\u80a1\u7968\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b</p> Notes <pre><code>from wisecon.stock.tick import Tick\n\n# \u200b\u67e5\u8be2\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b301618\u200b\u7684\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b\ndata = Tick(code=\"301618\").load()\nprint(data.to_frame(chinese_column=True))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Annotated[Optional[str], '', False]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>verbose</code> <code>Annotated[Optional[bool], '', False]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Annotated[Optional[Callable], '', False]</code> <p>\u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b</p> <code>None</code> <code>**kwargs</code> <code>Annotated[Any, '', False]</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\tick\\tick.py</code> <pre><code>def __init__(\n        self,\n        code: Annotated[Optional[str], \"\", False] = None,\n        verbose: Annotated[Optional[bool], \"\", False] = False,\n        logger: Annotated[Optional[Callable], \"\", False] = None,\n        **kwargs: Annotated[Any, \"\", False],\n):\n    \"\"\"\n    \u200b\u80a1\u7968\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b\n\n    Notes:\n        ```python\n        from wisecon.stock.tick import Tick\n\n        # \u200b\u67e5\u8be2\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b301618\u200b\u7684\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b\n        data = Tick(code=\"301618\").load()\n        print(data.to_frame(chinese_column=True))\n        ```\n\n    Args:\n        code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u65e5\u5fd7\u200b\u6253\u5370\u51fd\u6570\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.code = code\n    self.mapping = TickMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u80a1\u7968\u200b\u5b9e\u65f6\u200btick\u200b\u6570\u636e\u200b\")\n</code></pre>"},{"location":"api/stock/valuation/","title":"\u4ef7\u503c\u200b\u5206\u6790","text":""},{"location":"api/stock/valuation/#_2","title":"\u4ef7\u503c\u200b\u5206\u6790\u200b\u76f8\u5173\u200b\u6982\u5ff5","text":"<p>TTM(Trailing Twelve Months)</p> <ul> <li> <p>\u200b\u5b9a\u4e49\u200b: TTM\uff08Trailing Twelve Months\uff09\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u8fc7\u53bb\u200b12\u200b\u4e2a\u200b\u6708\u200b\u7684\u200b\u8d22\u52a1\u6570\u636e\u200b\uff0c\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u516c\u53f8\u8d22\u52a1\u200b\u8868\u73b0\u200b\u7684\u200b\u6700\u65b0\u200b\u60c5\u51b5\u200b\u3002TTM\u200b\u6570\u636e\u200b\u76f8\u8f83\u200b\u4e8e\u200b\u5e74\u5ea6\u62a5\u544a\u200b\u6570\u636e\u200b\u66f4\u5177\u200b\u65f6\u6548\u6027\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53cd\u6620\u200b\u4e86\u200b\u6700\u8fd1\u200b\u7684\u200b\u8d22\u52a1\u72b6\u51b5\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4ec5\u4ec5\u200b\u662f\u200b\u8fc7\u53bb\u200b\u4e00\u5e74\u200b\u7684\u200b\u6574\u4f53\u200b\u8868\u73b0\u200b\u3002</p> </li> <li> <p>\u200b\u5e94\u7528\u200b: TTM\u200b\u5e38\u7528\u200b\u4e8e\u200b\u591a\u4e2a\u200b\u8d22\u52a1\u6307\u6807\u200b\u7684\u200b\u8ba1\u7b97\u200b\uff1a</p> <ul> <li>PE(TTM): \u200b\u5e02\u76c8\u7387\u200b\uff0c\u200b\u57fa\u4e8e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u7684\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\u3002</li> <li>\u200b\u5e02\u9500\u7387\u200b(TTM): \u200b\u57fa\u4e8e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u7684\u200b\u8425\u4e1a\u200b\u6536\u5165\u200b\u3002</li> <li>\u200b\u5e02\u73b0\u200b\u7387\u200b(TTM): \u200b\u57fa\u4e8e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u7684\u200b\u6bcf\u80a1\u200b\u73b0\u91d1\u6d41\u91cf\u200b\u3002</li> </ul> </li> </ul> <p>PE(TTM)</p> <p>\u200b\u5b9a\u4e49\u200b: PE\uff08\u200b\u5e02\u76c8\u7387\u200b\uff09\u200b\u662f\u200b\u6307\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b\u4e0e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\uff08EPS\uff09\u200b\u603b\u548c\u200b\u7684\u200b\u6bd4\u503c\u200b\u3002</p> \\[PE(TTM)=\\frac{\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b}{\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b(TTM)}\\] <ul> <li>PE(TTM) \u200b\u7528\u4e8e\u200b\u8861\u91cf\u200b\u516c\u53f8\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b\u76f8\u5bf9\u200b\u4e8e\u200b\u5176\u200b\u76c8\u5229\u200b\u80fd\u529b\u200b\u7684\u200b\u9ad8\u4f4e\u200b\u3002</li> <li>\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200bPE\u200b\u53ef\u80fd\u200b\u610f\u5473\u7740\u200b\u80a1\u7968\u200b\u88ab\u200b\u4f4e\u4f30\u200b\uff0c\u200b\u800c\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200bPE\u200b\u53ef\u80fd\u200b\u8868\u793a\u200b\u5e02\u573a\u200b\u5bf9\u200b\u516c\u53f8\u200b\u672a\u6765\u200b\u589e\u957f\u200b\u7684\u200b\u9884\u671f\u200b\u8f83\u200b\u9ad8\u200b\u3002</li> </ul> <p>PE(\u200b\u9759\u200b)</p> <p>\u200b\u5b9a\u4e49\u200b: PE\uff08\u200b\u9759\u6001\u200b\u5e02\u76c8\u7387\u200b\uff09\u200b\u662f\u200b\u6307\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b\u4e0e\u200b\u6700\u65b0\u200b\u5e74\u62a5\u200b\u4e2d\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\u7684\u200b\u6bd4\u503c\u200b\u3002</p> \\[PE(\u200b\u9759\u200b)=\\frac{\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b}{\u200b\u6700\u65b0\u200b\u5e74\u62a5\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b}\\] <ul> <li>\u200b\u8fd9\u4e2a\u200b\u6307\u6807\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u6700\u65b0\u200b\u8d22\u52a1\u6570\u636e\u200b\u7684\u200b\u76c8\u5229\u200b\u80fd\u529b\u200b\u8bc4\u4f30\u200b\u3002</li> <li>\u200b\u5728\u200b\u6bd4\u8f83\u200b\u4e0d\u540c\u200b\u516c\u53f8\u200b\u7684\u200bPE\u200b\u65f6\u200b\uff0c\u200b\u4f7f\u7528\u200b\u9759\u6001\u200bPE\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u76f4\u63a5\u200b\u53cd\u6620\u200b\u516c\u53f8\u200b\u8d22\u52a1\u72b6\u51b5\u200b\u3002</li> </ul> <p>\u200b\u5e02\u9500\u7387\u200b(TTM)</p> <p>\u200b\u5b9a\u4e49\u200b: \u200b\u5e02\u9500\u7387\u200b\u662f\u200b\u603b\u200b\u5e02\u503c\u200b\u4e0e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u8425\u4e1a\u200b\u6536\u5165\u200b\u603b\u548c\u200b\u7684\u200b\u6bd4\u503c\u200b\u3002</p> \\[\u200b\u5e02\u9500\u7387\u200b(TTM)=\\frac{\u200b\u603b\u200b\u5e02\u503c\u200b}{\u200b\u8425\u4e1a\u200b\u6536\u5165\u200b(TTM)}\\] <ul> <li>\u200b\u5e02\u9500\u7387\u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u516c\u53f8\u200b\u9500\u552e\u6536\u5165\u200b\u7684\u200b\u4ef7\u503c\u200b\uff0c\u200b\u5c24\u5176\u200b\u9002\u7528\u200b\u4e8e\u200b\u5c1a\u672a\u200b\u76c8\u5229\u200b\u7684\u200b\u516c\u53f8\u200b\u3002</li> <li>\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u5e02\u200b\u9500\u7387\u200b\u53ef\u80fd\u200b\u8868\u793a\u200b\u516c\u53f8\u200b\u88ab\u200b\u4f4e\u4f30\u200b\uff0c\u200b\u6216\u200b\u5176\u200b\u9500\u552e\u200b\u8868\u73b0\u200b\u4e0d\u4f73\u200b\u3002</li> </ul> <p>\u200b\u603b\u200b\u5e02\u503c\u200b\u4e0e\u200b\u524d\u200b\u56db\u5b63\u5ea6\u200b\u8425\u4e1a\u200b\u6536\u5165\u200b\u603b\u548c\u200b\u7684\u200b\u6bd4\u503c\u200b</p> <p>\u200b\u5e02\u73b0\u200b\u7387\u200b(TTM)</p> <p>\u200b\u5b9a\u4e49\u200b: \u200b\u5e02\u73b0\u200b\u7387\u200b\u662f\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b\u4e0e\u200b\u8fc7\u53bb\u200b\u56db\u4e2a\u200b\u5b63\u5ea6\u200b\u6bcf\u80a1\u200b\u73b0\u91d1\u6d41\u91cf\u200b\u603b\u548c\u200b\u7684\u200b\u6bd4\u503c\u200b\u3002</p> \\[\u200b\u5e02\u73b0\u200b\u7387\u200b(TTM)=\\frac{\u200b\u5f53\u524d\u200b\u80a1\u4ef7\u200b}{\u200b\u6bcf\u80a1\u200b\u73b0\u91d1\u6d41\u91cf\u200b(TTM)}\\] <ul> <li>\u200b\u5e02\u73b0\u200b\u7387\u200b\u8bc4\u4f30\u200b\u516c\u53f8\u200b\u80a1\u4ef7\u200b\u76f8\u5bf9\u200b\u4e8e\u200b\u5176\u200b\u73b0\u91d1\u6d41\u200b\u7684\u200b\u4ef7\u503c\u200b\uff0c\u200b\u53cd\u6620\u200b\u4e86\u200b\u516c\u53f8\u200b\u7684\u200b\u73b0\u91d1\u200b\u751f\u6210\u200b\u80fd\u529b\u200b\u3002</li> <li>\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u5e02\u200b\u73b0\u7387\u200b\u53ef\u80fd\u200b\u9884\u793a\u200b\u7740\u200b\u516c\u53f8\u200b\u88ab\u200b\u4f4e\u4f30\u200b\u6216\u200b\u73b0\u91d1\u6d41\u200b\u8868\u73b0\u200b\u826f\u597d\u200b\u3002</li> </ul> <p>PEG\u200b\u503c\u200b</p> <p>\u200b\u5b9a\u4e49\u200b: PEG\u200b\u503c\u200b\u662f\u200bPE(TTM)\u200b\u4e0e\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b\u8fd1\u200b3\u200b\u5e74\u200b\u590d\u5408\u200b\u589e\u957f\u7387\u200b\u7684\u200b\u6bd4\u503c\u200b\u3002</p> \\[PEG=\\frac{PE(TTM)}{EPS\u200b\u590d\u5408\u200b\u5e74\u589e\u957f\u7387\u200b}\\] <ul> <li>PEG\u200b\u503c\u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u516c\u53f8\u200b\u6210\u957f\u6027\u200b\u4e0e\u200b\u5f53\u524d\u200b\u4f30\u503c\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</li> <li>\u200b\u4e00\u822c\u200b\u8ba4\u4e3a\u200b\uff0cPEG\u200b\u503c\u200b\u5c0f\u4e8e\u200b1\u200b\u8868\u793a\u200b\u516c\u53f8\u200b\u88ab\u200b\u4f4e\u4f30\u200b\uff0c\u200b\u53cd\u4e4b\u200b\u5219\u200b\u53ef\u80fd\u200b\u88ab\u200b\u9ad8\u4f30\u200b\u3002</li> </ul>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.stock.StockValuationMapping","title":"StockValuationMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e2a\u80a1\u200b\u4f30\u503c\u200b</p>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.stock.StockValuation","title":"StockValuation","text":"<pre><code>StockValuation(\n    security_code: Optional[str] = None,\n    industry_code: Optional[str] = None,\n    date: Optional[str] = None,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e2a\u80a1\u200b\u4f30\u503c\u200b</p> Notes <pre><code># 1. \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\ndata = StockValuation(date=\"2024-09-30\").load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\ndata = StockValuation(date=\"2024-09-30\", industry_code=\"016023\").load()\ndata.to_frame(chinese_column=True)\n\n# 3. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u53ea\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\ndata = StockValuation(start_data=\"2024-08-30\", code=\"000059\").load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_code</code> <code>Optional[str]</code> <p>\u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>industry_code</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u4ea4\u6613\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\valuation\\stock.py</code> <pre><code>def __init__(\n        self,\n        security_code: Optional[str] = None,\n        industry_code: Optional[str] = None,\n        date: Optional[str] = None,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        # 1. \u200b\u67e5\u8be2\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\n        data = StockValuation(date=\"2024-09-30\").load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u884c\u4e1a\u200b\u5168\u90e8\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\n        data = StockValuation(date=\"2024-09-30\", industry_code=\"016023\").load()\n        data.to_frame(chinese_column=True)\n\n        # 3. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u53ea\u200b\u80a1\u7968\u200b\u7684\u200b\u4f30\u503c\u200b\u4fe1\u606f\u200b\n        data = StockValuation(start_data=\"2024-08-30\", code=\"000059\").load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        security_code: \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b\n        industry_code: \u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b\n        date: \u200b\u4ea4\u6613\u200b\u65e5\u671f\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.security_code = security_code\n    self.industry_code = industry_code\n    self.date = date\n    self.start_date = start_date\n    self.end_date = end_date\n    self.size = size\n    self.mapping = StockValuationMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u4e2a\u80a1\u200b\u4f30\u503c\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date, date])\n</code></pre>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.industry.IndustryValuationMapping","title":"IndustryValuationMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b</p>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.industry.IndustryValuation","title":"IndustryValuation","text":"<pre><code>IndustryValuation(\n    industry_code: Optional[str] = None,\n    date: Optional[str] = None,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u4e0a\u5e02\u516c\u53f8\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b</p> Notes <pre><code># 1. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u65e5\u671f\u200b\u5168\u90e8\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b\ndata = IndustryValuation(date=\"2024-10-10\").load()\ndata.to_frame(chinese_column=True)\n\n# 2. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u5468\u671f\u200b\u67d0\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b\ndata = IndustryValuation(\n    start_date=\"2024-10-01\", end_date=\"2024-10-20\",\n    limit=50, industry_code=\"016017\"\n).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>industry_code</code> <code>Optional[str]</code> <p>\u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b</p> <code>None</code> <code>date</code> <code>Optional[str]</code> <p>\u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\valuation\\industry.py</code> <pre><code>def __init__(\n        self,\n        industry_code: Optional[str] = None,\n        date: Optional[str] = None,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        # 1. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u65e5\u671f\u200b\u5168\u90e8\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b\n        data = IndustryValuation(date=\"2024-10-10\").load()\n        data.to_frame(chinese_column=True)\n\n        # 2. \u200b\u67e5\u8be2\u200b\u67d0\u200b\u5468\u671f\u200b\u67d0\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b\n        data = IndustryValuation(\n            start_date=\"2024-10-01\", end_date=\"2024-10-20\",\n            limit=50, industry_code=\"016017\"\n        ).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        industry_code: \u200b\u884c\u4e1a\u200b\u4ee3\u7801\u200b\n        date: \u200b\u67e5\u8be2\u200b\u65e5\u671f\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.industry_code = industry_code\n    self.date = date\n    self.start_date = start_date\n    self.end_date = end_date\n    self.size = size\n    self.mapping = IndustryValuationMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date, date], )\n    self.request_set(description=\"\u200b\u4e0a\u5e02\u516c\u53f8\u200b\u884c\u4e1a\u200b\u4f30\u503c\u200b\")\n</code></pre>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.market.MarketValuationMapping","title":"MarketValuationMapping","text":"<p>\u200b\u5b57\u200b\u6bb5\u200b\u6620\u5c04\u200b \u200b\u5e02\u573a\u200b\u6574\u4f53\u200b\u4f30\u503c\u200b</p>"},{"location":"api/stock/valuation/#wisecon.stock.valuation.market.MarketValuation","title":"MarketValuation","text":"<pre><code>MarketValuation(\n    market: Optional[\n        Literal[\n            \"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\",\n            \"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\",\n            \"\u200b\u79d1\u521b\u677f\u200b\",\n            \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\",\n            \"\u200b\u521b\u4e1a\u677f\u200b\",\n        ]\n    ] = \"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\",\n    start_date: Optional[str] = \"2020-10-08\",\n    end_date: Optional[str] = None,\n    size: Optional[int] = 50,\n    verbose: Optional[bool] = False,\n    logger: Optional[Callable] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u67e5\u8be2\u200b \u200b\u5e02\u573a\u200b\u6574\u4f53\u200b\u4f30\u503c\u200b <pre><code>{\n    \"000300\": \"\u200b\u6caa\u200b\u6df1\u200b300\",\n    \"000001\": \"\u200b\u4e0a\u8bc1\u6307\u6570\u200b\",\n    \"000688\": \"\u200b\u79d1\u521b\u200b50\",\n    \"399001\": \"\u200b\u6df1\u8bc1\u200b\u6307\u6570\u200b\",\n    \"399006\": \"\u200b\u521b\u4e1a\u677f\u200b\u6307\u6570\u200b\",\n}\n</code></pre></p> Notes <pre><code>data = MarketValuation(market=market, size=5).load()\ndata.to_frame(chinese_column=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>Optional[Literal['\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b', '\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b', '\u200b\u79d1\u521b\u677f\u200b', '\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b', '\u200b\u521b\u4e1a\u677f\u200b']]</code> <p>\u200b\u5e02\u573a\u200b\u540d\u79f0\u200b</p> <code>'\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b'</code> <code>start_date</code> <code>Optional[str]</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>'2020-10-08'</code> <code>end_date</code> <code>Optional[str]</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>\u200b\u8fd4\u56de\u200b\u6761\u6570\u200b</p> <code>50</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b</p> <code>False</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\stock\\valuation\\market.py</code> <pre><code>def __init__(\n        self,\n        market: Optional[Literal[\"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\", \"\u200b\u6caa\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u79d1\u521b\u677f\u200b\", \"\u200b\u6df1\u5e02\u200b\u4e3b\u677f\u200b\", \"\u200b\u521b\u4e1a\u677f\u200b\",]] = \"\u200b\u6caa\u200b\u6df1\u200b\u4e24\u5e02\u200b\",\n        start_date: Optional[str] = \"2020-10-08\",\n        end_date: Optional[str] = None,\n        size: Optional[int] = 50,\n        verbose: Optional[bool] = False,\n        logger: Optional[Callable] = None,\n        **kwargs: Any\n):\n    \"\"\"\n    Notes:\n        ```python\n        data = MarketValuation(market=market, size=5).load()\n        data.to_frame(chinese_column=True)\n        ```\n\n    Args:\n        market: \u200b\u5e02\u573a\u200b\u540d\u79f0\u200b\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n        size: \u200b\u8fd4\u56de\u200b\u6761\u6570\u200b\n        verbose: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65e5\u5fd7\u200b\n        logger: \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.market = market\n    self.start_date = start_date\n    self.end_date = end_date\n    self.size = size\n    self.mapping = MarketValuationMapping()\n    self.verbose = verbose\n    self.logger = logger\n    self.kwargs = kwargs\n    self.request_set(description=\"\u200b\u5e02\u573a\u200b\u6574\u4f53\u200b\u4f30\u503c\u200b\")\n    self.conditions = []\n    self.validate_date_format(date=[start_date, end_date], )\n</code></pre>"},{"location":"api/text/news/","title":"\u65b0\u95fb\u200b\u6570\u636e","text":""},{"location":"api/text/news/#_2","title":"\u83b7\u53d6\u200b\u65b0\u95fb\u200b\u5217\u8868","text":"<p>\u200b\u53ef\u200b\u9009\u62e9\u200b\u65b0\u95fb\u200b\u4e3b\u9898\u200b</p> <p><code>[\"\u200b\u8d22\u7ecf\u200b\u5bfc\u8bfb\u200b\", \"\u200b\u4ea7\u7ecf\u65b0\u95fb\u200b\", \"\u200b\u56fd\u5185\u200b\u7ecf\u6d4e\u200b\", \"\u200b\u56fd\u9645\u200b\u7ecf\u6d4e\u200b\", \"\u200b\u8bc1\u5238\u200b\u805a\u7126\u200b\", \"\u200b\u7eb5\u6df1\u200b\u8c03\u67e5\u200b\", \"\u200b\u7ecf\u6d4e\u200b\u65f6\u8bc4\u200b\", \"\u200b\u4ea7\u4e1a\u200b\u900f\u89c6\u200b\", \"\u200b\u5546\u4e1a\u200b\u89c2\u5bdf\u200b\", \"\u200b\u80a1\u5e02\u200b\u8bc4\u8bba\u200b\", \"\u200b\u5546\u4e1a\u8d44\u8baf\u200b\", \"\u200b\u521b\u4e1a\u200b\u7814\u7a76\u200b\", \"A\u200b\u80a1\u200b\u516c\u53f8\u200b\", \"\u200b\u6e2f\u80a1\u200b\u516c\u53f8\u200b\", \"\u200b\u4e2d\u6982\u200b\u80a1\u200b\u516c\u53f8\u200b\", \"\u200b\u6d77\u5916\u200b\u516c\u53f8\u200b\",]</code></p> <p>\u200b\u793a\u4f8b\u200b</p> <pre><code>from zlai.tools.report.news import *\n\nnews = News(size=20)\ndata = news.load_data()\nprint(data.metadata)\nprint(data.to_frame(columns=data.metadata.get(\"columns\")).to_markdown())\n</code></pre>"},{"location":"api/text/news/#_3","title":"\u83b7\u53d6\u200b\u65b0\u95fb\u200b\u8be6\u60c5","text":"<p>\u200b\u793a\u4f8b\u200b</p> <pre><code>url = \"http://finance.eastmoney.com/news/1344,202409293194209890.html\"\nnews = News(size=10)\ncontent = news.load_content(url)\nprint(content)\n</code></pre>"},{"location":"api/text/news/#_4","title":"\u83b7\u53d6\u200b\u65b0\u95fb\u200b\u4e3b\u9898","text":"<p>\u200b\u793a\u4f8b\u200b</p> <pre><code>from zlai.tools.report.news import *\n\nnews = News(size=10, theme=\"\u200b\u56fd\u9645\u200b\u7ecf\u6d4e\u200b\")\ndata = news.load_data()\nprint(data.metadata)\nprint(data.to_frame(columns=data.metadata.get(\"columns\")))\n</code></pre>"},{"location":"api/text/reports/","title":"\u7814\u62a5\u200b\u6570\u636e","text":""},{"location":"api/text/reports/#_2","title":"\u7814\u62a5\u200b\u5206\u7c7b","text":""},{"location":"api/text/reports/#_3","title":"\u6982\u5ff5\u200b\u677f\u5757","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nmapping = ReportMapping()\nconception = mapping.list_conception()\nprint(conception.to_frame())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    |   bkCode |   fubkCode | bkName     |   publishCode | firstLetter   |\n|---:|---------:|-----------:|:-----------|--------------:|:--------------|\n|  0 |     1179 |        007 | \u200b\u623f\u5c4b\u200b\u68c0\u6d4b\u200b   |        007541 | F             |\n|  1 |      590 |        007 | \u200b\u897f\u90e8\u200b\u5927\u200b\u5f00\u53d1\u200b |        007070 | X             |\n|  2 |     1178 |        007 | AI\u200b\u773c\u955c\u200b     |        007540 | A             |\n|  3 |     1177 |        007 | \u200b\u8363\u8000\u200b\u6982\u5ff5\u200b   |        007539 | R             |\n|  4 |     1176 |        007 | \u200b\u8d22\u7a0e\u200b\u6570\u5b57\u5316\u200b |        007538 | C             |\n</code></pre>"},{"location":"api/text/reports/#_4","title":"\u5730\u57df\u200b\u677f\u5757","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nmapping = ReportMapping()\ndistrict = mapping.list_district()\nprint(district.to_frame())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    |   bkCode |   fubkCode | bkName   |   publishCode | firstLetter   |\n|---:|---------:|-----------:|:---------|--------------:|:--------------|\n|  0 |   778003 |        020 | \u200b\u6e56\u5357\u200b\u677f\u5757\u200b |        020013 | H             |\n|  1 |   778002 |        020 | \u200b\u6e56\u5317\u200b\u677f\u5757\u200b |        020012 | H             |\n|  2 |   778001 |        020 | \u200b\u6cb3\u5357\u200b\u677f\u5757\u200b |        020010 | H             |\n|  3 |   772001 |        020 | \u200b\u91cd\u5e86\u200b\u677f\u5757\u200b |        020031 | C             |\n|  4 |   776003 |        020 | \u200b\u6d59\u6c5f\u200b\u677f\u5757\u200b |        020030 | Z             |\n</code></pre>"},{"location":"api/text/reports/#_5","title":"\u884c\u4e1a\u200b\u677f\u5757","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nmapping = ReportMapping()\nindustry = mapping.list_industry()\nprint(industry.to_frame())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    |   bkCode |   fubkCode | bkName   |   publishCode | firstLetter   |\n|---:|---------:|-----------:|:---------|--------------:|:--------------|\n|  0 |      546 |        016 | \u200b\u73bb\u7483\u200b\u73bb\u7ea4\u200b |        016044 | B             |\n|  1 |      545 |        016 | \u200b\u901a\u7528\u8bbe\u5907\u200b |        016043 | T             |\n|  2 |      539 |        016 | \u200b\u7efc\u5408\u200b\u884c\u4e1a\u200b |        016042 | Z             |\n|  3 |      538 |        016 | \u200b\u5316\u5b66\u200b\u5236\u54c1\u200b |        016041 | H             |\n|  4 |     1046 |        016 | \u200b\u6e38\u620f\u200b     |        016087 | Y             |\n</code></pre>"},{"location":"api/text/reports/#_6","title":"\u7814\u62a5\u200b\u83b7\u53d6","text":""},{"location":"api/text/reports/#_7","title":"\u5238\u5546\u200b\u6668\u62a5","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\ncolumns = [\"orgName\", \"industryName\", \"title\", \"researcher\", \"publishDate\", \"infoCode\"]\nreport = Report(report_type=\"\u200b\u5238\u5546\u200b\u6668\u62a5\u200b\", size=5, begin_time=\"2024-09-23\", end_time=\"2024-09-23\")\ndata = report.load_data()\nprint(data.to_frame()[columns].to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    | orgName              | industryName   | title                 | researcher   | publishDate             | infoCode             |\n|---:|:---------------------|:---------------|:----------------------|:-------------|:------------------------|:---------------------|\n|  0 | \u200b\u56fd\u91d1\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | \u200b\u56fd\u91d1\u6668\u200b\u8baf\u200b              | \u200b\u767d\u6653\u7426\u200b       | 2024-09-23 00:00:00.000 | AP202409231639990463 |\n|  1 | \u200b\u82f1\u5927\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b |                | \u200b\u91d1\u70b9\u200b\u7b56\u7565\u200b\u6668\u62a5\u200b\u2014\u200b\u6bcf\u5468\u200b\u62a5\u544a\u200b | \u200b\u60e0\u7965\u51e4\u200b       | 2024-09-23 00:00:00.000 | AP202409231639990126 |\n|  2 | \u200b\u82f1\u5927\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b |                | \u200b\u91d1\u70b9\u200b\u7b56\u7565\u200b\u6668\u62a5\u200b\u2014\u200b\u6bcf\u65e5\u200b\u62a5\u544a\u200b | \u200b\u60e0\u7965\u51e4\u200b       | 2024-09-23 00:00:00.000 | AP202409231639990118 |\n|  3 | \u200b\u4e1c\u5174\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | \u200b\u4e1c\u5174\u200b\u6668\u62a5\u200b              | \u200b\u7814\u7a76\u6240\u200b       | 2024-09-23 00:00:00.000 | AP202409231639988120 |\n|  4 | \u200b\u5c71\u897f\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | \u200b\u7814\u7a76\u200b\u65e9\u200b\u89c2\u70b9\u200b            | \u200b\u674e\u53ec\u200b\u9e92\u200b       | 2024-09-23 00:00:00.000 | AP202409231639982347 |\n</code></pre>"},{"location":"api/text/reports/#_8","title":"\u7b56\u7565\u200b\u62a5\u544a","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\ncolumns = [\"orgName\", \"industryName\", \"title\", \"researcher\", \"publishDate\", \"infoCode\"]\nreport = Report(report_type=\"\u200b\u7b56\u7565\u200b\u62a5\u544a\u200b\", size=5, begin_time=\"2024-09-23\", end_time=\"2024-09-23\")\ndata = report.load_data()\nprint(data.to_frame()[columns].to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    | orgName              | industryName   | title                                                                                        | researcher   | publishDate             | infoCode             |\n|---:|:---------------------|:---------------|:---------------------------------------------------------------------------------------------|:-------------|:------------------------|:---------------------|\n|  0 | \u200b\u56fd\u4fe1\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | \u200b\u7b56\u7565\u200b\u5468\u200b\u601d\u8003\u200b\uff1a\u200b\u7b51\u5e95\u200b\u53cd\u5f39\u200b\u540e\u200b\uff0c\u200b\u8be5\u200b\u5173\u6ce8\u200b\u4ec0\u4e48\u200b\uff1f                                                         | \u200b\u9648\u51ef\u7545\u200b,\u200b\u738b\u5f00\u200b  | 2024-09-23 00:00:00.000 | AP202409231639991903 |\n|  1 | \u200b\u56fd\u91d1\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | A\u200b\u80a1\u200b\u6295\u8d44\u200b\u7b56\u7565\u200b\u5468\u62a5\u200b\uff1a\u200b\u7f8e\u56fd\u200b\u7ecf\u6d4e\u200b\u82e5\u200b\u786e\u8ba4\u200b\u201c\u200b\u786c\u7740\u9646\u200b\u201d\uff0c\u200b\u4e0b\u4e2a\u200b\u98ce\u9669\u200b\u5c06\u200b\u662f\u200b\u201c\u200b\u503a\u52a1\u200b\u8fdd\u7ea6\u200b\u201d                              | \u200b\u5f20\u5f1b\u200b         | 2024-09-23 00:00:00.000 | AP202409231639990462 |\n|  2 | \u200b\u5e02\u503c\u200b\u98ce\u4e91\u200b             |                | \u200b\u81ea\u8be9\u200b\u884c\u4e1a\u200b\u9886\u5148\u200b\uff0c\u200b\u5e02\u5360\u7387\u200b\u4e0d\u8db3\u200b1%\uff01\u200b\u91d1\u9675\u200b\u4f53\u80b2\u200b\uff1a\u200b\u4e0a\u5e02\u200b\u4e03\u5e74\u200b\u4ec5\u200b\u8d5a\u200b3\u200b\u4ebf\u200b\uff0c\u200b\u674e\u8001\u677f\u200b\u6c89\u8ff7\u200b\u77ed\u7ebf\u4ea4\u6613\u200b\u548c\u200b\u8fdd\u89c4\u200b\u51cf\u6301\u200b          | \u200b\u767d\u732b\u200b         | 2024-09-23 00:00:00.000 | AP202409231639987575 |\n|  3 | \u200b\u5e02\u503c\u200b\u98ce\u4e91\u200b             |                | \u200b\u6252\u7a83\u200b\u5bf9\u624b\u200b\u5546\u4e1a\u200b\u6570\u636e\u200b\uff0c\u200b\u521b\u59cb\u4eba\u200b\u83b7\u5211\u200b\u9690\u9000\u200b\u5e55\u540e\u200b\uff0c\u200b\u5143\u5149\u200b\u79d1\u6280\u200b\uff1a\u200b\u9ad8\u5ea6\u200b\u4f9d\u8d56\u200b\u201c\u200b\u8f66\u6765\u200b\u4e86\u200b\u201dAPP\uff0c\u200b\u6e2f\u80a1\u200bIPO\u200b\u662f\u200b\u8d77\u70b9\u200b\u8fd8\u662f\u200b\u7ec8\u70b9\u200b\uff1f | \u200b\u5e03\u5076\u200b         | 2024-09-23 00:00:00.000 | AP202409231639987574 |\n|  4 | \u200b\u4e2d\u539f\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b |                | \u200b\u5e02\u573a\u200b\u5206\u6790\u200b\uff1a\u200b\u94f6\u884c\u200b\u901a\u4fe1\u200b\u884c\u4e1a\u200b\u9886\u6da8\u200b A\u200b\u80a1\u200b\u5c0f\u5e45\u200b\u4e0a\u6da8\u200b                                                       | \u200b\u5f20\u521a\u200b         | 2024-09-23 00:00:00.000 | AP202409231639986547 |\n</code></pre>"},{"location":"api/text/reports/#_9","title":"\u4e2a\u80a1\u200b\u7814\u62a5","text":"<p>\u200b\u4ee3\u7801\u200b</p> <ul> <li><code>:param code:</code> \u200b\u80a1\u7968\u4ee3\u7801\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4e0d\u200b\u8fdb\u884c\u200b\u4e2a\u80a1\u200b\u7b5b\u9009\u200b</li> </ul> <pre><code>from zlai.tools.report import *\n\ncolumns = [\"orgName\", \"stockCode\", \"stockName\", \"title\", \"researcher\", \"publishDate\", \"infoCode\"]\nreport = Report(code=\"002222\", report_type=\"\u200b\u4e2a\u80a1\u200b\u7814\u62a5\u200b\", size=5, begin_time=\"2024-09-23\", end_time=\"2024-09-23\")\ndata = report.load_data()\nprint(data.to_frame()[columns].to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    | orgName              |   stockCode | stockName   | title                                                | researcher   | publishDate             | infoCode             |\n|---:|:---------------------|------------:|:------------|:-----------------------------------------------------|:-------------|:------------------------|:---------------------|\n|  0 | \u200b\u534e\u946b\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b |      002222 | \u200b\u798f\u6676\u200b\u79d1\u6280\u200b    | \u200b\u516c\u53f8\u200b\u4e8b\u4ef6\u200b\u70b9\u8bc4\u200b\u62a5\u544a\u200b\uff1a\u200b\u4e1a\u7ee9\u200b\u73af\u6bd4\u200b\u6539\u5584\u200b\uff0c\u200b\u4e0d\u65ad\u4e30\u5bcc\u200b\u4ea7\u54c1\u200b\u77e9\u9635\u200b\u4f53\u7cfb\u200b | \u200b\u6bdb\u6b63\u200b,\u200b\u5f20\u7490\u200b    | 2024-09-23 00:00:00.000 | AP202409231639992204 |\n</code></pre>"},{"location":"api/text/reports/#_10","title":"\u5b8f\u89c2\u200b\u7814\u7a76","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\ncolumns = [\"orgName\", \"title\", \"researcher\", \"publishDate\", \"infoCode\"]\nreport = Report(report_type=\"\u200b\u5b8f\u89c2\u200b\u7814\u7a76\u200b\", size=5, begin_time=\"2024-09-23\", end_time=\"2024-09-23\")\ndata = report.load_data()\nprint(data.to_frame()[columns].to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    | orgName                  | title                                                      | researcher                | publishDate             | infoCode             |\n|---:|:-------------------------|:-----------------------------------------------------------|:--------------------------|:------------------------|:---------------------|\n|  0 | \u200b\u82f1\u5927\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b     | \u200b\u82f1\u5927\u200b\u5b8f\u89c2\u200b\u70b9\u8bc4\u200b\uff082024\u200b\u5e74\u200b\u7b2c\u200b3\u200b\u671f\u200b\uff0c\u200b\u603b\u7b2c\u200b3\u200b\u671f\u200b\uff09\uff1a\u200b\u7f8e\u8054\u50a8\u200b\u5982\u671f\u200b\u964d\u606f\u200b       | \u200b\u90d1\u7f61\u200b                      | 2024-09-23 00:00:00.000 | AP202409231639990403 |\n|  1 | \u200b\u534e\u91d1\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b     | \u200b\u8d22\u653f\u200b\u6570\u636e\u200b\u70b9\u8bc4\u200b\uff082024.8\uff09\uff1a\u200b\u5730\u65b9\u5316\u200b\u503a\u200b\u901f\u5ea6\u200b\u8d8a\u200b\u5feb\u200b\uff0c\u200b\u4e2d\u592e\u200b\u6269\u5f20\u200b\u7a7a\u95f4\u200b\u8d8a\u5927\u200b | \u200b\u79e6\u6cf0\u200b                      | 2024-09-23 00:00:00.000 | AP202409231639990119 |\n|  2 | \u200b\u5929\u98ce\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b     | \u200b\u5b8f\u89c2\u200b\uff1a\u200b\u9884\u671f\u200b\u843d\u7a7a\u200b\u540e\u200b\u7684\u200b\u8d27\u5e01\u200b\u548c\u200b\u8d22\u653f\u653f\u7b56\u200b\u65b9\u5411\u200b                       | \u200b\u5b8b\u96ea\u6d9b\u200b                    | 2024-09-23 00:00:00.000 | AP202409231639989657 |\n|  3 | \u200b\u6d77\u901a\u200b\u56fd\u9645\u200b\u8bc1\u5238\u200b\u96c6\u56e2\u200b\u6709\u9650\u516c\u53f8\u200b | \u200b\u6d77\u5916\u200b\u7ecf\u6d4e\u200b\u653f\u7b56\u200b\u8ddf\u8e2a\u200b\uff1a\u200b\u7f8e\u8054\u50a8\u200b\u5f00\u542f\u200b\u964d\u606f\u200b\uff0c\u200b\u65e5\u200b\u592e\u884c\u200b\u6309\u5175\u4e0d\u52a8\u200b           | Zhonghua Liang,Amber Zhou | 2024-09-23 00:00:00.000 | AP202409231639988174 |\n|  4 | \u200b\u9ea6\u9ad8\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b     | \u200b\u5b8f\u89c2\u200b\u5e02\u573a\u200b\u5468\u62a5\u200b                                               | \u200b\u5f90\u6ee2\u200b                      | 2024-09-23 00:00:00.000 | AP202409231639987095 |\n</code></pre>"},{"location":"api/text/reports/#_11","title":"\u884c\u4e1a\u200b\u7814\u62a5","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\ncolumns = [\"orgName\", \"industryName\", \"title\", \"researcher\", \"publishDate\", \"infoCode\"]\nreport = Report(report_type=\"\u200b\u884c\u4e1a\u200b\u7814\u62a5\u200b\", industry_code=\"451\", size=5, begin_time=\"2024-09-23\", end_time=\"2024-09-23\")\ndata = report.load_data()\nprint(data.to_frame()[columns].to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|---:|:---------------------|:---------------|---------------:|:-------------------------------------------------------------------------|:--------------------------|:------------------------|:---------------------|\n|  0 | \u200b\u534e\u798f\u200b\u8bc1\u5238\u200b\u6709\u9650\u8d23\u4efb\u200b\u516c\u53f8\u200b | \u200b\u623f\u5730\u4ea7\u200b\u5f00\u53d1\u200b     |            451 | \u200b\u623f\u5730\u4ea7\u200b\u65e5\u62a5\u200b\uff1a\u200b\u6c5f\u82cf\u200b13\u200b\u5e02\u5747\u200b\u5efa\u7acb\u200b\u623f\u7968\u200b\u5b89\u7f6e\u200b\u4f53\u7cfb\u200b                                   | \u200b\u9648\u7acb\u200b,\u200b\u4e8e\u200b\u6021\u7136\u200b               | 2024-09-23 00:00:00.000 | AP202409231639991919 |\n|  1 | \u200b\u56fd\u4fe1\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b | \u200b\u623f\u5730\u4ea7\u200b\u5f00\u53d1\u200b     |            451 | \u200b\u623f\u5730\u4ea7\u200b\u884c\u4e1a\u200b2024\u200b\u5e74\u200b10\u200b\u6708\u200b\u6295\u8d44\u200b\u7b56\u7565\u200b\u66a8\u200b\u4e2d\u62a5\u200b\u603b\u7ed3\u200b\uff1a\u200b\u57fa\u672c\u9762\u200b\u96be\u8a00\u200b\u597d\u8f6c\u200b\uff0c\u200b\u535a\u5f08\u200b\u673a\u4f1a\u200b\u4ecd\u200b\u9700\u200b\u89c2\u5bdf\u200b | \u200b\u4efb\u9e64\u200b,\u200b\u738b\u7ca4\u96f7\u200b,\u200b\u738b\u9759\u200b          | 2024-09-23 00:00:00.000 | AP202409231639986335 |\n|  2 | \u200b\u4e1c\u5174\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b | \u200b\u623f\u5730\u4ea7\u200b\u5f00\u53d1\u200b     |            451 | \u200b\u623f\u5730\u4ea7\u200b\u884c\u4e1a\u200b\u5468\u62a5\u200b\uff1a\u200b\u65b0\u623f\u200b\u9500\u552e\u200b\u7ee7\u7eed\u200b\u4e0b\u884c\u200b\uff0c\u200b\u6700\u9ad8\u200b\u6cd5\u200b\u53d1\u6587\u200b\u652f\u6301\u200b\u201c\u200b\u767d\u540d\u5355\u200b\u9879\u76ee\u200b\u201d\u200b\u878d\u8d44\u200b\u4ea4\u4ed8\u200b     | \u200b\u9648\u521a\u200b                      | 2024-09-23 00:00:00.000 | AP202409231639985943 |\n|  3 | \u200b\u5f00\u6e90\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b | \u200b\u623f\u5730\u4ea7\u200b\u5f00\u53d1\u200b     |            451 | \u200b\u623f\u5730\u4ea7\u200b\u884c\u4e1a\u200b\u70b9\u8bc4\u200b\u62a5\u544a\u200b\uff1a\u200b\u8fc7\u5f80\u200b\u53ef\u9274\u200b\uff0c\u200b\u5b58\u91cf\u200b\u623f\u8d37\u200b\u964d\u606f\u200b\u7fd8\u9996\u200b\u800c\u671b\u200b                       | \u200b\u9f50\u4e1c\u200b                      | 2024-09-23 00:00:00.000 | AP202409231639977137 |\n|  4 | \u200b\u4e2d\u200b\u6cf0\u200b\u8bc1\u5238\u200b\u80a1\u4efd\u200b\u6709\u9650\u516c\u53f8\u200b | \u200b\u623f\u5730\u4ea7\u200b\u5f00\u53d1\u200b     |            451 | \u200b\u623f\u5730\u4ea7\u200b\u884c\u4e1a\u200b\u7814\u7a76\u200b\u5468\u62a5\u200b\uff1a\u200b\u6210\u4ea4\u200b\u7ef4\u6301\u200b\u4f4e\u4f4d\u200b\uff0c\u200b\u5317\u4eac\u200b\u53d6\u6d88\u200b\u666e\u5b85\u200b\u4e0e\u975e\u200b\u666e\u5b85\u200b\u8ba4\u5b9a\u200b\u6807\u51c6\u200b           | \u200b\u7531\u5b50\u6c9b\u200b,\u200b\u674e\u200b\u579a\u200b,\u200b\u4faf\u5e0c\u5f97\u200b,\u200b\u9648\u5e0c\u745e\u200b | 2024-09-23 00:00:00.000 | AP202409231639975114 |\n</code></pre>"},{"location":"api/text/reports/#_12","title":"\u76c8\u5229\u200b\u5206\u6790\u200b\u62a5\u544a","text":""},{"location":"api/text/reports/#_13","title":"\u83b7\u53d6\u200b\u5168\u90e8\u200b\u76c8\u5229\u200b\u9884\u6d4b","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nreport = ProfitForecast(size=2)\ndata = report.load_data()\ncolumns = data.metadata.get(\"columns\")\nprint(data.to_frame(columns=columns).to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|    | \u200b\u80a1\u7968\u4ee3\u7801\u200b   |   \u200b\u8bc1\u5238\u200b\u4ee3\u7801\u200b | \u200b\u8bc1\u5238\u200b\u7b80\u79f0\u200b   |   \u200b\u8bc4\u7ea7\u200b\u673a\u6784\u200b\u6570\u91cf\u200b |   \u200b\u4e70\u5165\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b |   \u200b\u589e\u6301\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b | \u200b\u4e2d\u6027\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b   | \u200b\u51cf\u6301\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b   | \u200b\u5356\u51fa\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b   |   \u200b\u7b2c\u4e00\u5e74\u200b | \u200b\u7b2c\u4e00\u5e74\u200b\u6807\u8bb0\u200b   |   \u200b\u7b2c\u4e00\u5e74\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b |   \u200b\u7b2c\u4e8c\u5e74\u200b | \u200b\u7b2c\u4e8c\u5e74\u200b\u6807\u8bb0\u200b   |   \u200b\u7b2c\u4e8c\u5e74\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b |   \u200b\u7b2c\u4e09\u5e74\u200b | \u200b\u7b2c\u4e09\u5e74\u200b\u6807\u8bb0\u200b   |   \u200b\u7b2c\u4e09\u5e74\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b |   \u200b\u7b2c\u56db\u5e74\u200b | \u200b\u7b2c\u56db\u5e74\u200b\u6807\u8bb0\u200b   |   \u200b\u7b2c\u56db\u5e74\u200b\u6bcf\u80a1\u200b\u6536\u76ca\u200b | \u200b\u884c\u4e1a\u200b\u677f\u5757\u200b   | \u200b\u6df1\u8bc1\u200b\u884c\u4e1a\u200b\u677f\u5757\u200b   | \u200b\u6982\u5ff5\u200b\u6307\u6570\u200b\u677f\u5757\u200b                                                                                                                                          | \u200b\u6df1\u8bc1\u200b\u6982\u5ff5\u200b\u6307\u6570\u200b\u677f\u5757\u200b                    | \u200b\u533a\u57df\u200b\u677f\u5757\u200b   | \u200b\u6df1\u8bc1\u200b\u533a\u57df\u200b\u677f\u5757\u200b   |     \u200b\u5e02\u573a\u200b\u677f\u5757\u200b |   \u200b\u76ee\u6807\u200b\u6700\u9ad8\u4ef7\u200b |   \u200b\u76ee\u6807\u200b\u6700\u4f4e\u4ef7\u200b |   \u200b\u957f\u671f\u200b\u8bc4\u7ea7\u200b\u6570\u91cf\u200b |\n|---:|:-----------|-----------:|:-----------|---------------:|---------------:|---------------:|:---------------|:---------------|:---------------|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|:-----------|:---------------|:------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------|:-----------|:---------------|-------------:|-------------:|-------------:|---------------:|\n|  0 | 600519.SH  |     600519 | \u200b\u8d35\u5dde\u200b\u8305\u53f0\u200b   |             57 |             47 |             10 |                |                |                |     2023 | A            |         59.4923  |     2024 | E            |         69.2585  |     2025 | E            |         79.2465  |     2026 | E            |         89.9783  | \u200b\u917f\u9152\u200b\u884c\u4e1a\u200b   | N              | HS300_,MSCI\u200b\u4e2d\u56fd\u200b,\u200b\u767d\u9152\u200b,\u200b\u767e\u5143\u200b\u80a1\u200b,\u200b\u6807\u51c6\u200b\u666e\u5c14\u200b,\u200b\u8d85\u7ea7\u200b\u54c1\u724c\u200b,\u200b\u7535\u5546\u200b\u6982\u5ff5\u200b,\u200b\u5bcc\u65f6\u200b\u7f57\u7d20\u200b,\u200b\u56fd\u4f01\u6539\u9769\u200b,\u200b\u6caa\u200b\u80a1\u901a\u200b,\u200b\u673a\u6784\u200b\u91cd\u4ed3\u200b,\u200b\u8305\u200b\u6307\u6570\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u4e0a\u8bc1\u200b180_,\u200b\u4e0a\u8bc1\u200b50_,\u200b\u897f\u90e8\u200b\u5927\u200b\u5f00\u53d1\u200b,\u200b\u592e\u89c6\u200b50_,\u200b\u8bc1\u91d1\u200b\u6301\u80a1\u200b | H,M,B,B,B,C,D,F,G,H,J,M,R,S,S,X,Y,Z | \u200b\u8d35\u5dde\u200b\u677f\u5757\u200b   | G              | 069001001001 |      2600    |      1674    |             57 |\n|  1 | 603605.SH  |     603605 | \u200b\u73c0\u83b1\u96c5\u200b     |             52 |             40 |             12 |                |                |                |     2023 | A            |          3.00906 |     2024 | E            |          3.92042 |     2025 | E            |          4.85173 |     2026 | E            |          5.87592 | \u200b\u7f8e\u5bb9\u200b\u62a4\u7406\u200b   | M              | MSCI\u200b\u4e2d\u56fd\u200b,QFII\u200b\u91cd\u4ed3\u200b,\u200b\u767e\u5143\u200b\u80a1\u200b,\u200b\u7535\u5546\u200b\u6982\u5ff5\u200b,\u200b\u5bcc\u65f6\u200b\u7f57\u7d20\u200b,\u200b\u6caa\u200b\u80a1\u901a\u200b,\u200b\u5316\u5986\u54c1\u200b\u6982\u5ff5\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u4e0a\u8bc1\u200b180_,\u200b\u8f6c\u503a\u200b\u6807\u7684\u200b,\u200b\u6628\u65e5\u200b\u89e6\u677f\u200b                                                      | M,Q,B,D,F,H,H,R,S,Z,Z               | \u200b\u6d59\u6c5f\u200b\u677f\u5757\u200b   | Z              | 069001001001 |       149.72 |        99.97 |             52 |\n</code></pre>"},{"location":"api/text/reports/#_14","title":"\u83b7\u53d6\u200b\u67d0\u200b\u884c\u4e1a\u200b\u76c8\u5229\u200b\u9884\u6d4b","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nreport = ProfitForecast(industry=\"\u200b\u7535\u6e90\u200b\u8bbe\u5907\u200b\", size=5)\ndata = report.load_data()\ncolumns = data.metadata.get(\"columns\")\nprint(data.to_frame(columns=columns).to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|---:|:-----------|-----------:|:-----------|---------------:|---------------:|---------------:|:---------------|:---------------|:---------------|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|:-----------|:---------------|:------------------------------------------------------------------------------------------------------------|:--------------------------|:-----------|:---------------|-------------:|-------------:|-------------:|---------------:|\n|  0 | 300693.SZ  |     300693 | \u200b\u76db\u5f18\u200b\u80a1\u4efd\u200b   |             21 |             13 |              8 |                |                |                |     2023 | A            |          1.29491 |     2024 | E            |          1.57714 |     2025 | E            |          2.12571 |     2026 | E            |          2.76947 | \u200b\u7535\u6e90\u200b\u8bbe\u5907\u200b   | D              | \u200b\u5145\u7535\u200b\u6869\u200b,\u200b\u50a8\u80fd\u200b,\u200b\u521b\u4e1a\u677f\u200b\u7efc\u200b,\u200b\u9ad8\u9001\u200b\u8f6c\u200b,\u200b\u9ad8\u538b\u200b\u5feb\u5145\u200b,\u200b\u57fa\u91d1\u200b\u91cd\u4ed3\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u6df1\u80a1\u901a\u200b,\u200b\u6df1\u5733\u7279\u533a\u200b,\u200b\u6570\u636e\u4e2d\u5fc3\u200b,\u200b\u4e13\u7cbe\u200b\u7279\u65b0\u200b                    | C,C,C,G,G,J,R,S,S,S,Z     | \u200b\u5e7f\u4e1c\u200b\u677f\u5757\u200b   | G              | 069001002002 |        44.88 |        27.87 |             21 |\n|  1 | 300820.SZ  |     300820 | \u200b\u82f1\u6770\u200b\u7535\u6c14\u200b   |             14 |             12 |              2 |                |                |                |     2023 | A            |          1.94709 |     2024 | E            |          2.71214 |     2025 | E            |          3.45786 |     2026 | E            |          4.25    | \u200b\u7535\u6e90\u200b\u8bbe\u5907\u200b   | D              | PLC\u200b\u6982\u5ff5\u200b,\u200b\u534a\u5bfc\u4f53\u200b\u6982\u5ff5\u200b,\u200b\u5145\u7535\u200b\u6869\u200b,\u200b\u50a8\u80fd\u200b,\u200b\u521b\u4e1a\u677f\u200b\u7efc\u200b,\u200b\u7b2c\u4e09\u4ee3\u200b\u534a\u5bfc\u4f53\u200b,\u200b\u9ad8\u9001\u200b\u8f6c\u200b,\u200b\u519b\u5de5\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u6df1\u80a1\u901a\u200b,\u200b\u592a\u9633\u80fd\u200b,\u200b\u897f\u90e8\u200b\u5927\u200b\u5f00\u53d1\u200b,\u200b\u4e13\u7cbe\u200b\u7279\u65b0\u200b | P,B,C,C,C,D,G,J,R,S,T,X,Z | \u200b\u56db\u5ddd\u200b\u677f\u5757\u200b   | S              | 069001002002 |        60.1  |        42.8  |             14 |\n</code></pre>"},{"location":"api/text/reports/#_15","title":"\u83b7\u53d6\u200b\u67d0\u200b\u6982\u5ff5\u200b\u76c8\u5229\u200b\u9884\u6d4b","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nreport = ProfitForecast(conception=\"\u200b\u9ad8\u538b\u200b\u5feb\u5145\u200b\", size=5)\ndata = report.load_data()\ncolumns = data.metadata.get(\"columns\")\nprint(data.to_frame(columns=columns).to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|---:|:-----------|-----------:|:-----------|---------------:|---------------:|---------------:|:---------------|:---------------|:---------------|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|:-----------|:---------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------|:-----------|:---------------|-------------:|-------------:|-------------:|---------------:|\n|  0 | 600699.SH  |     600699 | \u200b\u5747\u200b\u80dc\u200b\u7535\u5b50\u200b   |             22 |             15 |              7 |                |                |                |     2023 | A            |         0.768929 |     2024 | E            |          1.03264 |     2025 | E            |          1.34509 |     2026 | E            |          1.62432 | \u200b\u6c7d\u8f66\u200b\u96f6\u90e8\u4ef6\u200b | Q              | 2025\u200b\u89c4\u5212\u200b,MSCI\u200b\u4e2d\u56fd\u200b,\u200b\u6807\u51c6\u200b\u666e\u5c14\u200b,\u200b\u8f66\u200b\u8054\u7f51\u200b(\u200b\u8f66\u8def\u200b\u4e91\u200b),\u200b\u5145\u7535\u200b\u6869\u200b,\u200b\u5bcc\u65f6\u200b\u7f57\u7d20\u200b,\u200b\u9ad8\u538b\u200b\u5feb\u5145\u200b,\u200b\u6caa\u200b\u80a1\u901a\u200b,\u200b\u534e\u4e3a\u200b\u6982\u5ff5\u200b,\u200b\u534e\u4e3a\u200b\u6c7d\u8f66\u200b,\u200b\u673a\u6784\u200b\u91cd\u4ed3\u200b,\u200b\u6fc0\u5149\u96f7\u8fbe\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u4e0a\u8bc1\u200b380,\u200b\u7279\u65af\u62c9\u200b,\u200b\u65e0\u4eba\u9a7e\u9a76\u200b,\u200b\u65e0\u7ebf\u200b\u5145\u7535\u200b,\u200b\u65b0\u80fd\u6e90\u200b\u8f66\u200b,\u200b\u82f1\u200b\u4f1f\u8fbe\u200b\u6982\u5ff5\u200b,\u200b\u667a\u80fd\u200b\u673a\u5668\u200b,\u200b\u4e2d\u8bc1\u200b500 | G,M,B,C,C,F,G,H,H,H,J,J,R,S,T,W,W,X,Y,Z,Z | \u200b\u6d59\u6c5f\u200b\u677f\u5757\u200b   | Z              | 069001001001 |        26.26 |        20    |             22 |\n|  1 | 300693.SZ  |     300693 | \u200b\u76db\u5f18\u200b\u80a1\u4efd\u200b   |             21 |             13 |              8 |                |                |                |     2023 | A            |         1.29491  |     2024 | E            |          1.57714 |     2025 | E            |          2.12571 |     2026 | E            |          2.76947 | \u200b\u7535\u6e90\u200b\u8bbe\u5907\u200b   | D              | \u200b\u5145\u7535\u200b\u6869\u200b,\u200b\u50a8\u80fd\u200b,\u200b\u521b\u4e1a\u677f\u200b\u7efc\u200b,\u200b\u9ad8\u9001\u200b\u8f6c\u200b,\u200b\u9ad8\u538b\u200b\u5feb\u5145\u200b,\u200b\u57fa\u91d1\u200b\u91cd\u4ed3\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u6df1\u80a1\u901a\u200b,\u200b\u6df1\u5733\u7279\u533a\u200b,\u200b\u6570\u636e\u4e2d\u5fc3\u200b,\u200b\u4e13\u7cbe\u200b\u7279\u65b0\u200b                                                                                                     | C,C,C,G,G,J,R,S,S,S,Z                     | \u200b\u5e7f\u4e1c\u200b\u677f\u5757\u200b   | G              | 069001002002 |        44.88 |        27.87 |             21 |\n</code></pre>"},{"location":"api/text/reports/#_16","title":"\u83b7\u53d6\u200b\u67d0\u200b\u5730\u533a\u200b\u76c8\u5229\u200b\u9884\u6d4b","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nreport = ProfitForecast(district=\"\u200b\u5317\u4eac\u200b\u677f\u5757\u200b\", size=5)\ndata = report.load_data()\ncolumns = data.metadata.get(\"columns\")\nprint(data.to_frame(columns=columns).to_markdown())\n</code></pre> <p>\u200b\u6570\u636e\u200b</p> <pre><code>|---:|:-----------|-----------:|:-----------|---------------:|---------------:|---------------:|:---------------|:---------------|:---------------|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|---------:|:-------------|-----------------:|:-----------|:---------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------|:-----------|:---------------|-------------:|-------------:|-------------:|---------------:|\n|  0 | 688111.SH  |     688111 | \u200b\u91d1\u5c71\u200b\u529e\u516c\u200b   |             44 |             34 |             10 |                |                |                |     2023 | A            |          2.849   |     2024 | E            |          3.39153 |     2025 | E            |            4.301 |     2026 | E            |          5.47064 | \u200b\u8f6f\u4ef6\u5f00\u53d1\u200b   | R              | HS300_,Kimi\u200b\u6982\u5ff5\u200b,MSCI\u200b\u4e2d\u56fd\u200b,\u200b\u767e\u5143\u200b\u80a1\u200b,\u200b\u56fd\u4ea7\u8f6f\u4ef6\u200b,\u200b\u6caa\u200b\u80a1\u901a\u200b,\u200b\u57fa\u91d1\u200b\u91cd\u4ed3\u200b,\u200b\u79d1\u521b\u677f\u200b\u505a\u200b\u5e02\u80a1\u200b,\u200b\u8305\u200b\u6307\u6570\u200b,\u200b\u4eba\u5de5\u667a\u80fd\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u4e0a\u8bc1\u200b180_,\u200b\u4e0a\u8bc1\u200b50_,\u200b\u4fe1\u521b\u200b,\u200b\u8fdc\u7a0b\u200b\u529e\u516c\u200b                                     | H,K,M,B,G,H,J,K,M,R,R,S,S,X,Y       | \u200b\u5317\u4eac\u200b\u677f\u5757\u200b   | B              | 069001001006 |        399   |       228.53 |             44 |\n|  1 | 300896.SZ  |     300896 | \u200b\u7231\u7f8e\u200b\u5ba2\u200b     |             42 |             30 |             12 |                |                |                |     2023 | A            |          6.14499 |     2024 | E            |          8.55057 |     2025 | E            |           10.919 |     2026 | E            |         13.5835  | \u200b\u7f8e\u5bb9\u200b\u62a4\u7406\u200b   | M              | HS300_,MSCI\u200b\u4e2d\u56fd\u200b,\u200b\u767e\u5143\u200b\u80a1\u200b,\u200b\u521b\u4e1a\u677f\u200b\u7efc\u200b,\u200b\u521b\u4e1a\u200b\u6210\u4efd\u200b,\u200b\u5316\u5986\u54c1\u200b\u6982\u5ff5\u200b,\u200b\u57fa\u91d1\u200b\u91cd\u4ed3\u200b,\u200b\u51cf\u80a5\u836f\u200b,\u200b\u8305\u200b\u6307\u6570\u200b,\u200b\u5b81\u200b\u7ec4\u5408\u200b,\u200b\u878d\u8d44\u200b\u878d\u5238\u200b,\u200b\u6df1\u6210\u200b500,\u200b\u6df1\u80a1\u901a\u200b,\u200b\u6df1\u8bc1\u200b100R,\u200b\u533b\u7597\u200b\u7f8e\u5bb9\u200b,\u200b\u533b\u7597\u5668\u68b0\u200b\u6982\u5ff5\u200b,\u200b\u6628\u65e5\u200b\u6da8\u505c\u200b,\u200b\u6628\u65e5\u200b\u6da8\u505c\u200b_\u200b\u542b\u4e00\u5b57\u200b | H,M,B,C,C,H,J,J,M,N,R,S,S,S,Y,Y,Z,Z | \u200b\u5317\u4eac\u200b\u677f\u5757\u200b   | B              | 069001002002 |        429.3 |       189    |             42 |\n</code></pre>"},{"location":"api/text/reports/#_17","title":"\u8d22\u7ecf\u200b\u7814\u62a5\u200b(Editing)","text":""},{"location":"api/text/reports/#_18","title":"\u7814\u62a5\u200b\u4f7f\u7528","text":""},{"location":"api/text/reports/#pdf","title":"\u4fdd\u5b58\u200b\u4e3a\u200b\u672c\u5730\u200bPDF","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\n\nreport = Report(\n    report_type=\"\u200b\u884c\u4e1a\u200b\u7814\u62a5\u200b\", industry_code=\"451\", size=5, begin_time=\"2024-09-23\",\n    end_time=\"2024-09-23\")\nreport.save_pdf(report_code=[\"AP202409231639991919\"], path=\"../fund/\")\n</code></pre>"},{"location":"api/text/reports/#bytes","title":"\u8bfb\u53d6\u200b\u4e3a\u200b<code>bytes</code>\u200b\u8fdb\u884c\u200b\u6587\u672c\u200b\u5206\u6790","text":"<p>\u200b\u4ee3\u7801\u200b</p> <pre><code>from zlai.tools.report import *\nfrom zlai.documents.pdf import ReadPDF\n\nreport = Report()\npdf_bytes = report.load_pdf_bytes(report_code=[\"AP202409231639991919\"])\n\ncode, stream = pdf_bytes[0]\npdf = ReadPDF(stream=stream)\nfor page in pdf.documents:\n    print(\"metadata: \", page.metadata)\n    print(\"content: \", page.page_content)\n    print(\"image: \", page.page_images[0])\n    break\n</code></pre> <p>\u200b\u7ed3\u679c\u200b</p> <pre><code>metadata: {'path': None, 'page_number': 0, 'image_num': 2}\ncontent:  &lt;\u200b\u62a5\u544a\u200b\u6587\u672c\u200b\u7701\u7565\u200b&gt;\nimage:  &lt;\u200b\u56fe\u7247\u200b\u7701\u7565\u200b&gt;\n</code></pre> <p></p>"},{"location":"api/typing/response_data/","title":"Data","text":""},{"location":"api/typing/response_data/#wisecon.types.response_data.Metadata","title":"Metadata","text":"<pre><code>Metadata(**kwargs: Any)\n</code></pre> <p>\u200b\u5143\u200b\u6570\u636e\u200b</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def __init__(self, **kwargs: Any):\n    \"\"\"\u200b\u5143\u200b\u6570\u636e\u200b\n\n    Args:\n        **kwargs: \u200b\u53c2\u6570\u200b\n    \"\"\"\n    super().__init__(**kwargs)\n    self.columns = {k: v for k, v in self.columns.items() if v}\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData","title":"ResponseData","text":"<pre><code>ResponseData(\n    data: List[Dict],\n    metadata: Optional[Metadata] = None,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u8bf7\u6c42\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u7684\u200b\u6570\u636e\u200b\u7c7b\u200b</p> <p>\u200b\u5c01\u88c5\u200b\u8bf7\u6c42\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u65b9\u6cd5\u200b\u7c7b\u200b</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict]</code> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b</p> required <code>metadata</code> <code>Optional[Metadata]</code> <p>\u200b\u5143\u200b\u6570\u636e\u200b</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def __init__(\n        self,\n        data: List[Dict],\n        metadata: Optional[Metadata] = None,\n        **kwargs: Any,\n):\n    \"\"\"\u200b\u5c01\u88c5\u200b\u8bf7\u6c42\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u65b9\u6cd5\u200b\u7c7b\u200b\n\n    Args:\n        data: \u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\n        metadata: \u200b\u5143\u200b\u6570\u636e\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    super().__init__(**kwargs)\n    self.data = data\n    self.metadata = metadata\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.show_columns","title":"show_columns","text":"<pre><code>show_columns()\n</code></pre> <p>\u200b\u5c55\u793a\u200b\u6570\u636e\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u4fe1\u606f\u200b</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def show_columns(self):\n    \"\"\"\u200b\u5c55\u793a\u200b\u6570\u636e\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u4fe1\u606f\u200b\"\"\"\n    pprint.pprint(self.metadata.columns, indent=4)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.drop_no_zh_columns","title":"drop_no_zh_columns","text":"<pre><code>drop_no_zh_columns()\n</code></pre> <p>\u200b\u5220\u9664\u200b\u975e\u4e2d\u200b\u6587\u5b57\u200b\u6bb5\u200b</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def drop_no_zh_columns(self):\n    \"\"\"\u200b\u5220\u9664\u200b\u975e\u4e2d\u200b\u6587\u5b57\u200b\u6bb5\u200b\"\"\"\n    exits_columns = [k for k, v in self.metadata.columns.items() if v]\n    self.data = [{k: v for k, v in item.items() if k in exits_columns} for item in self.data]\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_dict","title":"to_dict","text":"<pre><code>to_dict(\n    chinese_column: Optional[bool] = False,\n) -&gt; List[Dict]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: \u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_dict(\n        self,\n        chinese_column: Optional[bool] = False,\n) -&gt; List[Dict]:\n    \"\"\"\n    Args:\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n\n    Returns:\n        List[Dict]: \u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\n    \"\"\"\n    if chinese_column:\n        data = [self._trans_chinese_columns(item) for item in self.data]\n    else:\n        data = self.data\n    return data\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_frame","title":"to_frame","text":"<pre><code>to_frame(\n    chinese_column: Optional[bool] = False,\n) -&gt; DataFrame\n</code></pre> <p>\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u7684\u200b pandas.DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dataframe</code> <code>DataFrame</code> <p>\u200b\u6570\u636e\u200b\u7684\u200b pandas.DataFrame</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_frame(\n        self,\n        chinese_column: Optional[bool] = False,\n) -&gt; pd.DataFrame:\n    \"\"\"\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u7684\u200b pandas.DataFrame\n\n    Args:\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n\n    Returns:\n        dataframe: \u200b\u6570\u636e\u200b\u7684\u200b pandas.DataFrame\n    \"\"\"\n    df = pd.DataFrame(data=self.data)\n    if chinese_column:\n        df.rename(columns=self.metadata.columns, inplace=True)\n    return df\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_markdown","title":"to_markdown","text":"<pre><code>to_markdown(\n    chinese_column: Optional[bool] = False, **kwargs: Any\n) -&gt; str\n</code></pre> <p>\u200b\u8fd4\u56de\u200b Markdown \u200b\u683c\u5f0f\u200b\u7684\u200b\u6570\u636e\u200b</p> <p>Parameters:</p> Name Type Description Default <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>to_markdown() \u200b\u7684\u200b\u53c2\u6570\u200b</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>markdown \u200b\u683c\u5f0f\u200b\u7684\u200b\u6570\u636e\u200b</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_markdown(\n        self,\n        chinese_column: Optional[bool] = False,\n        **kwargs: Any,\n) -&gt; str:\n    \"\"\"\u200b\u8fd4\u56de\u200b Markdown \u200b\u683c\u5f0f\u200b\u7684\u200b\u6570\u636e\u200b\n\n    Args:\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n        **kwargs: to_markdown() \u200b\u7684\u200b\u53c2\u6570\u200b\n\n    Returns:\n        str: markdown \u200b\u683c\u5f0f\u200b\u7684\u200b\u6570\u636e\u200b\n    \"\"\"\n    return self.to_frame(chinese_column).to_markdown(**kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_csv","title":"to_csv","text":"<pre><code>to_csv(\n    path: str,\n    chinese_column: Optional[bool] = False,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u81f3\u200b csv \u200b\u6587\u4ef6\u200b\u4e2d\u200b</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>csv \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_csv(\n        self,\n        path: str,\n        chinese_column: Optional[bool] = False,\n        **kwargs: Any\n) -&gt; None:\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u81f3\u200b csv \u200b\u6587\u4ef6\u200b\u4e2d\u200b\n\n    Args:\n        path: csv \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.to_frame(chinese_column).to_csv(path, **kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_excel","title":"to_excel","text":"<pre><code>to_excel(\n    path: str,\n    chinese_column: Optional[bool] = False,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u81f3\u200b excel \u200b\u6587\u4ef6\u200b\u4e2d\u200b</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>excel \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_excel(\n        self,\n        path: str,\n        chinese_column: Optional[bool] = False,\n        **kwargs: Any\n) -&gt; None:\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u81f3\u200b excel \u200b\u6587\u4ef6\u200b\u4e2d\u200b\n\n    Args:\n        path: excel \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.to_frame(chinese_column).to_excel(path, **kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_parquet","title":"to_parquet","text":"<pre><code>to_parquet(\n    path: str,\n    chinese_column: Optional[bool] = False,\n    index: Optional[bool] = False,\n    engine: Literal[\n        \"auto\", \"pyarrow\", \"fastparquet\"\n    ] = \"auto\",\n    compression: str | None = \"snappy\",\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u4e3a\u200b parquet \u200b\u6587\u4ef6\u200b</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b\u5217\u540d\u200b</p> <code>False</code> <code>index</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5305\u542b\u200b\u7d22\u5f15\u200b</p> <code>False</code> <code>engine</code> <code>Literal['auto', 'pyarrow', 'fastparquet']</code> <p>\u200b\u5b58\u50a8\u200b\u5f15\u64ce\u200b</p> <code>'auto'</code> <code>compression</code> <code>str | None</code> <p>\u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b</p> <code>'snappy'</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_parquet(\n        self,\n        path: str,\n        chinese_column: Optional[bool] = False,\n        index: Optional[bool] = False,\n        engine: Literal[\"auto\", \"pyarrow\", \"fastparquet\"] = \"auto\",\n        compression: str | None = \"snappy\",\n        **kwargs: Any\n) -&gt; None:\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u4e3a\u200b parquet \u200b\u6587\u4ef6\u200b\n\n    Args:\n        path: \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b\u5217\u540d\u200b\n        index: \u200b\u662f\u5426\u200b\u5305\u542b\u200b\u7d22\u5f15\u200b\n        engine: \u200b\u5b58\u50a8\u200b\u5f15\u64ce\u200b\n        compression: \u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.to_frame(chinese_column).to_parquet(\n        path, index=index, engine=engine,\n        compression=compression, **kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_pickle","title":"to_pickle","text":"<pre><code>to_pickle(\n    path: str,\n    chinese_column: Optional[bool] = False,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u4e3a\u200b pickle \u200b\u6587\u4ef6\u200b</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u200b\u6587\u4ef6\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b\u5217\u540d\u200b</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_pickle(\n        self,\n        path: str,\n        chinese_column: Optional[bool] = False,\n        **kwargs: Any,\n):\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u4e3a\u200b pickle \u200b\u6587\u4ef6\u200b\n\n    Args:\n        path: \u200b\u6587\u4ef6\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b\u5217\u540d\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.to_frame(chinese_column).to_pickle(path,  **kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_string","title":"to_string","text":"<pre><code>to_string(\n    chinese_column: Optional[bool] = False, **kwargs: Any\n) -&gt; str\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u4e3a\u200b string \u200b\u683c\u5f0f\u200b</p> <p>Parameters:</p> Name Type Description Default <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u200b\u6570\u636e\u200b\u7684\u200b string \u200b\u683c\u5f0f\u200b</p> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_string(\n        self,\n        chinese_column: Optional[bool] = False,\n        **kwargs: Any\n) -&gt; str:\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u4e3a\u200b string \u200b\u683c\u5f0f\u200b\n\n    Args:\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e2d\u6587\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n\n    Returns:\n        str: \u200b\u6570\u636e\u200b\u7684\u200b string \u200b\u683c\u5f0f\u200b\n    \"\"\"\n    return self.to_frame(chinese_column).to_string(**kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_sql","title":"to_sql","text":"<pre><code>to_sql(\n    name: str,\n    con: Any,\n    chinese_column: Optional[bool] = False,\n    if_exists: Literal[\n        \"fail\", \"replace\", \"append\"\n    ] = \"fail\",\n    index: Optional[bool] = True,\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u81f3\u200b Database \u200b\u4e2d\u200b</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u200b\u8868\u540d\u200b</p> required <code>con</code> <code>Any</code> <p>\u200b\u6570\u636e\u5e93\u200b\u8fde\u63a5\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>if_exists</code> <code>Literal['fail', 'replace', 'append']</code> <p>\u200b\u5982\u679c\u200b\u8868\u5df2\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u91c7\u53d6\u200b\u7684\u200b\u64cd\u4f5c\u200b</p> <code>'fail'</code> <code>index</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u7d22\u5f15\u200b\u5b58\u50a8\u200b\u81f3\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_sql(\n        self,\n        name: str,\n        con: Any,\n        chinese_column: Optional[bool] = False,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        index: Optional[bool] = True,\n        **kwargs: Any,\n):\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u81f3\u200b Database \u200b\u4e2d\u200b\n\n    Args:\n        name: \u200b\u8868\u540d\u200b\n        con: \u200b\u6570\u636e\u5e93\u200b\u8fde\u63a5\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u4e3a\u200b\u4e2d\u6587\u200b\n        if_exists: \u200b\u5982\u679c\u200b\u8868\u5df2\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u91c7\u53d6\u200b\u7684\u200b\u64cd\u4f5c\u200b\n        index: \u200b\u662f\u5426\u200b\u5c06\u200b\u7d22\u5f15\u200b\u5b58\u50a8\u200b\u81f3\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    self.to_frame(chinese_column).to_sql(\n        name=name, con=con, if_exists=if_exists,\n        index=index, **kwargs)\n</code></pre>"},{"location":"api/typing/response_data/#wisecon.types.response_data.ResponseData.to_duckdb","title":"to_duckdb","text":"<pre><code>to_duckdb(\n    database: str,\n    name: str,\n    chinese_column: Optional[bool] = False,\n    if_exists: Literal[\n        \"fail\", \"replace\", \"append\"\n    ] = \"replace\",\n    **kwargs: Any\n)\n</code></pre> <p>\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u81f3\u200b duckdb \u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>\u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> required <code>name</code> <code>str</code> <p>\u200b\u8868\u540d\u200b</p> required <code>chinese_column</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u4e3a\u200b\u4e2d\u6587\u200b</p> <code>False</code> <code>if_exists</code> <code>Literal['fail', 'replace', 'append']</code> <p>\u200b\u5982\u679c\u200b\u8868\u200b\u5b58\u5728\u200b\uff0c\u200b\u662f\u5426\u200b\u8986\u76d6\u200b</p> <code>'replace'</code> <code>**kwargs</code> <code>Any</code> <p>\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> <code>{}</code> Source code in <code>wisecon\\types\\response_data.py</code> <pre><code>def to_duckdb(\n        self,\n        database: str,\n        name: str,\n        chinese_column: Optional[bool] = False,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"replace\",\n        **kwargs: Any,\n):\n    \"\"\"\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u81f3\u200b duckdb \u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\n\n    Args:\n        database: \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        name: \u200b\u8868\u540d\u200b\n        chinese_column: \u200b\u662f\u5426\u200b\u5c06\u200b\u5217\u540d\u200b\u8f6c\u4e3a\u200b\u4e2d\u6587\u200b\n        if_exists: \u200b\u5982\u679c\u200b\u8868\u200b\u5b58\u5728\u200b\uff0c\u200b\u662f\u5426\u200b\u8986\u76d6\u200b\n        **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\n    \"\"\"\n    from sqlalchemy import create_engine\n\n    df = self.to_frame(chinese_column)\n    engine = create_engine(database, **kwargs)\n    with engine.connect() as con:\n        df.to_sql(name, con=con, if_exists=if_exists, index=False)\n</code></pre>"},{"location":"api/utils/time/","title":"Time","text":""},{"location":"api/utils/time/#wisecon.utils.time.time2int","title":"time2int","text":"<pre><code>time2int() -&gt; str\n</code></pre> <p>\u200b\u5c06\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6beb\u79d2\u200b\u7ea7\u200b\u65f6\u95f4\u200b\u6233\u200b</p> <p>Returns:</p> Type Description <code>str</code> <p>\u200b\u6beb\u79d2\u200b\u7ea7\u200b\u65f6\u95f4\u200b\u6233\u200b</p> Source code in <code>wisecon\\utils\\time.py</code> <pre><code>def time2int() -&gt; str:\n    \"\"\"\u200b\u5c06\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6beb\u79d2\u200b\u7ea7\u200b\u65f6\u95f4\u200b\u6233\u200b\n\n    Returns:\n        \u200b\u6beb\u79d2\u200b\u7ea7\u200b\u65f6\u95f4\u200b\u6233\u200b\n    \"\"\"\n    return str(int(time.time() * 1E3))\n</code></pre>"},{"location":"api/utils/time/#wisecon.utils.time.year2date","title":"year2date","text":"<pre><code>year2date(\n    year: int,\n    format: Literal[\"%Y%m%d\", \"%Y-%m-%d\"] = \"%Y%m%d\",\n) -&gt; Tuple[str, str]\n</code></pre> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5e74\u4efd\u200b\uff0c\u200b\u8fd4\u56de\u200b\u8be5\u200b\u5e74\u4efd\u200b\u7684\u200b\u5f00\u59cb\u200b\u4e0e\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>\u200b\u5e74\u4efd\u200b</p> required <code>format</code> <code>Literal['%Y%m%d', '%Y-%m-%d']</code> <p>\u200b\u65e5\u671f\u200b\u683c\u5f0f\u200b</p> <code>'%Y%m%d'</code> <p>Returns:</p> Name Type Description <code>start_date</code> <code>str</code> <p>\u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b</p> <code>end_date</code> <code>str</code> <p>\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b</p> Source code in <code>wisecon\\utils\\time.py</code> <pre><code>def year2date(\n        year: int,\n        format: Literal[\"%Y%m%d\", \"%Y-%m-%d\"] = \"%Y%m%d\"\n) -&gt; Tuple[str, str]:\n    \"\"\"\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5e74\u4efd\u200b\uff0c\u200b\u8fd4\u56de\u200b\u8be5\u200b\u5e74\u4efd\u200b\u7684\u200b\u5f00\u59cb\u200b\u4e0e\u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n\n    Args:\n        year: \u200b\u5e74\u4efd\u200b\n        format: \u200b\u65e5\u671f\u200b\u683c\u5f0f\u200b\n\n    Returns:\n        start_date: \u200b\u5f00\u59cb\u200b\u65e5\u671f\u200b\n        end_date: \u200b\u7ed3\u675f\u200b\u65e5\u671f\u200b\n    \"\"\"\n    start_date = datetime(year, 1, 1).strftime(format)\n    end_date = datetime(year, 12, 31).strftime(format)\n    return start_date, end_date\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/10/24/2024-10-24/","title":"2024-10-24","text":"<p>\u200b\u5f00\u59cb\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5f00\u53d1\u200b\u8fdb\u7a0b\u200b\u5566\u200b\uff0c\u200b\u52a0\u6cb9\u200b\u5566\u200b\u3002</p> <p>...</p>"},{"location":"docs/agent/","title":"\u4f7f\u7528\u200bWisecon-Agent\u200b\u8c03\u7528\u200b\u6570\u636e","text":"<p>\u200b\u73b0\u5728\u200b\uff0cWisecon-Agent\u200b\u5df2\u7ecf\u200b\u539f\u751f\u200b\u652f\u6301\u200b\u5927\u200b\u6a21\u578b\u200b\u901a\u8fc7\u200bFunction Call\u200b\u65b9\u5f0f\u200b\u8c03\u7528\u200b\u6570\u636e\u200b\u5e76\u200b\u8fdb\u884c\u200b\u6570\u636e\u5206\u6790\u200b\u5566\u200b\u3002\u200b\u4f7f\u7528\u200b\u6b65\u9aa4\u200b\u662f\u200b\u4e0b\u9762\u200b\uff1a</p> <p>1. \u200b\u914d\u7f6e\u200bAPI\u200b\u5de5\u5177\u200b</p> <pre><code>from wisecon.agent import *\nfrom wisecon.movie import *\nfrom wisecon.stock.etf import *\nfrom wisecon.stock.market import *\nfrom wisecon.stock.financial import *\nfrom wisecon.stock.kline import *\nfrom wisecon.stock.tick import *\n\ntools = Tools(tools=[\n    LastDayMarketSummary, # \u200b\u83b7\u53d6\u200b\u6628\u65e5\u200b\u5e02\u573a\u200b\u6574\u4f53\u200b\u4ea4\u6613\u200b\u6570\u636e\u200b\n    KLine,                # \u200b\u83b7\u53d6\u200bK\u200b\u7ebf\u200b\u6570\u636e\u200b\n    KlineMin,             # \u200b\u83b7\u53d6\u200b\u5206\u949f\u200b\u7ea7\u200bK\u200b\u7ebf\u200b\u6570\u636e\u200b\n    Tick,                 # \u200b\u83b7\u53d6\u200b\u9010\u7b14\u200b\u6570\u636e\u200b\n    StockBalance,         # \u200b\u83b7\u53d6\u200b\u80a1\u7968\u200b\u8d44\u4ea7\u200b\u8d1f\u503a\u8868\u200b\u6570\u636e\u200b\n    ETFGoldHistory,       # \u200b\u83b7\u53d6\u200b\u9ec4\u91d1\u200bETF\u200b\u5386\u53f2\u6570\u636e\u200b\n    TV, Movie             # \u200b\u83b7\u53d6\u200b\u7535\u5f71\u7968\u623f\u200b\u3001\u200b\u7535\u89c6\u200b\u6536\u89c6\u7387\u200b\u4fe1\u606f\u200b\u7b49\u200b\u6570\u636e\u200b\n])\n</code></pre> <p>2. \u200b\u914d\u7f6e\u200b\u5927\u200b\u6a21\u578b\u200bAgent</p> <pre><code>from wisecon.agent import BaseAgent    \n\nbase_url = \"https://open.bigmodel.cn/api/paas/v4\"\nagent = BaseAgent(\n    model=\"glm-4-flash\", \n    base_url=base_url, \n    tools=tools,                   # \u200b\u4e0a\u9762\u200b\u914d\u7f6e\u200b\u7684\u200bAPI\u200b\u5de5\u5177\u200b\n    api_key=\"your api key\",        # \u200b\u4f60\u200b\u7684\u200bAPI Key, \u200b\u5982\u679c\u200b\u914d\u7f6e\u200b\u4e86\u200b\u73af\u5883\u53d8\u91cf\u200b\uff08api_key_name\uff09\uff0c\u200b\u53ef\u4ee5\u200b\u4e0d\u586b\u200b\n    api_key_name=\"ZHIPU_API_KEY\"   # API Key\u200b\u7684\u200b\u540d\u79f0\u200b\n)\n</code></pre> <p>3. \u200b\u4f7f\u7528\u200b\u5927\u200b\u6a21\u578b\u200bAgent\u200b\u95ee\u7b54\u200b\u67e5\u8be2\u200b</p> \u200b\u73b0\u5728\u200b\u6700\u53d7\u200b\u65b0\u6b22\u200b\u7684\u200b\u7535\u5f71\u200b\u662f\u200b\u54ea\u90e8\u200b? \u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u6570\u636e\u200b\u8c03\u7528\u200b\u56de\u7b54\u200b\u7ed3\u679c\u200b <pre><code>completion = agent.chat(\"\u200b\u73b0\u5728\u200b\u6700\u53d7\u200b\u65b0\u6b22\u200b\u7684\u200b\u7535\u5f71\u200b\u662f\u200b\u54ea\u90e8\u200b\uff1f\")\n</code></pre> <pre><code>[User] \u200b\u73b0\u5728\u200b\u6700\u53d7\u200b\u65b0\u6b22\u200b\u7684\u200b\u7535\u5f71\u200b\u662f\u200b\u54ea\u90e8\u200b\n\n[Assistant] name: Movie, arguments: {}\n\n[Observation] \n|    |   \u200b\u7968\u623f\u200b\u63cf\u8ff0\u200b | \u200b\u7968\u623f\u200b\u5360\u200b\u6bd4\u200b   | \u200b\u5ea7\u4f4d\u200b\u4f7f\u7528\u7387\u200b   | \u200b\u573a\u6b21\u200b\u5360\u200b\u6bd4\u200b   | \u200b\u603b\u200b\u7968\u623f\u200b\u63cf\u8ff0\u200b   |   \u200b\u7535\u5f71\u200bID | \u200b\u7535\u5f71\u200b\u540d\u79f0\u200b             | \u200b\u4e0a\u6620\u200b\u4fe1\u606f\u200b   |\n|---:|-----------:|:-----------|:-------------|:-----------|:-------------|---------:|:---------------------|:-----------|\n|  0 |    9354.54 | 82.9%      | 68.1%        | 58.5%      | 122.94\u200b\u4ebf\u200b     |  1294273 | \u200b\u54ea\u5412\u200b\u4e4b\u9b54\u7ae5\u200b\u95f9\u6d77\u200b       | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  1 |     851.46 | 7.5%       | 12.9%        | 16.4%      | 32.39\u200b\u4ebf\u200b      |  1492100 | \u200b\u5510\u63a2\u200b1900             | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  2 |     386.04 | 3.4%       | 2.0%         | 2.2%       | 837.7\u200b\u4e07\u200b      |  1551329 | \u200b\u60a8\u200b\u7684\u200b\u58f0\u97f3\u200b             | \u200b\u4e0a\u6620\u200b2\u200b\u5929\u200b    |\n|  3 |     170.49 | 1.5%       | 3.5%         | 5.1%       | 11.66\u200b\u4ebf\u200b      |  1245203 | \u200b\u5c01\u795e\u200b\u7b2c\u4e8c\u90e8\u200b\uff1a\u200b\u6218\u706b\u200b\u897f\u5c90\u200b | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  4 |     140.84 | 1.2%       | 3.2%         | 4.3%       | 4139.9\u200b\u4e07\u200b     |      685 | \u200b\u82b1\u6837\u5e74\u534e\u200b             | \u200b\u4e0a\u6620\u200b6\u200b\u5929\u200b    |\n|  5 |     126.63 | 1.1%       | 5.3%         | 6.6%       | 8466.7\u200b\u4e07\u200b     |  1427283 | \u200b\u7f8e\u56fd\u200b\u961f\u957f\u200b4            | \u200b\u4e0a\u6620\u200b6\u200b\u5929\u200b    |\n|  6 |     114.98 | 1.0%       | 2.7%         | 3.5%       | 7.39\u200b\u4ebf\u200b       |  1529787 | \u200b\u718a\u51fa\u6ca1\u200b\u00b7\u200b\u91cd\u542f\u200b\u672a\u6765\u200b      | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  7 |     102.71 | 0.9%       | 1.6%         | 2.3%       | 6.49\u200b\u4ebf\u200b       |  1490902 | \u200b\u5c04\u96d5\u200b\u82f1\u96c4\u4f20\u200b\uff1a\u200b\u4fa0\u4e4b\u5927\u8005\u200b | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  8 |       8.53 | &lt;0.1%      | &lt;0.1%        | &lt;0.1%      | 3.89\u200b\u4ebf\u200b       |  1379087 | \u200b\u86df\u9f99\u200b\u884c\u52a8\u200b             | \u200b\u4e0a\u6620\u200b22\u200b\u5929\u200b   |\n|  9 |       3.91 | &lt;0.1%      | &lt;0.1%        | &lt;0.1%      | 8163.6\u200b\u4e07\u200b     |  1467290 | \u200b\u96c4\u72ee\u200b\u5c11\u5e74\u200b2            | \u200b\u4e0a\u6620\u200b68\u200b\u5929\u200b   |\n</code></pre> <p>\u200b\u76ee\u524d\u200b\u6700\u53d7\u200b\u65b0\u6b22\u200b\u7684\u200b\u7535\u5f71\u200b\u662f\u200b\u300a\u200b\u54ea\u5412\u200b\u4e4b\u9b54\u7ae5\u200b\u95f9\u6d77\u200b\u300b\uff0c\u200b\u5176\u200b\u7968\u623f\u200b\u5360\u200b\u6bd4\u200b\u4e3a\u200b82.9%\uff0c\u200b\u5ea7\u4f4d\u200b\u4f7f\u7528\u7387\u200b\u4e3a\u200b68.1%\uff0c\u200b\u573a\u6b21\u200b\u5360\u200b\u6bd4\u200b\u4e3a\u200b58.5%\uff0c\u200b\u603b\u200b\u7968\u623f\u200b\u8fbe\u5230\u200b\u4e86\u200b122.94\u200b\u4ebf\u200b\u3002\u200b\u8be5\u200b\u7535\u5f71\u200b\u5df2\u7ecf\u200b\u4e0a\u6620\u200b\u4e86\u200b22\u200b\u5929\u200b\u3002</p> \u200b\u5f53\u524d\u200b300069\u200b\u80a1\u7968\u200b\u6700\u8fd1\u200b5\u200b\u5206\u949f\u200b\u7684\u200b\u6700\u4f4e\u4ef7\u200b\u4ef7\u683c\u200b\u662f\u200b\u591a\u5c11\u200b? \u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u6570\u636e\u200b\u8c03\u7528\u200b\u56de\u7b54\u200b\u7ed3\u679c\u200b <pre><code>completion = agent.chat(\"\u200b\u5f53\u524d\u200b300069\u200b\u80a1\u7968\u200b\u6700\u8fd1\u200b5\u200b\u5206\u949f\u200b\u7684\u200b\u6700\u4f4e\u4ef7\u200b\u4ef7\u683c\u200b\u662f\u200b\u591a\u5c11\u200b\uff1f\")\n</code></pre> <pre><code>[User] \u200b\u5f53\u524d\u200b300069\u200b\u80a1\u7968\u200b\u6700\u8fd1\u200b5\u200b\u5206\u949f\u200b\u7684\u200b\u6700\u4f4e\u4ef7\u200b\u4ef7\u683c\u200b\u662f\u200b\u591a\u5c11\u200b\uff1f\n\n[Assistant] name: KLine, arguments: {\"security_code\": \"300069\", \"period\": \"5m\", \"size\": 1}\n\n[Observation] \n|    | \u200b\u65f6\u95f4\u200b             |   \u200b\u5f00\u76d8\u200b |   \u200b\u6536\u76d8\u200b |   \u200b\u6700\u9ad8\u200b |   \u200b\u6700\u4f4e\u200b |   \u200b\u6210\u4ea4\u91cf\u200b |      \u200b\u6210\u4ea4\u989d\u200b |   \u200b\u632f\u5e45\u200b |   \u200b\u6da8\u8dcc\u5e45\u200b |   \u200b\u6da8\u8dcc\u200b\u989d\u200b |   \u200b\u6362\u624b\u7387\u200b |\n|---:|:-----------------|-------:|-------:|-------:|-------:|---------:|------------:|-------:|---------:|---------:|---------:|\n|  0 | 2025-02-19 15:00 |  17.32 |   17.3 |  17.32 |  17.28 |     3522 | 6.09349e+06 |   0.23 |    -0.12 |    -0.02 |      0.3 |\n</code></pre> <p>\u200b\u5f53\u524d\u200b300069\u200b\u80a1\u7968\u200b\u6700\u8fd1\u200b5\u200b\u5206\u949f\u200b\u7684\u200b\u6700\u4f4e\u4ef7\u200b\u4ef7\u683c\u200b\u662f\u200b17.28\u200b\u5143\u200b\u3002</p>"},{"location":"mcp/report/","title":"Report MCP Server","text":""},{"location":"mcp/report/#mcp-server","title":"\u7814\u62a5\u200b\u89e3\u8bfb\u200b MCP Server \u200b\u914d\u7f6e","text":"<pre><code>{\n  \"mcpServers\": {\n    \"wisecon-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n         \"--from\",\n         \"wisecon\",\n         \"wisecon-report-server\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/report/#_1","title":"\u5b89\u88c5\u200b\u65b9\u5f0f","text":""},{"location":"mcp/report/#uvx-wisecon018","title":"\u9700\u8981\u200b\u5148\u200b\u5b89\u88c5\u200b uvx, wisecon&gt;=0.1.8","text":"<pre><code># Windows\u200b\u5b89\u88c5\u200b\u811a\u672c\u200b\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# MacOS\u200b\u548c\u200bLinux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>cherry-studio MCP\u200b\u73af\u5883\u200b\u5b89\u88c5\u200b\u53c2\u8003\u200b</p>"},{"location":"mcp/report/#_2","title":"\u73af\u5883\u53d8\u91cf\u200b\u914d\u7f6e","text":"<ul> <li>Chrome Driver\uff1a\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u914d\u7f6e\u200b\u4e00\u4e0b\u200b chrome driver\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b <code>WISECON_CHROME_DRIVER_PATH</code>\u3002\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u4e0b\u8f7d\u200b\u4e0e\u200bchrome\u200b\u7248\u672c\u200b\u4e00\u81f4\u200b\u7684\u200bdriver\u3002</li> <li>\u200b\u7814\u62a5\u200b\u6587\u4ef6\u200b\u7f13\u5b58\u200b\u8def\u5f84\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u914d\u200b\u7814\u62a5\u200b\u4fdd\u5b58\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b <code>WISECON_REPORT_DIR</code>\uff0c\u200b\u9ed8\u8ba4\u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\u4e3a\u200b <code>/user/{user_name}/wisecon/report</code></li> </ul> Cherry Studio \u200b\u73af\u5883\u200b\u914d\u7f6e\u200b Chrome Driver \u200b\u73af\u5883\u53d8\u91cf\u200b\u914d\u7f6e\u200b \u200b\u7814\u62a5\u200b\u6587\u4ef6\u200b\u7f13\u5b58\u200b\u8def\u5f84\u200b\u914d\u7f6e"},{"location":"mcp/report/#_3","title":"\u4f7f\u7528\u200b\u65b9\u5f0f","text":"<pre><code>uv run wisecon wisecon-stock-server --transport sse --port 8080\n\nuvx --from wisecon wisecon-stock-server --transport sse --port 8080\n</code></pre> <p>\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b stdio \u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b sse \u200b\u65b9\u5f0f\u200b\uff0csse \u200b\u9700\u8981\u200b\u6307\u5b9a\u200b <code>--transport sse</code> \u200b\u4ee5\u53ca\u200b\u7aef\u53e3\u53f7\u200b <code>--port 8080</code></p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/%E7%A2%8E%E7%A2%8E%E5%BF%B5/","title":"\u788e\u788e\u5ff5","text":""}]}